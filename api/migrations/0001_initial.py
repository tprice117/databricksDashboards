# Generated by Django 4.1.1 on 2023-02-02 04:44

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(db_column='Name', max_length=255, verbose_name='Account Name')),
                ('type', models.CharField(blank=True, choices=[('Analyst', 'Analyst'), ('Competitor', 'Competitor'), ('Customer', 'Customer'), ('Integrator', 'Integrator'), ('Investor', 'Investor'), ('Partner', 'Partner'), ('Press', 'Press'), ('Prospect', 'Prospect'), ('Seller', 'Seller'), ('Other', 'Other')], db_column='Type', max_length=255, null=True, verbose_name='Account Type')),
                ('billing_street', models.TextField(blank=True, db_column='BillingStreet', null=True)),
                ('billing_city', models.CharField(blank=True, db_column='BillingCity', max_length=40, null=True)),
                ('billing_state', models.CharField(blank=True, db_column='BillingState', max_length=80, null=True, verbose_name='Billing State/Province')),
                ('billing_postal_code', models.CharField(blank=True, db_column='BillingPostalCode', max_length=20, null=True, verbose_name='Billing Zip/Postal Code')),
                ('billing_country', models.CharField(blank=True, db_column='BillingCountry', max_length=80, null=True)),
                ('billing_latitude', models.DecimalField(blank=True, db_column='BillingLatitude', decimal_places=15, max_digits=18, null=True)),
                ('billing_longitude', models.DecimalField(blank=True, db_column='BillingLongitude', decimal_places=15, max_digits=18, null=True)),
                ('billing_geocode_accuracy', models.CharField(blank=True, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], db_column='BillingGeocodeAccuracy', max_length=40, null=True)),
                ('billing_address', models.TextField(blank=True, db_column='BillingAddress', null=True)),
                ('shipping_street', models.TextField(blank=True, db_column='ShippingStreet', null=True)),
                ('shipping_city', models.CharField(blank=True, db_column='ShippingCity', max_length=40, null=True)),
                ('shipping_state', models.CharField(blank=True, db_column='ShippingState', max_length=80, null=True, verbose_name='Shipping State/Province')),
                ('shipping_postal_code', models.CharField(blank=True, db_column='ShippingPostalCode', max_length=20, null=True, verbose_name='Shipping Zip/Postal Code')),
                ('shipping_country', models.CharField(blank=True, db_column='ShippingCountry', max_length=80, null=True)),
                ('shipping_latitude', models.DecimalField(blank=True, db_column='ShippingLatitude', decimal_places=15, max_digits=18, null=True)),
                ('shipping_longitude', models.DecimalField(blank=True, db_column='ShippingLongitude', decimal_places=15, max_digits=18, null=True)),
                ('shipping_geocode_accuracy', models.CharField(blank=True, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], db_column='ShippingGeocodeAccuracy', max_length=40, null=True)),
                ('shipping_address', models.TextField(blank=True, db_column='ShippingAddress', null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=40, null=True, verbose_name='Account Phone')),
                ('fax', models.CharField(blank=True, db_column='Fax', max_length=40, null=True, verbose_name='Account Fax')),
                ('website', models.URLField(blank=True, db_column='Website', null=True)),
                ('photo_url', models.URLField(blank=True, db_column='PhotoUrl', null=True, verbose_name='Photo URL')),
                ('industry', models.CharField(blank=True, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Property management', 'Property management'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Waste management', 'Waste management'), ('Residential', 'Residential')], db_column='Industry', max_length=255, null=True)),
                ('number_of_employees', models.IntegerField(blank=True, db_column='NumberOfEmployees', null=True, verbose_name='Employees')),
                ('description', models.TextField(blank=True, db_column='Description', null=True, verbose_name='Account Description')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_activity_date', models.DateField(blank=True, db_column='LastActivityDate', null=True, verbose_name='Last Activity')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('jigsaw', models.CharField(blank=True, db_column='Jigsaw', max_length=20, null=True, verbose_name='Data.com Key')),
                ('jigsaw_company_id', models.CharField(blank=True, db_column='JigsawCompanyId', max_length=20, null=True, verbose_name='Jigsaw Company ID')),
                ('account_source', models.CharField(blank=True, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], db_column='AccountSource', max_length=255, null=True)),
                ('sic_desc', models.CharField(blank=True, db_column='SicDesc', max_length=80, null=True, verbose_name='SIC Description')),
                ('about_us', models.TextField(blank=True, db_column='About_Us__c', null=True, verbose_name='About Us')),
                ('number_of_units', models.DecimalField(blank=True, db_column='Number_of_units__c', decimal_places=0, max_digits=18, null=True, verbose_name='Number of units')),
                ('number_of_properties', models.DecimalField(blank=True, db_column='Number_of_Properties__c', decimal_places=0, max_digits=18, null=True, verbose_name='Number of Properties')),
                ('aln_id', models.DecimalField(blank=True, db_column='ALN_ID__c', decimal_places=0, max_digits=18, null=True, verbose_name='ALN ID')),
                ('ncr_status', models.CharField(blank=True, choices=[('Construction/Lease-Up', 'Construction/Lease-Up'), ('Lease-Up', 'Lease-Up'), ('On hold', 'On hold'), ('Planned', 'Planned'), ('Under Construction', 'Under Construction'), ('Under research', 'Under research')], db_column='NCR_Status__c', max_length=255, null=True, verbose_name='NCR Status')),
                ('construction_start_date', models.DateField(blank=True, db_column='Construction_Start_Date__c', null=True, verbose_name='Construction Start Date')),
                ('lease_start_date', models.DateField(blank=True, db_column='Lease_Start_Date__c', null=True, verbose_name='Lease Start Date')),
                ('occupancy_date', models.DateField(blank=True, db_column='Occupancy_Date__c', null=True, verbose_name='Occupancy Date')),
                ('completion_date', models.DateField(blank=True, db_column='Completion_Date__c', null=True, verbose_name='Completion Date')),
                ('occupancy_rate', models.DecimalField(blank=True, db_column='Occupancy_Rate__c', decimal_places=0, max_digits=18, null=True, verbose_name='Occupancy Rate')),
                ('year_built_renovated', models.CharField(blank=True, db_column='Year_Built_Renovated__c', max_length=255, null=True, verbose_name='Year Built/Renovated')),
                ('software_used', models.CharField(blank=True, db_column='Software_Used__c', max_length=255, null=True, verbose_name='Software Used')),
                ('property_type', models.CharField(blank=True, choices=[('Single Family HOA', 'Single Family HOA'), ('Townhome', 'Townhome'), ('Garden', 'Garden'), ('Mid-Rise', 'Mid-Rise'), ('High-Rise', 'High-Rise'), ('Build-For-Rent', 'Build-For-Rent')], db_column='Property_Type__c', max_length=255, null=True, verbose_name='Property Type')),
                ('number_of_floors', models.DecimalField(blank=True, db_column='Number_of_floors__c', decimal_places=0, max_digits=18, null=True, verbose_name='Number of floors')),
                ('number_of_buildings', models.DecimalField(blank=True, db_column='Number_of_buildings__c', decimal_places=0, max_digits=18, null=True, verbose_name='Number of buildings')),
                ('affordable_housing', models.BooleanField(db_column='Affordable_Housing__c', default=False, verbose_name='Affordable Housing')),
                ('senior_living', models.BooleanField(db_column='Senior_Living__c', default=False, verbose_name='Senior Living')),
                ('section_8', models.BooleanField(db_column='Section_8__c', default=False, verbose_name='Section 8')),
                ('student_housing', models.BooleanField(db_column='Student_Housing__c', default=False, verbose_name='Student Housing')),
                ('has_valet_trash', models.BooleanField(db_column='Has_Valet_Trash__c', default=False, verbose_name='Has Valet Trash')),
                ('has_recycling', models.BooleanField(db_column='Has_recycling__c', default=False, verbose_name='Has recycling')),
                ('average_rent', models.DecimalField(blank=True, db_column='Average_Rent__c', decimal_places=0, max_digits=18, null=True, verbose_name='Average Rent')),
                ('rent_sq_ft', models.DecimalField(blank=True, db_column='Rent_Sq_Ft__c', decimal_places=0, max_digits=18, null=True, verbose_name='Rent/Sq Ft.')),
                ('average_unit_size', models.DecimalField(blank=True, db_column='Average_Unit_Size__c', decimal_places=0, max_digits=18, null=True, verbose_name='Average Unit Size')),
                ('has_elevators', models.BooleanField(db_column='Has_elevators__c', default=False, verbose_name='Has Elevators')),
                ('construction_notes', models.TextField(blank=True, db_column='Construction_Notes__c', null=True, verbose_name='Construction Notes')),
                ('property_ownership', models.CharField(blank=True, db_column='Property_Ownership__c', max_length=255, null=True, verbose_name='Property Ownership')),
                ('order_support_email', models.EmailField(blank=True, db_column='Order_Support_Email__c', max_length=254, null=True, verbose_name='Order Support Email')),
                ('active_camp_active_campaign_id', models.CharField(blank=True, db_column='ActiveCamp__ActiveCampaign_Id__c', max_length=255, null=True, unique=True, verbose_name='ActiveCampaign Id')),
                ('active_camp_active_campaign_sync_status', models.CharField(blank=True, choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Does Not Meet Sync Criteria', 'Does Not Meet Sync Criteria'), ('Waiting For Update', 'Waiting For Update'), ('Account Deleted in ActiveCampaign', 'Account Deleted in ActiveCampaign')], db_column='ActiveCamp__ActiveCampaign_Sync_Status__c', max_length=255, null=True, verbose_name='ActiveCampaign Sync Status')),
                ('active_camp_last_synced', models.DateTimeField(blank=True, db_column='ActiveCamp__Last_Synced__c', null=True, verbose_name='ActiveCampaign Last Synced')),
                ('scrap_team_id', models.DecimalField(blank=True, db_column='Scrap_Team_ID__c', decimal_places=0, max_digits=18, null=True, verbose_name='Scrap Team ID')),
                ('scrap_fleet_id', models.DecimalField(blank=True, db_column='Scrap_Fleet_ID__c', decimal_places=0, max_digits=18, null=True, verbose_name='Scrap Fleet ID')),
                ('dispatch_manager_id', models.DecimalField(blank=True, db_column='Dispatch_Manager_ID__c', decimal_places=0, max_digits=18, null=True, verbose_name='Dispatch Manager ID')),
                ('merchant_type', models.CharField(blank=True, choices=[('Waste hauler', 'Waste hauler'), ('Landfill', 'Landfill'), ('Recycling facility', 'Recycling facility'), ('Transfer station', 'Transfer station'), ('Scrap yard', 'Scrap yard'), ('Retailer', 'Retailer'), ('Scrapper', 'Scrapper'), ('Equipment manufacturer', 'Equipment manufacturer'), ('Reseller', 'Reseller'), ('Community drop spot', 'Community drop spot'), ('Site services', 'Site services'), ('Equipment rentals', 'Equipment rentals')], db_column='Merchant_Type__c', max_length=4099, null=True, verbose_name='Merchant Type')),
                ('seller_type_display', models.CharField(blank=True, choices=[('Landfill', 'Landfill'), ('MRF', 'MRF'), ('Industrial', 'Industrial'), ('Scrap yard', 'Scrap yard'), ('Compost facility', 'Compost facility'), ('Processor', 'Processor'), ('Paint recycler', 'Paint recycler'), ('Tires', 'Tires'), ('Other recycler', 'Other recycler'), ('Roll-off', 'Roll-off'), ('Mover', 'Mover'), ('Junk', 'Junk'), ('Delivery', 'Delivery'), ('Broker', 'Broker'), ('Equipment', 'Equipment')], db_column='Seller_Type_Display__c', max_length=255, null=True, verbose_name='Seller Type (Display)')),
                ('seller_location_type', models.CharField(blank=True, choices=[('Services', 'Services'), ('Disposal site', 'Disposal site')], db_column='Seller_Location_Type__c', max_length=255, null=True, verbose_name='Seller Location Type')),
                ('seller_status', models.CharField(blank=True, choices=[('Inactive', 'Inactive'), ('Inactive - Onboarding', 'Inactive - Onboarding'), ('Inactive - Pending approval', 'Inactive - Pending approval'), ('Active - under review', 'Active - under review'), ('Active', 'Active')], db_column='Seller_Status__c', max_length=255, null=True, verbose_name='Seller Status')),
                ('stripe_connect_id', models.DecimalField(blank=True, db_column='Stripe_Connect_ID__c', decimal_places=0, max_digits=18, null=True, verbose_name='Stripe Connect ID')),
                ('stripe_customer_id', models.DecimalField(blank=True, db_column='Stripe_Customer_ID__c', decimal_places=0, max_digits=18, null=True, verbose_name='Stripe Customer ID')),
                ('seller_marketplace_display_name', models.CharField(blank=True, db_column='Seller_Marketplace_Display_Name__c', max_length=20, null=True, verbose_name='Seller Marketplace Display Name')),
                ('seller_open_days', models.CharField(blank=True, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], db_column='Seller_Open_Days__c', max_length=4099, null=True, verbose_name='Seller Open Day(s)')),
                ('seller_open_time', models.TimeField(blank=True, db_column='Seller_Open_Time__c', null=True, verbose_name='Seller Open Time')),
                ('seller_close_time', models.TimeField(blank=True, db_column='Seller_Close_Time__c', null=True, verbose_name='Seller Close Time')),
                ('seller_lead_time_hrs', models.DecimalField(blank=True, db_column='Seller_Lead_Time_hrs__c', decimal_places=0, max_digits=18, null=True, verbose_name='Seller Lead Time (hrs)')),
                ('book_online_available', models.BooleanField(db_column='Book_Online_Available__c', default=False, verbose_name='Book Online Available')),
                ('announcement', models.TextField(blank=True, db_column='Announcement__c', null=True)),
                ('live_menu_is_active', models.BooleanField(db_column='Live_Menu_is_Active__c', default=False, verbose_name='Live Menu Is Active')),
                ('seller_location_logo_url', models.URLField(blank=True, db_column='Seller_Location_Logo_URL__c', null=True, verbose_name='Seller Location Logo URL')),
                ('downstream_insurance_requirements_met', models.BooleanField(db_column='Downstream_Insurance_Requirements_Met__c', default=False, verbose_name='Downstream Insurance Requirements Met')),
                ('seller_badge', models.CharField(blank=True, choices=[('New', 'New'), ('Pro', 'Pro'), ('Platinum', 'Platinum')], db_column='Seller_Badge__c', max_length=255, null=True, verbose_name='Seller Badge')),
                ('average_rating', models.DecimalField(blank=True, db_column='Average_Rating__c', decimal_places=1, max_digits=2, null=True, verbose_name='Average Rating')),
                ('tire_recycler_cert_registration_id_co', models.CharField(blank=True, db_column='Tire_Recycler_Cert_Registration_ID_CO__c', max_length=100, null=True, verbose_name='Tire Recycler Cert Registration ID - CO')),
                ('composting_classification', models.CharField(blank=True, db_column='Composting_Classification__c', max_length=100, null=True, verbose_name='Composting Classification')),
                ('max_paint_gallons_accepted', models.DecimalField(blank=True, db_column='Max_paint_gallons_accepted__c', decimal_places=0, max_digits=18, null=True, verbose_name='Max paint gallons accepted')),
                ('recycling_disposal_classification', models.CharField(blank=True, db_column='Recycling_Disposal_Classification__c', max_length=100, null=True, verbose_name='Recycling Disposal Classification')),
                ('builders', models.ForeignKey(blank=True, db_column='Builders__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_builders_set', to='api.account')),
                ('master_record', models.ForeignKey(blank=True, db_column='MasterRecordId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_masterrecord_set', to='api.account', verbose_name='Master Record ID')),
                ('parent', models.ForeignKey(blank=True, db_column='ParentId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_parent_set', to='api.account', verbose_name='Parent Account ID')),
            ],
        ),
        migrations.CreateModel(
            name='AddOn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Add On Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('display_name', models.CharField(blank=True, db_column='Display_Name__c', max_length=255, null=True, verbose_name='Display Name')),
                ('sort', models.DecimalField(blank=True, db_column='Sort__c', decimal_places=0, max_digits=18, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AddOnChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Add On Choice Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('display_name', models.CharField(blank=True, db_column='Display_Name__c', max_length=255, null=True, verbose_name='Display Name')),
                ('add_on', models.ForeignKey(blank=True, db_column='Add_On__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.addon', verbose_name='Add On')),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('last_name', models.CharField(db_column='LastName', max_length=80)),
                ('first_name', models.CharField(blank=True, db_column='FirstName', max_length=40, null=True)),
                ('salutation', models.CharField(blank=True, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], db_column='Salutation', max_length=40, null=True)),
                ('middle_name', models.CharField(blank=True, db_column='MiddleName', max_length=40, null=True)),
                ('suffix', models.CharField(blank=True, db_column='Suffix', max_length=40, null=True)),
                ('name', models.CharField(db_column='Name', max_length=121, verbose_name='Full Name')),
                ('mailing_street', models.TextField(blank=True, db_column='MailingStreet', null=True)),
                ('mailing_city', models.CharField(blank=True, db_column='MailingCity', max_length=40, null=True)),
                ('mailing_state', models.CharField(blank=True, db_column='MailingState', max_length=80, null=True, verbose_name='Mailing State/Province')),
                ('mailing_postal_code', models.CharField(blank=True, db_column='MailingPostalCode', max_length=20, null=True, verbose_name='Mailing Zip/Postal Code')),
                ('mailing_country', models.CharField(blank=True, db_column='MailingCountry', max_length=80, null=True)),
                ('mailing_latitude', models.DecimalField(blank=True, db_column='MailingLatitude', decimal_places=15, max_digits=18, null=True)),
                ('mailing_longitude', models.DecimalField(blank=True, db_column='MailingLongitude', decimal_places=15, max_digits=18, null=True)),
                ('mailing_geocode_accuracy', models.CharField(blank=True, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], db_column='MailingGeocodeAccuracy', max_length=40, null=True)),
                ('mailing_address', models.TextField(blank=True, db_column='MailingAddress', null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=40, null=True, verbose_name='Business Phone')),
                ('fax', models.CharField(blank=True, db_column='Fax', max_length=40, null=True, verbose_name='Business Fax')),
                ('mobile_phone', models.CharField(blank=True, db_column='MobilePhone', max_length=40, null=True)),
                ('email', models.EmailField(blank=True, db_column='Email', max_length=254, null=True)),
                ('title', models.CharField(blank=True, db_column='Title', max_length=128, null=True)),
                ('department', models.CharField(blank=True, db_column='Department', max_length=80, null=True)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_activity_date', models.DateField(blank=True, db_column='LastActivityDate', null=True, verbose_name='Last Activity')),
                ('last_curequest_date', models.DateTimeField(blank=True, db_column='LastCURequestDate', null=True, verbose_name='Last Stay-in-Touch Request Date')),
                ('last_cuupdate_date', models.DateTimeField(blank=True, db_column='LastCUUpdateDate', null=True, verbose_name='Last Stay-in-Touch Save Date')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('email_bounced_reason', models.CharField(blank=True, db_column='EmailBouncedReason', max_length=255, null=True)),
                ('email_bounced_date', models.DateTimeField(blank=True, db_column='EmailBouncedDate', null=True)),
                ('is_email_bounced', models.BooleanField(db_column='IsEmailBounced', default=False)),
                ('photo_url', models.URLField(blank=True, db_column='PhotoUrl', null=True, verbose_name='Photo URL')),
                ('jigsaw', models.CharField(blank=True, db_column='Jigsaw', max_length=20, null=True, verbose_name='Data.com Key')),
                ('jigsaw_contact_id', models.CharField(blank=True, db_column='JigsawContactId', max_length=20, null=True, verbose_name='Jigsaw Contact ID')),
                ('sansancard_created_by_scan_to_salesforce', models.BooleanField(db_column='sansancard__CreatedByScanToSalesforce__c', default=False, verbose_name='Created by Scan to Salesforce')),
                ('is_user', models.BooleanField(db_column='Is_User__c', default=False, verbose_name='Is User')),
                ('active_camp_account_relation_sync_status', models.CharField(blank=True, choices=[('Successfully Synced', 'Successfully Synced'), ('Waiting For Next Sync', 'Waiting For Next Sync'), ('Waiting For Update', 'Waiting For Update')], db_column='ActiveCamp__Account_Relation_Sync_Status__c', max_length=255, null=True, verbose_name='Account Relation Sync Status')),
                ('active_camp_active_campaign_sync_status', models.CharField(blank=True, choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Duplicate Email Found Do Not Sync', 'Duplicate Email Found Do Not Sync')], db_column='ActiveCamp__ActiveCampaign_Sync_Status__c', max_length=255, null=True, verbose_name='ActiveCampaign Sync Status')),
                ('active_camp_active_campaign_id', models.CharField(blank=True, db_column='ActiveCamp__Active_Campaign_Id__c', max_length=255, null=True, unique=True, verbose_name='ActiveCampaign Id')),
                ('active_camp_last_synced', models.DateTimeField(blank=True, db_column='ActiveCamp__Last_Synced__c', null=True, verbose_name='ActiveCampaign Last Synced')),
                ('user_id', models.CharField(blank=True, db_column='User_ID__c', max_length=255, null=True, verbose_name='User ID')),
                ('account', models.ForeignKey(blank=True, db_column='AccountId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contact_account_set', to='api.account', verbose_name='Account ID')),
                ('master_record', models.ForeignKey(blank=True, db_column='MasterRecordId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contact_masterrecord_set', to='api.contact', verbose_name='Master Record ID')),
                ('property', models.ForeignKey(blank=True, db_column='Property__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contact_property_set', to='api.account')),
                ('reports_to', models.ForeignKey(blank=True, db_column='ReportsToId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contact_reportsto_set', to='api.contact', verbose_name='Reports To ID')),
            ],
        ),
        migrations.CreateModel(
            name='LocationZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Location Zone Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MainProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Main Products Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('cubic_yards', models.DecimalField(blank=True, db_column='Cubic_Yards__c', decimal_places=0, max_digits=18, null=True, verbose_name='Cubic Yards')),
                ('ar_url', models.URLField(blank=True, db_column='AR_Url__c', null=True, verbose_name='AR Url')),
                ('description', models.TextField(blank=True, db_column='Description__c', null=True)),
                ('image_del', models.TextField(blank=True, db_column='Image_del__c', null=True, verbose_name='Image')),
                ('sort', models.DecimalField(blank=True, db_column='Sort__c', decimal_places=0, max_digits=18, null=True)),
                ('included_tonnage_quantity', models.DecimalField(blank=True, db_column='Included_Tonnage_Quantity__c', decimal_places=0, max_digits=18, null=True, verbose_name='Included Tonnage Quantity')),
                ('price_per_additional_ton', models.DecimalField(blank=True, db_column='Price_Per_Additional_Ton__c', decimal_places=2, max_digits=18, null=True, verbose_name='Price Per Additional Ton')),
                ('max_tonnage_quantity', models.DecimalField(blank=True, db_column='Max_Tonnage_Quantity__c', decimal_places=0, max_digits=18, null=True, verbose_name='Max Tonnage Quantity')),
                ('max_rate', models.DecimalField(blank=True, db_column='Max_Rate__c', decimal_places=0, max_digits=18, null=True, verbose_name='Max Rate Quantity')),
                ('included_rate_quantity', models.DecimalField(blank=True, db_column='Included_Rate_Quantity__c', decimal_places=0, max_digits=18, null=True, verbose_name='Included Rate Quantity')),
            ],
        ),
        migrations.CreateModel(
            name='MainProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Main Product Category Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('description', models.TextField(blank=True, db_column='Description__c', null=True)),
                ('image', models.TextField(blank=True, db_column='Image__c', null=True)),
                ('icon', models.TextField(blank=True, db_column='Icon__c', null=True)),
                ('sort', models.DecimalField(blank=True, db_column='Sort__c', decimal_places=0, max_digits=18, null=True)),
                ('display_name', models.CharField(blank=True, db_column='Display_Name__c', max_length=255, null=True, verbose_name='Display Name')),
            ],
        ),
        migrations.CreateModel(
            name='Opportunity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(db_column='Name', max_length=120)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('stage_name', models.CharField(choices=[('Demo Scheduled', 'Demo Scheduled'), ('Demo Performed', 'Demo Performed'), ('Account Configuration', 'Account Configuration'), ('Order Acceptance', 'Order Acceptance'), ('Platform Engagement', 'Platform Engagement'), ('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Proposal', 'Proposal'), ('Negotiation', 'Negotiation'), ('Verify Hauler', 'Verify Hauler'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost')], db_column='StageName', max_length=255, verbose_name='Stage')),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=2, max_digits=18, null=True)),
                ('probability', models.DecimalField(blank=True, db_column='Probability', decimal_places=0, max_digits=3, null=True, verbose_name='Probability (%)')),
                ('close_date', models.DateField(db_column='CloseDate')),
                ('type', models.CharField(blank=True, choices=[('Existing Business', 'Existing Business'), ('New Business', 'New Business')], db_column='Type', max_length=255, null=True, verbose_name='Opportunity Type')),
                ('next_step', models.CharField(blank=True, db_column='NextStep', max_length=255, null=True)),
                ('lead_source', models.CharField(blank=True, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], db_column='LeadSource', max_length=255, null=True)),
                ('is_closed', models.BooleanField(db_column='IsClosed', default=False, verbose_name='Closed')),
                ('is_won', models.BooleanField(db_column='IsWon', default=False, verbose_name='Won')),
                ('forecast_category', models.CharField(choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('MostLikely', 'Most Likely'), ('Forecast', 'Commit'), ('Closed', 'Closed')], db_column='ForecastCategory', max_length=40)),
                ('forecast_category_name', models.CharField(blank=True, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], db_column='ForecastCategoryName', max_length=255, null=True, verbose_name='Forecast Category')),
                ('has_opportunity_line_item', models.BooleanField(db_column='HasOpportunityLineItem', default=False, verbose_name='Has Line Item')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_activity_date', models.DateField(blank=True, db_column='LastActivityDate', null=True, verbose_name='Last Activity')),
                ('push_count', models.IntegerField(blank=True, db_column='PushCount', null=True)),
                ('last_stage_change_date', models.DateTimeField(blank=True, db_column='LastStageChangeDate', null=True)),
                ('fiscal_quarter', models.IntegerField(blank=True, db_column='FiscalQuarter', null=True)),
                ('fiscal_year', models.IntegerField(blank=True, db_column='FiscalYear', null=True)),
                ('fiscal', models.CharField(blank=True, db_column='Fiscal', max_length=6, null=True, verbose_name='Fiscal Period')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('has_open_activity', models.BooleanField(db_column='HasOpenActivity', default=False)),
                ('has_overdue_task', models.BooleanField(db_column='HasOverdueTask', default=False)),
                ('budget_confirmed', models.BooleanField(db_column='Budget_Confirmed__c', default=False, verbose_name='Budget Confirmed')),
                ('discovery_completed', models.BooleanField(db_column='Discovery_Completed__c', default=False, verbose_name='Discovery Completed')),
                ('roi_analysis_completed', models.BooleanField(db_column='ROI_Analysis_Completed__c', default=False, verbose_name='ROI Analysis Completed')),
                ('dhruvsoft_is_converted1', models.BooleanField(db_column='Dhruvsoft__IsConverted1__c', default=False, verbose_name='IsConverted')),
                ('loss_reason', models.CharField(blank=True, choices=[('Lost to Competitor', 'Lost to Competitor'), ('No Budget / Lost Funding', 'No Budget / Lost Funding'), ('No Decision / Non-Responsive', 'No Decision / Non-Responsive'), ('Price', 'Price'), ('Other', 'Other')], db_column='Loss_Reason__c', max_length=255, null=True, verbose_name='Loss Reason')),
                ('dhruvsoft_order_number', models.CharField(blank=True, db_column='Dhruvsoft__OrderNumber__c', max_length=8, null=True, verbose_name='Order Number(Deprecated)')),
                ('time_slot', models.CharField(blank=True, choices=[('4am-8am', '4am-8am'), ('8am-12pm', '8am-12pm'), ('12pm-4pm', '12pm-4pm'), ('4pm-8pm', '4pm-8pm'), ('8pm-12am', '8pm-12am')], db_column='Time_Slot__c', max_length=255, null=True, verbose_name='Time Slot')),
                ('schedule_date', models.DateField(blank=True, db_column='Schedule_Date__c', null=True, verbose_name='Schedule Date')),
                ('additional_schedule_details', models.TextField(blank=True, db_column='Additional_Schedule_Details__c', null=True, verbose_name='Additional Schedule Details')),
                ('access_details', models.TextField(blank=True, db_column='Access_Details__c', null=True, verbose_name='Access Details')),
                ('active_camp_active_campaign_sync_status', models.CharField(blank=True, choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Does Not Meet Sync Criteria', 'Does Not Meet Sync Criteria')], db_column='ActiveCamp__ActiveCampaign_Sync_Status__c', max_length=255, null=True, verbose_name='ActiveCampaign Sync Status')),
                ('active_camp_last_synced', models.DateTimeField(blank=True, db_column='ActiveCamp__Last_Synced__c', null=True, verbose_name='ActiveCampaign Last Synced')),
                ('pandadoc_tracking_number', models.CharField(blank=True, db_column='pandadoc__TrackingNumber__c', max_length=12, null=True, verbose_name='Tracking Number')),
                ('start_date_time', models.DateTimeField(blank=True, db_column='Start_DateTime__c', null=True, verbose_name='Start DateTime')),
                ('end_date_time', models.DateTimeField(blank=True, db_column='End_DateTime__c', null=True, verbose_name='End DateTime')),
                ('marketplace_is_active', models.BooleanField(db_column='Marketplace_is_active__c', default=False, verbose_name='Marketplace is active')),
                ('dispatch_is_active', models.BooleanField(db_column='Dispatch_is_active__c', default=False, verbose_name='Dispatch is active')),
                ('scrapper_is_active', models.BooleanField(db_column='Scrapper_is_active__c', default=False, verbose_name='Scrapper is active')),
                ('account', models.ForeignKey(blank=True, db_column='AccountId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='opportunity_account_set', to='api.account', verbose_name='Account ID')),
                ('contact', models.ForeignKey(blank=True, db_column='ContactId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.contact', verbose_name='Contact ID')),
                ('main_product', models.ForeignKey(blank=True, db_column='Main_Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.mainproduct', verbose_name='Main Product')),
            ],
        ),
        migrations.CreateModel(
            name='Pricebook2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(db_column='Name', max_length=255, verbose_name='Price Book Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('is_active', models.BooleanField(db_column='IsActive', default=False, verbose_name='Active')),
                ('is_archived', models.BooleanField(db_column='IsArchived', default=False, verbose_name='Archived')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=255, null=True)),
                ('is_standard', models.BooleanField(db_column='IsStandard', default=False, verbose_name='Is Standard Price Book')),
            ],
        ),
        migrations.CreateModel(
            name='Product2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='Name', max_length=255, verbose_name='Product Name')),
                ('product_code', models.CharField(blank=True, db_column='ProductCode', max_length=255, null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True, verbose_name='Product Description')),
                ('quantity_schedule_type', models.CharField(blank=True, choices=[('Divide', 'Divide Amount into multiple installments'), ('Repeat', 'Repeat Amount for each installment')], db_column='QuantityScheduleType', max_length=40, null=True)),
                ('quantity_installment_period', models.CharField(blank=True, choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], db_column='QuantityInstallmentPeriod', max_length=40, null=True)),
                ('number_of_quantity_installments', models.IntegerField(blank=True, db_column='NumberOfQuantityInstallments', null=True)),
                ('revenue_schedule_type', models.CharField(blank=True, choices=[('Divide', 'Divide Amount into multiple installments'), ('Repeat', 'Repeat Amount for each installment')], db_column='RevenueScheduleType', max_length=40, null=True)),
                ('revenue_installment_period', models.CharField(blank=True, choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], db_column='RevenueInstallmentPeriod', max_length=40, null=True)),
                ('number_of_revenue_installments', models.IntegerField(blank=True, db_column='NumberOfRevenueInstallments', null=True)),
                ('is_active', models.BooleanField(db_column='IsActive', default=False, verbose_name='Active')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('family', models.CharField(blank=True, choices=[('Junk', 'Junk'), ('Business Dumpster', 'Business Dumpster'), ('Large Dumpster', 'Large Dumpster'), ('Apartment Services', 'Apartment Services'), ('Dispatch - SaaS', 'Dispatch - SaaS'), ('Site_Services', 'Site Services')], db_column='Family', max_length=255, null=True, verbose_name='Product Family')),
                ('external_id', models.CharField(blank=True, db_column='ExternalId', max_length=255, null=True, verbose_name='External ID')),
                ('display_url', models.URLField(blank=True, db_column='DisplayUrl', null=True, verbose_name='Display URL')),
                ('quantity_unit_of_measure', models.CharField(blank=True, choices=[('Each', 'Each')], db_column='QuantityUnitOfMeasure', max_length=255, null=True)),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('is_archived', models.BooleanField(db_column='IsArchived', default=False, verbose_name='Archived')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('stock_keeping_unit', models.CharField(blank=True, db_column='StockKeepingUnit', max_length=180, null=True, verbose_name='Product SKU')),
                ('city', models.CharField(blank=True, choices=[('Denver', 'Denver')], db_column='City__c', max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('Incomplete', 'Incomplete'), ('Ready for Review', 'Ready for Review'), ('Under Review', 'Under Review'), ('Rejected', 'Rejected'), ('Approved', 'Approved')], db_column='Status__c', default='Incomplete', max_length=255, null=True)),
                ('product_type', models.CharField(blank=True, choices=[('Service', 'Service'), ('Drop off', 'Drop off')], db_column='Product_Type__c', max_length=255, null=True, verbose_name='Product Type')),
                ('main_product', models.ForeignKey(blank=True, db_column='Main_Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.mainproduct', verbose_name='Main Product')),
            ],
        ),
        migrations.CreateModel(
            name='SellerProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Seller Product Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('rate', models.DecimalField(blank=True, db_column='Rate__c', decimal_places=2, max_digits=18, null=True)),
                ('product', models.ForeignKey(blank=True, db_column='Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.product2')),
                ('service_provider', models.ForeignKey(blank=True, db_column='Service_Provider__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.account', verbose_name='Service Provider')),
            ],
        ),
        migrations.CreateModel(
            name='WasteType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Waste Type Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SellerProductLocationZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Seller Product Location Zone Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('delivery_fee', models.DecimalField(blank=True, db_column='Delivery_Fee__c', decimal_places=2, max_digits=18, null=True, verbose_name='Delivery Fee')),
                ('pickup_fee', models.DecimalField(blank=True, db_column='Pickup_Fee__c', decimal_places=2, max_digits=18, null=True, verbose_name='Pickup Fee')),
                ('location_zone', models.ForeignKey(blank=True, db_column='Location_Zone__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.locationzone', verbose_name='Location Zone')),
                ('seller_product', models.ForeignKey(blank=True, db_column='Seller_Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.sellerproduct', verbose_name='Seller Product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategoryInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Product Category Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('product_category', models.ForeignKey(blank=True, db_column='Product_Category__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.mainproductcategory', verbose_name='Product Category')),
            ],
        ),
        migrations.CreateModel(
            name='ProductAddOnChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Product Add On Choice Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('add_on_choice', models.ForeignKey(blank=True, db_column='Add_On_Choice__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.addonchoice', verbose_name='Add On Choice')),
                ('product', models.ForeignKey(blank=True, db_column='Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.product2')),
            ],
        ),
        migrations.CreateModel(
            name='PricebookEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=255, null=True, verbose_name='Product Name')),
                ('unit_price', models.DecimalField(db_column='UnitPrice', decimal_places=2, max_digits=18, verbose_name='List Price')),
                ('is_active', models.BooleanField(db_column='IsActive', default=False, verbose_name='Active')),
                ('use_standard_price', models.BooleanField(db_column='UseStandardPrice', default=False)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('product_code', models.CharField(blank=True, db_column='ProductCode', max_length=255, null=True)),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('is_archived', models.BooleanField(db_column='IsArchived', default=False, verbose_name='Archived')),
                ('pricebook2', models.ForeignKey(db_column='Pricebook2Id', on_delete=django.db.models.deletion.DO_NOTHING, to='api.pricebook2', verbose_name='Price Book ID')),
                ('product2', models.ForeignKey(db_column='Product2Id', on_delete=django.db.models.deletion.DO_NOTHING, to='api.product2', verbose_name='Product ID')),
            ],
        ),
        migrations.CreateModel(
            name='PostalCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Postal Code Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('state', models.CharField(blank=True, db_column='State__c', max_length=255, null=True)),
                ('state_abbreviation', models.CharField(blank=True, db_column='State_Abbreviation__c', max_length=255, null=True, verbose_name='State Abbreviation')),
                ('county', models.CharField(blank=True, db_column='County__c', max_length=255, null=True)),
                ('city', models.CharField(blank=True, db_column='City__c', max_length=255, null=True)),
                ('location_zone', models.ForeignKey(blank=True, db_column='Location_Zone__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.locationzone', verbose_name='Location Zone')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateField(db_column='EffectiveDate', verbose_name='Order Start Date')),
                ('end_date', models.DateField(blank=True, db_column='EndDate', null=True, verbose_name='Order End Date')),
                ('is_reduction_order', models.BooleanField(db_column='IsReductionOrder', default=False, verbose_name='Reduction Order')),
                ('status', models.CharField(choices=[('Scheduled', 'Scheduled'), ('Pending_Acceptance', 'Pending Acceptance'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('On the way', 'On the way'), ('Arrived', 'Arrived'), ('Price Changed', 'Price Changed'), ('Price Approved', 'Price Approved'), ('Complete', 'Complete'), ('Invoiced', 'Invoiced'), ('Paid_To_Hauler', 'Paid To Hauler'), ('Paid_By_Customer', 'Paid By Customer')], db_column='Status', max_length=100)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('type', models.CharField(blank=True, db_column='Type', max_length=255, null=True, verbose_name='Order Type')),
                ('billing_street', models.TextField(blank=True, db_column='BillingStreet', null=True)),
                ('billing_city', models.CharField(blank=True, db_column='BillingCity', max_length=40, null=True)),
                ('billing_state', models.CharField(blank=True, db_column='BillingState', max_length=80, null=True, verbose_name='Billing State/Province')),
                ('billing_postal_code', models.CharField(blank=True, db_column='BillingPostalCode', max_length=20, null=True, verbose_name='Billing Zip/Postal Code')),
                ('billing_country', models.CharField(blank=True, db_column='BillingCountry', max_length=80, null=True)),
                ('billing_latitude', models.DecimalField(blank=True, db_column='BillingLatitude', decimal_places=15, max_digits=18, null=True)),
                ('billing_longitude', models.DecimalField(blank=True, db_column='BillingLongitude', decimal_places=15, max_digits=18, null=True)),
                ('billing_geocode_accuracy', models.CharField(blank=True, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], db_column='BillingGeocodeAccuracy', max_length=40, null=True)),
                ('billing_address', models.TextField(blank=True, db_column='BillingAddress', null=True)),
                ('shipping_street', models.TextField(blank=True, db_column='ShippingStreet', null=True)),
                ('shipping_city', models.CharField(blank=True, db_column='ShippingCity', max_length=40, null=True)),
                ('shipping_state', models.CharField(blank=True, db_column='ShippingState', max_length=80, null=True, verbose_name='Shipping State/Province')),
                ('shipping_postal_code', models.CharField(blank=True, db_column='ShippingPostalCode', max_length=20, null=True, verbose_name='Shipping Zip/Postal Code')),
                ('shipping_country', models.CharField(blank=True, db_column='ShippingCountry', max_length=80, null=True)),
                ('shipping_latitude', models.DecimalField(blank=True, db_column='ShippingLatitude', decimal_places=15, max_digits=18, null=True)),
                ('shipping_longitude', models.DecimalField(blank=True, db_column='ShippingLongitude', decimal_places=15, max_digits=18, null=True)),
                ('shipping_geocode_accuracy', models.CharField(blank=True, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], db_column='ShippingGeocodeAccuracy', max_length=40, null=True)),
                ('shipping_address', models.TextField(blank=True, db_column='ShippingAddress', null=True)),
                ('activated_date', models.DateTimeField(blank=True, db_column='ActivatedDate', null=True)),
                ('status_code', models.CharField(choices=[('Draft', 'Draft'), ('Activated', 'Activated'), ('Canceled', 'Cancelled'), ('Expired', 'Expired')], db_column='StatusCode', max_length=40, verbose_name='Status Category')),
                ('order_number', models.CharField(db_column='OrderNumber', max_length=30)),
                ('total_amount', models.DecimalField(db_column='TotalAmount', decimal_places=2, max_digits=18, verbose_name='Order Amount')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('dhruvsoft_order_amt_from_opportunity_amt', models.DecimalField(blank=True, db_column='Dhruvsoft__OrderAmtFromOpportunityAmt__c', decimal_places=2, max_digits=18, null=True, verbose_name='Order Amount (Opportunity)')),
                ('dhruvsoft_convert_from_opportunity', models.BooleanField(db_column='Dhruvsoft__convert_from_opportunity__c', default=False, verbose_name='Converted from Opportunity')),
                ('hauler_payout', models.DecimalField(blank=True, db_column='Hauler_Payout__c', decimal_places=2, max_digits=18, null=True, verbose_name='Hauler Payout')),
                ('scheduled_date', models.DateField(blank=True, db_column='Scheduled_Date__c', null=True, verbose_name='Scheduled Date')),
                ('additional_schedule_details', models.TextField(blank=True, db_column='Additional_Schedule_Details__c', null=True, verbose_name='Additional Schedule Details')),
                ('access_schedule_details', models.TextField(blank=True, db_column='Access_Schedule_Details__c', null=True, verbose_name='Access Schedule Details')),
                ('scheduled_time_slot', models.CharField(blank=True, choices=[('4am-8am', '4am-8am'), ('8am-12pm', '8am-12pm'), ('12pm-4pm', '12pm-4pm'), ('4pm-8pm', '4pm-8pm'), ('8pm-12am', '8pm-12am')], db_column='Scheduled_Time_Slot__c', max_length=255, null=True, verbose_name='Scheduled Time Slot')),
                ('scrap_task_id', models.DecimalField(blank=True, db_column='Scrap_Task_ID__c', decimal_places=0, max_digits=18, null=True, verbose_name='Scrap Task ID')),
                ('start_date_time', models.DateTimeField(blank=True, db_column='Start_DateTime__c', null=True, verbose_name='Start DateTime')),
                ('end_date_time', models.DateTimeField(blank=True, db_column='End_DateTime__c', null=True, verbose_name='End DateTime')),
                ('account', models.ForeignKey(blank=True, db_column='AccountId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='order_account_set', to='api.account', verbose_name='Account ID')),
                ('customer_authorized_by', models.ForeignKey(blank=True, db_column='CustomerAuthorizedById', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.contact', verbose_name='Customer Authorized By ID')),
                ('dhruvsoft_opportunity', models.ForeignKey(blank=True, db_column='Dhruvsoft__Opportunity__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.opportunity', verbose_name='Opportunity(Deprecated)')),
                ('original_order', models.ForeignKey(blank=True, db_column='OriginalOrderId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.order', verbose_name='Order ID')),
                ('pricebook2', models.ForeignKey(blank=True, db_column='Pricebook2Id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.pricebook2', verbose_name='Price Book ID')),
                ('service_provider', models.ForeignKey(blank=True, db_column='Service_Provider__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='order_serviceprovider_set', to='api.account', verbose_name='Service Provider')),
            ],
        ),
        migrations.AddField(
            model_name='opportunity',
            name='pricebook2',
            field=models.ForeignKey(blank=True, db_column='Pricebook2Id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.pricebook2', verbose_name='Price Book ID'),
        ),
        migrations.AddField(
            model_name='opportunity',
            name='product',
            field=models.ForeignKey(blank=True, db_column='Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.product2'),
        ),
        migrations.AddField(
            model_name='opportunity',
            name='service_provider',
            field=models.ForeignKey(blank=True, db_column='Service_Provider__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='opportunity_serviceprovider_set', to='api.account', verbose_name='Service Provider'),
        ),
        migrations.CreateModel(
            name='MainProductWasteType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Main Product Waste Type Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('main_product', models.ForeignKey(blank=True, db_column='Main_Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.mainproduct', verbose_name='Main Product')),
                ('waste_type', models.ForeignKey(blank=True, db_column='Waste_Type__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.wastetype', verbose_name='Waste Type')),
            ],
        ),
        migrations.CreateModel(
            name='MainProductInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Main Product Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('main_product', models.ForeignKey(blank=True, db_column='Main_Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.mainproduct', verbose_name='Main Product')),
            ],
        ),
        migrations.CreateModel(
            name='MainProductAddOn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Main Product Add On Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('add_on', models.ForeignKey(blank=True, db_column='Add_On__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.addon', verbose_name='Add On')),
                ('main_product', models.ForeignKey(blank=True, db_column='Main_Product__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.mainproduct', verbose_name='Main Product')),
            ],
        ),
        migrations.AddField(
            model_name='mainproduct',
            name='product_category',
            field=models.ForeignKey(blank=True, db_column='Product_Category__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.mainproductcategory', verbose_name='Product Category'),
        ),
        migrations.CreateModel(
            name='DisposalFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=80, null=True, verbose_name='Disposal Fee Name')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('last_viewed_date', models.DateTimeField(blank=True, db_column='LastViewedDate', null=True)),
                ('last_referenced_date', models.DateTimeField(blank=True, db_column='LastReferencedDate', null=True)),
                ('price', models.DecimalField(blank=True, db_column='Price__c', decimal_places=2, max_digits=18, null=True)),
                ('account', models.ForeignKey(blank=True, db_column='Account__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.account')),
                ('location_zone', models.ForeignKey(blank=True, db_column='Location_Zone__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.locationzone', verbose_name='Location Zone')),
                ('waste_type', models.ForeignKey(blank=True, db_column='Waste_Type__c', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.wastetype', verbose_name='Waste Type')),
            ],
        ),
        migrations.CreateModel(
            name='AccountContactRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roles', models.CharField(blank=True, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], db_column='Roles', max_length=4099, null=True)),
                ('is_direct', models.BooleanField(db_column='IsDirect', default=False, verbose_name='Direct')),
                ('is_active', models.BooleanField(db_column='IsActive', default=False, verbose_name='Active')),
                ('start_date', models.DateField(blank=True, db_column='StartDate', null=True)),
                ('end_date', models.DateField(blank=True, db_column='EndDate', null=True)),
                ('is_deleted', models.BooleanField(db_column='IsDeleted', default=False, verbose_name='Deleted')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('last_modified_date', models.DateTimeField(db_column='LastModifiedDate')),
                ('system_modstamp', models.DateTimeField(db_column='SystemModstamp')),
                ('relationship_strength', models.CharField(blank=True, choices=[('Strong', 'Strong'), ('Neutral', 'Neutral'), ('Weak', 'Weak')], db_column='Relationship_Strength__c', max_length=255, null=True, verbose_name='Relationship Strength')),
                ('contact', models.ForeignKey(db_column='ContactId', on_delete=django.db.models.deletion.DO_NOTHING, to='api.contact', verbose_name='Contact ID')),
            ],
        ),
    ]
