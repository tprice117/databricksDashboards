from django.db import models
import uuid

class BaseModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', default=False)

    class Meta:
       abstract = True
    
class Account(BaseModel):
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='account_masterrecord_set', verbose_name='Master Record ID', blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='Account Name')
    type = models.CharField(max_length=255, verbose_name='Account Type', choices=[('Analyst', 'Analyst'), ('Competitor', 'Competitor'), ('Customer', 'Customer'), ('Integrator', 'Integrator'), ('Investor', 'Investor'), ('Partner', 'Partner'), ('Press', 'Press'), ('Prospect', 'Prospect'), ('Seller', 'Seller'), ('Other', 'Other')], blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='account_parent_set', verbose_name='Parent Account ID', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Account Phone', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Account Fax', blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', blank=True, null=True)
    industry = models.CharField(max_length=255, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Property management', 'Property management'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Waste management', 'Waste management'), ('Residential', 'Residential')], blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    description = models.TextField(verbose_name='Account Description', blank=True, null=True)
    last_activity_date = models.DateField(verbose_name='Last Activity', blank=True, null=True)
    jigsaw = models.CharField(max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_company_id = models.CharField(max_length=20, verbose_name='Jigsaw Company ID', blank=True, null=True)
    account_source = models.CharField(max_length=255, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], blank=True, null=True)
    sic_desc = models.CharField(max_length=80, verbose_name='SIC Description', blank=True, null=True)
    about_us = models.TextField(verbose_name='About Us', blank=True, null=True)
    number_of_units = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of units', blank=True, null=True)
    number_of_properties = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of Properties', blank=True, null=True)
    aln_id = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='ALN ID', blank=True, null=True)
    builders = models.ForeignKey('self', models.DO_NOTHING, related_name='account_builders_set', blank=True, null=True)
    ncr_status = models.CharField(max_length=255, verbose_name='NCR Status', choices=[('Construction/Lease-Up', 'Construction/Lease-Up'), ('Lease-Up', 'Lease-Up'), ('On hold', 'On hold'), ('Planned', 'Planned'), ('Under Construction', 'Under Construction'), ('Under research', 'Under research')], blank=True, null=True)
    construction_start_date = models.DateField(verbose_name='Construction Start Date', blank=True, null=True)
    lease_start_date = models.DateField(verbose_name='Lease Start Date', blank=True, null=True)
    occupancy_date = models.DateField(verbose_name='Occupancy Date', blank=True, null=True)
    completion_date = models.DateField(verbose_name='Completion Date', blank=True, null=True)
    occupancy_rate = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Occupancy Rate', blank=True, null=True)
    year_built_renovated = models.CharField(max_length=255, verbose_name='Year Built/Renovated', blank=True, null=True)
    software_used = models.CharField(max_length=255, verbose_name='Software Used', blank=True, null=True)
    property_type = models.CharField(max_length=255, verbose_name='Property Type', choices=[('Single Family HOA', 'Single Family HOA'), ('Townhome', 'Townhome'), ('Garden', 'Garden'), ('Mid-Rise', 'Mid-Rise'), ('High-Rise', 'High-Rise'), ('Build-For-Rent', 'Build-For-Rent')], blank=True, null=True)
    number_of_floors = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of floors', blank=True, null=True)
    number_of_buildings = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of buildings', blank=True, null=True)
    affordable_housing = models.BooleanField(verbose_name='Affordable Housing', default=False)
    senior_living = models.BooleanField(verbose_name='Senior Living', default=False)
    section_8 = models.BooleanField(verbose_name='Section 8', default=False)
    student_housing = models.BooleanField(verbose_name='Student Housing', default=False)
    has_valet_trash = models.BooleanField(verbose_name='Has Valet Trash', default=False)
    has_recycling = models.BooleanField(verbose_name='Has recycling', default=False)
    average_rent = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Average Rent', blank=True, null=True)
    rent_sq_ft = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Rent/Sq Ft.', blank=True, null=True)
    average_unit_size = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Average Unit Size', blank=True, null=True)
    has_elevators = models.BooleanField(verbose_name='Has Elevators', default=False)
    construction_notes = models.TextField(verbose_name='Construction Notes', blank=True, null=True)
    property_ownership = models.CharField(max_length=255, verbose_name='Property Ownership', blank=True, null=True)
    order_support_email = models.EmailField(verbose_name='Order Support Email', blank=True, null=True)
    active_camp_active_campaign_id = models.CharField(unique=True, max_length=255, verbose_name='ActiveCampaign Id', blank=True, null=True) 
    active_camp_active_campaign_sync_status = models.CharField(max_length=255, verbose_name='ActiveCampaign Sync Status', choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Does Not Meet Sync Criteria', 'Does Not Meet Sync Criteria'), ('Waiting For Update', 'Waiting For Update'), ('Account Deleted in ActiveCampaign', 'Account Deleted in ActiveCampaign')], blank=True, null=True) 
    active_camp_last_synced = models.DateTimeField(verbose_name='ActiveCampaign Last Synced', blank=True, null=True) 
    scrap_team_id = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Scrap Team ID', blank=True, null=True)
    scrap_fleet_id = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Scrap Fleet ID', blank=True, null=True)
    dispatch_manager_id = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Dispatch Manager ID', blank=True, null=True)
    merchant_type = models.CharField(max_length=4099, verbose_name='Merchant Type', choices=[('Waste hauler', 'Waste hauler'), ('Landfill', 'Landfill'), ('Recycling facility', 'Recycling facility'), ('Transfer station', 'Transfer station'), ('Scrap yard', 'Scrap yard'), ('Retailer', 'Retailer'), ('Scrapper', 'Scrapper'), ('Equipment manufacturer', 'Equipment manufacturer'), ('Reseller', 'Reseller'), ('Community drop spot', 'Community drop spot'), ('Site services', 'Site services'), ('Equipment rentals', 'Equipment rentals')], blank=True, null=True)
    seller_type_display = models.CharField(max_length=255, verbose_name='Seller Type (Display)', choices=[('Landfill', 'Landfill'), ('MRF', 'MRF'), ('Industrial', 'Industrial'), ('Scrap yard', 'Scrap yard'), ('Compost facility', 'Compost facility'), ('Processor', 'Processor'), ('Paint recycler', 'Paint recycler'), ('Tires', 'Tires'), ('Other recycler', 'Other recycler'), ('Roll-off', 'Roll-off'), ('Mover', 'Mover'), ('Junk', 'Junk'), ('Delivery', 'Delivery'), ('Broker', 'Broker'), ('Equipment', 'Equipment')], blank=True, null=True)
    seller_location_type = models.CharField(max_length=255, verbose_name='Seller Location Type', choices=[('Services', 'Services'), ('Disposal site', 'Disposal site')], blank=True, null=True)
    seller_status = models.CharField(max_length=255, verbose_name='Seller Status', choices=[('Inactive', 'Inactive'), ('Inactive - Onboarding', 'Inactive - Onboarding'), ('Inactive - Pending approval', 'Inactive - Pending approval'), ('Active - under review', 'Active - under review'), ('Active', 'Active')], blank=True, null=True)
    stripe_connect_id = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Stripe Connect ID', blank=True, null=True)
    stripe_customer_id = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Stripe Customer ID', blank=True, null=True)
    seller_marketplace_display_name = models.CharField(max_length=20, verbose_name='Seller Marketplace Display Name', blank=True, null=True)
    seller_open_days = models.CharField(max_length=4099, verbose_name='Seller Open Day(s)', choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], blank=True, null=True)
    seller_open_time = models.TimeField(verbose_name='Seller Open Time', blank=True, null=True)
    seller_close_time = models.TimeField(verbose_name='Seller Close Time', blank=True, null=True)
    seller_lead_time_hrs = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Seller Lead Time (hrs)', blank=True, null=True)
    book_online_available = models.BooleanField(verbose_name='Book Online Available', default=False)
    announcement = models.TextField(blank=True, null=True)
    live_menu_is_active = models.BooleanField(verbose_name='Live Menu Is Active', default=False)
    seller_location_logo_url = models.URLField(verbose_name='Seller Location Logo URL', blank=True, null=True)
    downstream_insurance_requirements_met = models.BooleanField(verbose_name='Downstream Insurance Requirements Met', default=False)
    seller_badge = models.CharField(max_length=255, verbose_name='Seller Badge', choices=[('New', 'New'), ('Pro', 'Pro'), ('Platinum', 'Platinum')], blank=True, null=True)
    average_rating = models.DecimalField(max_digits=2, decimal_places=1, verbose_name='Average Rating', blank=True, null=True)
    tire_recycler_cert_registration_id_co = models.CharField(max_length=100, verbose_name='Tire Recycler Cert Registration ID - CO', blank=True, null=True)
    composting_classification = models.CharField(max_length=100, verbose_name='Composting Classification', blank=True, null=True)
    max_paint_gallons_accepted = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Max paint gallons accepted', blank=True, null=True)
    recycling_disposal_classification = models.CharField(max_length=100, verbose_name='Recycling Disposal Classification', blank=True, null=True)

class Contact(BaseModel):
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_masterrecord_set', verbose_name='Master Record ID', blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='contact_account_set', verbose_name='Account ID', blank=True, null=True)  # Master Detail Relationship *
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, blank=True, null=True)
    suffix = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name')
    mailing_street = models.TextField(blank=True, null=True)
    mailing_city = models.CharField(max_length=40, blank=True, null=True)
    mailing_state = models.CharField(max_length=80, verbose_name='Mailing State/Province', blank=True, null=True)
    mailing_postal_code = models.CharField(max_length=20, verbose_name='Mailing Zip/Postal Code', blank=True, null=True)
    mailing_country = models.CharField(max_length=80, blank=True, null=True)
    mailing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    mailing_address = models.TextField(blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Business Phone', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Business Fax', blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, blank=True, null=True)
    reports_to = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_reportsto_set', verbose_name='Reports To ID', blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    title = models.CharField(max_length=128, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    last_activity_date = models.DateField(verbose_name='Last Activity', blank=True, null=True)
    last_curequest_date = models.DateTimeField(verbose_name='Last Stay-in-Touch Request Date', blank=True, null=True)
    last_cuupdate_date = models.DateTimeField(verbose_name='Last Stay-in-Touch Save Date', blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, blank=True, null=True)
    email_bounced_date = models.DateTimeField(blank=True, null=True)
    is_email_bounced = models.BooleanField(default=False)
    photo_url = models.URLField(verbose_name='Photo URL', blank=True, null=True)
    is_user = models.BooleanField(verbose_name='Is User', default=False)
    property = models.ForeignKey(Account, models.DO_NOTHING, related_name='contact_property_set', blank=True, null=True)
    user_id = models.CharField(max_length=255, verbose_name='User ID', blank=True, null=True)

class AccountContactRelation(BaseModel):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, verbose_name='Contact ID')  # Master Detail Relationship *
    roles = models.CharField(max_length=4099, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_direct = models.BooleanField(verbose_name='Direct', default=False)
    is_active = models.BooleanField(verbose_name='Active', default=False)
    start_date = models.DateField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    relationship_strength = models.CharField(max_length=255, verbose_name='Relationship Strength', choices=[('Strong', 'Strong'), ('Neutral', 'Neutral'), ('Weak', 'Weak')], blank=True, null=True)

class AddOnChoice(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Add On Choice Name', blank=True, null=True)
    add_on = models.ForeignKey('AddOn', models.DO_NOTHING, verbose_name='Add On', blank=True, null=True)
    display_name = models.CharField(max_length=255, verbose_name='Display Name', blank=True, null=True)

class AddOn(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Add On Name', blank=True, null=True)
    display_name = models.CharField(max_length=255, verbose_name='Display Name', blank=True, null=True)
    sort = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)

class LocationZone(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Location Zone Name', blank=True, null=True)
    
class MainProductAddOn(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Main Product Add On Name', blank=True, null=True)
    main_product = models.ForeignKey('MainProduct', models.DO_NOTHING, verbose_name='Main Product', blank=True, null=True)
    add_on = models.ForeignKey(AddOn, models.DO_NOTHING, verbose_name='Add On', blank=True, null=True)

class MainProductCategory(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Main Product Category Name', blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    image = models.TextField(blank=True, null=True)
    icon = models.TextField(blank=True, null=True)
    sort = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    display_name = models.CharField(max_length=255, verbose_name='Display Name', blank=True, null=True)

class MainProductCategoryInfo(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Product Category Name', blank=True, null=True)
    product_category = models.ForeignKey(MainProductCategory, models.DO_NOTHING, verbose_name='Product Category', blank=True, null=True)

class MainProductInfo(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Main Product Name', blank=True, null=True)
    main_product = models.ForeignKey('MainProduct', models.DO_NOTHING, verbose_name='Main Product', blank=True, null=True)

class MainProduct(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Main Products Name', blank=True, null=True)
    cubic_yards = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Cubic Yards', blank=True, null=True)
    ar_url = models.URLField(verbose_name='AR Url', blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    image_del = models.TextField(verbose_name='Image', blank=True, null=True)
    product_category = models.ForeignKey(MainProductCategory, models.DO_NOTHING, verbose_name='Product Category', blank=True, null=True)
    sort = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    included_tonnage_quantity = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Included Tonnage Quantity', blank=True, null=True)
    price_per_additional_ton = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Price Per Additional Ton', blank=True, null=True)
    max_tonnage_quantity = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Max Tonnage Quantity', blank=True, null=True)
    max_rate = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Max Rate Quantity', blank=True, null=True)
    included_rate_quantity = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Included Rate Quantity', blank=True, null=True)

class MainProductWasteType(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Main Product Waste Type Name', blank=True, null=True)
    waste_type = models.ForeignKey('WasteType', models.DO_NOTHING, verbose_name='Waste Type', blank=True, null=True)
    main_product = models.ForeignKey('MainProduct', models.DO_NOTHING, verbose_name='Main Product', blank=True, null=True)

class PostalCode(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Postal Code Name', blank=True, null=True)
    location_zone = models.ForeignKey(LocationZone, models.DO_NOTHING, verbose_name='Location Zone', blank=True, null=True)
    state = models.CharField(max_length=255, blank=True, null=True)
    state_abbreviation = models.CharField(max_length=255, verbose_name='State Abbreviation', blank=True, null=True)
    county = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)

class Pricebook(BaseModel):
    name = models.CharField(max_length=255, verbose_name='Price Book Name')
    is_active = models.BooleanField(verbose_name='Active', default=False)
    is_archived = models.BooleanField(verbose_name='Archived', default=False)
    description = models.CharField(max_length=255, blank=True, null=True)
    is_standard = models.BooleanField(verbose_name='Is Standard Price Book', default=False)

class Product(BaseModel):
    name = models.CharField(max_length=255, verbose_name='Product Name')
    product_code = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(verbose_name='Product Description', blank=True, null=True)
    quantity_schedule_type = models.CharField(max_length=40, choices=[('Divide', 'Divide Amount into multiple installments'), ('Repeat', 'Repeat Amount for each installment')], blank=True, null=True)
    quantity_installment_period = models.CharField(max_length=40, choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], blank=True, null=True)
    number_of_quantity_installments = models.IntegerField(blank=True, null=True)
    revenue_schedule_type = models.CharField(max_length=40, choices=[('Divide', 'Divide Amount into multiple installments'), ('Repeat', 'Repeat Amount for each installment')], blank=True, null=True)
    revenue_installment_period = models.CharField(max_length=40, choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], blank=True, null=True)
    number_of_revenue_installments = models.IntegerField(blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=False)
    family = models.CharField(max_length=255, verbose_name='Product Family', choices=[('Junk', 'Junk'), ('Business Dumpster', 'Business Dumpster'), ('Large Dumpster', 'Large Dumpster'), ('Apartment Services', 'Apartment Services'), ('Dispatch - SaaS', 'Dispatch - SaaS'), ('Site_Services', 'Site Services')], blank=True, null=True)
    external_id = models.CharField(max_length=255, verbose_name='External ID', blank=True, null=True)
    display_url = models.URLField(verbose_name='Display URL', blank=True, null=True)
    quantity_unit_of_measure = models.CharField(max_length=255, choices=[('Each', 'Each')], blank=True, null=True)
    is_archived = models.BooleanField(verbose_name='Archived', default=False)
    stock_keeping_unit = models.CharField(max_length=180, verbose_name='Product SKU', blank=True, null=True)
    city = models.CharField(max_length=255, choices=[('Denver', 'Denver')], blank=True, null=True)
    status = models.CharField(max_length=255, default='Incomplete', choices=[('Incomplete', 'Incomplete'), ('Ready for Review', 'Ready for Review'), ('Under Review', 'Under Review'), ('Rejected', 'Rejected'), ('Approved', 'Approved')], blank=True, null=True)
    product_type = models.CharField(max_length=255, verbose_name='Product Type', choices=[('Service', 'Service'), ('Drop off', 'Drop off')], blank=True, null=True)
    main_product = models.ForeignKey(MainProduct, models.DO_NOTHING, verbose_name='Main Product', blank=True, null=True)

class PricebookEntry(BaseModel):
    name = models.CharField(max_length=255, verbose_name='Product Name', blank=True, null=True)
    pricebook = models.ForeignKey(Pricebook, models.DO_NOTHING, verbose_name='Price Book ID')  # Master Detail Relationship *
    product = models.ForeignKey(Product, models.DO_NOTHING, verbose_name='Product ID')  # Master Detail Relationship *
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='List Price')
    is_active = models.BooleanField(verbose_name='Active', default=False)
    use_standard_price = models.BooleanField(default=False)
    product_code = models.CharField(max_length=255, blank=True, null=True)
    is_archived = models.BooleanField(verbose_name='Archived', default=False)
    
class Opportunity(BaseModel):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='opportunity_account_set', verbose_name='Account ID', blank=True, null=True)  # Master Detail Relationship *
    name = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    stage_name = models.CharField(max_length=255, verbose_name='Stage', choices=[('Demo Scheduled', 'Demo Scheduled'), ('Demo Performed', 'Demo Performed'), ('Account Configuration', 'Account Configuration'), ('Order Acceptance', 'Order Acceptance'), ('Platform Engagement', 'Platform Engagement'), ('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Proposal', 'Proposal'), ('Negotiation', 'Negotiation'), ('Verify Hauler', 'Verify Hauler'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost')])
    amount = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    probability = models.DecimalField(max_digits=3, decimal_places=0, verbose_name='Probability (%)', blank=True, null=True)
    close_date = models.DateField(db_column='CloseDate')
    type = models.CharField(max_length=255, verbose_name='Opportunity Type', choices=[('Existing Business', 'Existing Business'), ('New Business', 'New Business')], blank=True, null=True)
    next_step = models.CharField(max_length=255, blank=True, null=True)
    lead_source = models.CharField(max_length=255, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', default=False)
    is_won = models.BooleanField(verbose_name='Won', default=False)
    forecast_category = models.CharField(max_length=40, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('MostLikely', 'Most Likely'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(max_length=255, verbose_name='Forecast Category', choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    has_opportunity_line_item = models.BooleanField(verbose_name='Has Line Item', default=False)
    pricebook = models.ForeignKey(Pricebook, models.DO_NOTHING, verbose_name='Price Book ID', blank=True, null=True)
    last_activity_date = models.DateField(verbose_name='Last Activity', blank=True, null=True)
    push_count = models.IntegerField(blank=True, null=True)
    last_stage_change_date = models.DateTimeField(blank=True, null=True)
    fiscal_quarter = models.IntegerField(blank=True, null=True)
    fiscal_year = models.IntegerField(blank=True, null=True)
    fiscal = models.CharField(max_length=6, verbose_name='Fiscal Period', blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, verbose_name='Contact ID', blank=True, null=True)
    has_open_activity = models.BooleanField(default=False)
    has_overdue_task = models.BooleanField(default=False)
    budget_confirmed = models.BooleanField(verbose_name='Budget Confirmed', default=False)
    discovery_completed = models.BooleanField(verbose_name='Discovery Completed', default=False)
    roi_analysis_completed = models.BooleanField(verbose_name='ROI Analysis Completed', default=False)
    dhruvsoft_is_converted1 = models.BooleanField(verbose_name='IsConverted', default=False) 
    loss_reason = models.CharField(max_length=255, verbose_name='Loss Reason', choices=[('Lost to Competitor', 'Lost to Competitor'), ('No Budget / Lost Funding', 'No Budget / Lost Funding'), ('No Decision / Non-Responsive', 'No Decision / Non-Responsive'), ('Price', 'Price'), ('Other', 'Other')], blank=True, null=True)
    dhruvsoft_order_number = models.CharField(max_length=8, verbose_name='Order Number(Deprecated)', blank=True, null=True) 
    time_slot = models.CharField(max_length=255, verbose_name='Time Slot', choices=[('4am-8am', '4am-8am'), ('8am-12pm', '8am-12pm'), ('12pm-4pm', '12pm-4pm'), ('4pm-8pm', '4pm-8pm'), ('8pm-12am', '8pm-12am')], blank=True, null=True)
    schedule_date = models.DateField(verbose_name='Schedule Date', blank=True, null=True)
    additional_schedule_details = models.TextField(verbose_name='Additional Schedule Details', blank=True, null=True)
    access_details = models.TextField(verbose_name='Access Details', blank=True, null=True)
    active_camp_active_campaign_sync_status = models.CharField(max_length=255, verbose_name='ActiveCampaign Sync Status', choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Does Not Meet Sync Criteria', 'Does Not Meet Sync Criteria')], blank=True, null=True) 
    active_camp_last_synced = models.DateTimeField(verbose_name='ActiveCampaign Last Synced', blank=True, null=True) 
    pandadoc_tracking_number = models.CharField(max_length=12, verbose_name='Tracking Number', blank=True, null=True) 
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    service_provider = models.ForeignKey(Account, models.DO_NOTHING, related_name='opportunity_serviceprovider_set', verbose_name='Service Provider', blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start DateTime', blank=True, null=True)
    end_date_time = models.DateTimeField(verbose_name='End DateTime', blank=True, null=True)
    main_product = models.ForeignKey(MainProduct, models.DO_NOTHING, verbose_name='Main Product', blank=True, null=True)
    marketplace_is_active = models.BooleanField(verbose_name='Marketplace is active', default=False)
    dispatch_is_active = models.BooleanField(verbose_name='Dispatch is active', default=False)
    scrapper_is_active = models.BooleanField(verbose_name='Scrapper is active', default=False)

class Order(BaseModel):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='order_account_set', verbose_name='Account ID', blank=True, null=True)  # Master Detail Relationship *
    pricebook = models.ForeignKey(Pricebook, models.DO_NOTHING, verbose_name='Price Book ID', blank=True, null=True)
    original_order = models.ForeignKey('self', models.DO_NOTHING, verbose_name='Order ID', blank=True, null=True)
    effective_date = models.DateField(verbose_name='Order Start Date')
    end_date = models.DateField(verbose_name='Order End Date', blank=True, null=True)
    is_reduction_order = models.BooleanField(verbose_name='Reduction Order', default=False)
    status = models.CharField(max_length=100, choices=[('Scheduled', 'Scheduled'), ('Pending_Acceptance', 'Pending Acceptance'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('On the way', 'On the way'), ('Arrived', 'Arrived'), ('Price Changed', 'Price Changed'), ('Price Approved', 'Price Approved'), ('Complete', 'Complete'), ('Invoiced', 'Invoiced'), ('Paid_To_Hauler', 'Paid To Hauler'), ('Paid_By_Customer', 'Paid By Customer')])
    description = models.TextField(blank=True, null=True)
    customer_authorized_by = models.ForeignKey(Contact, models.DO_NOTHING, verbose_name='Customer Authorized By ID', blank=True, null=True)
    type = models.CharField(max_length=255, verbose_name='Order Type', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(blank=True, null=True)  # This field type is a guess.
    activated_date = models.DateTimeField(blank=True, null=True)
    status_code = models.CharField(max_length=40, verbose_name='Status Category', choices=[('Draft', 'Draft'), ('Activated', 'Activated'), ('Canceled', 'Cancelled'), ('Expired', 'Expired')])
    order_number = models.CharField(max_length=30)
    total_amount = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Order Amount')
    hauler_payout = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Hauler Payout', blank=True, null=True)
    scheduled_date = models.DateField(verbose_name='Scheduled Date', blank=True, null=True)
    additional_schedule_details = models.TextField(verbose_name='Additional Schedule Details', blank=True, null=True)
    access_schedule_details = models.TextField(verbose_name='Access Schedule Details', blank=True, null=True)
    scheduled_time_slot = models.CharField(max_length=255, verbose_name='Scheduled Time Slot', choices=[('4am-8am', '4am-8am'), ('8am-12pm', '8am-12pm'), ('12pm-4pm', '12pm-4pm'), ('4pm-8pm', '4pm-8pm'), ('8pm-12am', '8pm-12am')], blank=True, null=True)
    scrap_task_id = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Scrap Task ID', blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start DateTime', blank=True, null=True)
    end_date_time = models.DateTimeField(verbose_name='End DateTime', blank=True, null=True)
    service_provider = models.ForeignKey(Account, models.DO_NOTHING, related_name='order_serviceprovider_set', verbose_name='Service Provider', blank=True, null=True)

class ProductAddOnChoice(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Product Add On Choice Name', blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    add_on_choice = models.ForeignKey(AddOnChoice, models.DO_NOTHING, verbose_name='Add On Choice', blank=True, null=True)

class SellerProductLocationZone(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Seller Product Location Zone Name', blank=True, null=True)
    seller_product = models.ForeignKey('SellerProduct', models.DO_NOTHING, verbose_name='Seller Product', blank=True, null=True)
    location_zone = models.ForeignKey(LocationZone, models.DO_NOTHING, verbose_name='Location Zone', blank=True, null=True)
    delivery_fee = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Delivery Fee', blank=True, null=True)
    pickup_fee = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Pickup Fee', blank=True, null=True)

class SellerProduct(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Seller Product Name', blank=True, null=True)
    product = models.ForeignKey(Product, models.DO_NOTHING, blank=True, null=True)
    rate = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    service_provider = models.ForeignKey(Account, models.DO_NOTHING, verbose_name='Service Provider', blank=True, null=True)

class WasteType(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Waste Type Name', blank=True, null=True)

class DisposalFee(BaseModel):
    name = models.CharField(max_length=80, verbose_name='Disposal Fee Name', blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)
    waste_type = models.ForeignKey(WasteType, models.DO_NOTHING, verbose_name='Waste Type', blank=True, null=True)
    location_zone = models.ForeignKey(LocationZone, models.DO_NOTHING, verbose_name='Location Zone', blank=True, null=True)
    price = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
 
