# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from salesforce import models


class AcceptedEventRelation(models.Model):
    relation = models.ForeignKey('Calendar', models.DO_NOTHING, db_column='RelationId', verbose_name='Relation ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Contact, Lead, User]
    event = models.ForeignKey('Event', models.DO_NOTHING, db_column='EventId', verbose_name='Event ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey('Account', models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(db_column='RespondedDate', verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='acceptedeventrelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='acceptedeventrelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(db_column='Type', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AcceptedEventRelation'
        verbose_name = 'Accepted Event Relation'
        verbose_name_plural = 'Accepted Event Relations'
        # keyPrefix = None



class Account(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, db_column='MasterRecordId', related_name='account_masterrecord_set', verbose_name='Master Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Account Name')
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Account Type', choices=[('Analyst', 'Analyst'), ('Competitor', 'Competitor'), ('Customer', 'Customer'), ('Integrator', 'Integrator'), ('Investor', 'Investor'), ('Partner', 'Partner'), ('Press', 'Press'), ('Prospect', 'Prospect'), ('Reseller', 'Reseller'), ('Other', 'Other')], blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', related_name='account_parent_set', verbose_name='Parent Account ID', blank=True, null=True)
    billing_street = models.TextField(db_column='BillingStreet', blank=True, null=True)
    billing_city = models.CharField(db_column='BillingCity', max_length=40, blank=True, null=True)
    billing_state = models.CharField(db_column='BillingState', max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(db_column='BillingPostalCode', max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(db_column='BillingCountry', max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(db_column='BillingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(db_column='BillingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(db_column='BillingGeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(db_column='BillingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(db_column='ShippingStreet', blank=True, null=True)
    shipping_city = models.CharField(db_column='ShippingCity', max_length=40, blank=True, null=True)
    shipping_state = models.CharField(db_column='ShippingState', max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(db_column='ShippingPostalCode', max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(db_column='ShippingCountry', max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(db_column='ShippingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(db_column='ShippingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(db_column='ShippingGeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(db_column='ShippingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Account Phone', blank=True, null=True)
    fax = models.CharField(db_column='Fax', max_length=40, verbose_name='Account Fax', blank=True, null=True)
    website = models.URLField(db_column='Website', blank=True, null=True)
    photo_url = models.URLField(db_column='PhotoUrl', verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(db_column='Industry', max_length=255, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Waste management', 'Waste management'), ('Property management', 'Property management')], blank=True, null=True)
    number_of_employees = models.IntegerField(db_column='NumberOfEmployees', verbose_name='Employees', blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Account Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='account_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='account_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='account_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(db_column='Jigsaw', max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_company_id = models.CharField(db_column='JigsawCompanyId', max_length=20, verbose_name='Jigsaw Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account_source = models.CharField(db_column='AccountSource', max_length=255, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], blank=True, null=True)
    sic_desc = models.CharField(db_column='SicDesc', max_length=80, verbose_name='SIC Description', blank=True, null=True)
    merchant_type = models.CharField(db_column='Merchant_Type__c', max_length=255, verbose_name='Merchant Type', choices=[('Waste hauler', 'Waste hauler'), ('Landfill', 'Landfill'), ('Recycling facility', 'Recycling facility'), ('Transfer station', 'Transfer station'), ('Scrap yard', 'Scrap yard'), ('Retailer', 'Retailer'), ('Scrapper', 'Scrapper'), ('Equipment manufacturer', 'Equipment manufacturer'), ('Reseller', 'Reseller'), ('Community drop spot', 'Community drop spot')], blank=True, null=True)
    number_of_units = models.DecimalField(db_column='Number_of_units__c', max_digits=18, decimal_places=0, verbose_name='Number of units', blank=True, null=True)
    number_of_properties = models.DecimalField(db_column='Number_of_Properties__c', max_digits=18, decimal_places=0, verbose_name='Number of Properties', blank=True, null=True)
    aln_id = models.DecimalField(db_column='ALN_ID__c', max_digits=18, decimal_places=0, verbose_name='ALN ID', blank=True, null=True)
    builders = models.ForeignKey('self', models.DO_NOTHING, db_column='Builders__c', related_name='account_builders_set', blank=True, null=True)
    ncr_status = models.CharField(db_column='NCR_Status__c', max_length=255, verbose_name='NCR Status', choices=[('Construction/Lease-Up', 'Construction/Lease-Up'), ('Lease-Up', 'Lease-Up'), ('On hold', 'On hold'), ('Planned', 'Planned'), ('Under Construction', 'Under Construction'), ('Under research', 'Under research')], blank=True, null=True)
    construction_start_date = models.DateField(db_column='Construction_Start_Date__c', verbose_name='Construction Start Date', blank=True, null=True)
    lease_start_date = models.DateField(db_column='Lease_Start_Date__c', verbose_name='Lease Start Date', blank=True, null=True)
    occupancy_date = models.DateField(db_column='Occupancy_Date__c', verbose_name='Occupancy Date', blank=True, null=True)
    completion_date = models.DateField(db_column='Completion_Date__c', verbose_name='Completion Date', blank=True, null=True)
    occupancy_rate = models.DecimalField(db_column='Occupancy_Rate__c', max_digits=18, decimal_places=0, verbose_name='Occupancy Rate', blank=True, null=True)
    year_built_renovated = models.CharField(db_column='Year_Built_Renovated__c', max_length=255, verbose_name='Year Built/Renovated', blank=True, null=True)
    software_used = models.CharField(db_column='Software_Used__c', max_length=255, verbose_name='Software Used', blank=True, null=True)
    property_type = models.CharField(db_column='Property_Type__c', max_length=255, verbose_name='Property Type', choices=[('Single Family HOA', 'Single Family HOA'), ('Townhome', 'Townhome'), ('Garden', 'Garden'), ('Mid-Rise', 'Mid-Rise'), ('High-Rise', 'High-Rise'), ('Build-For-Rent', 'Build-For-Rent')], blank=True, null=True)
    number_of_floors = models.DecimalField(db_column='Number_of_floors__c', max_digits=18, decimal_places=0, verbose_name='Number of floors', blank=True, null=True)
    number_of_buildings = models.DecimalField(db_column='Number_of_buildings__c', max_digits=18, decimal_places=0, verbose_name='Number of buildings', blank=True, null=True)
    affordable_housing = models.BooleanField(db_column='Affordable_Housing__c', verbose_name='Affordable Housing', default=False)
    senior_living = models.BooleanField(db_column='Senior_Living__c', verbose_name='Senior Living', default=False)
    section_8 = models.BooleanField(db_column='Section_8__c', verbose_name='Section 8', default=False)
    student_housing = models.BooleanField(db_column='Student_Housing__c', verbose_name='Student Housing', default=False)
    has_valet_trash = models.BooleanField(db_column='Has_Valet_Trash__c', verbose_name='Has Valet Trash', default=False)
    has_recycling = models.BooleanField(db_column='Has_recycling__c', verbose_name='Has recycling', default=False)
    average_rent = models.DecimalField(db_column='Average_Rent__c', max_digits=18, decimal_places=0, verbose_name='Average Rent', blank=True, null=True)
    rent_sq_ft = models.DecimalField(db_column='Rent_Sq_Ft__c', max_digits=18, decimal_places=0, verbose_name='Rent/Sq Ft.', blank=True, null=True)
    average_unit_size = models.DecimalField(db_column='Average_Unit_Size__c', max_digits=18, decimal_places=0, verbose_name='Average Unit Size', blank=True, null=True)
    has_elevators = models.BooleanField(db_column='Has_elevators__c', verbose_name='Has Elevators', default=False)
    construction_notes = models.TextField(db_column='Construction_Notes__c', verbose_name='Construction Notes', blank=True, null=True)
    property_ownership = models.CharField(db_column='Property_Ownership__c', max_length=255, verbose_name='Property Ownership', blank=True, null=True)
    merchant_email = models.EmailField(db_column='Merchant_Email__c', verbose_name='Merchant Email', blank=True, null=True)
    active_camp_active_campaign_id = models.CharField(db_column='ActiveCamp__ActiveCampaign_Id__c', unique=True, max_length=255, verbose_name='ActiveCampaign Id', blank=True, null=True) 
    active_camp_active_campaign_sync_status = models.CharField(db_column='ActiveCamp__ActiveCampaign_Sync_Status__c', max_length=255, verbose_name='ActiveCampaign Sync Status', choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Does Not Meet Sync Criteria', 'Does Not Meet Sync Criteria'), ('Waiting For Update', 'Waiting For Update'), ('Account Deleted in ActiveCampaign', 'Account Deleted in ActiveCampaign')], blank=True, null=True) 
    active_camp_last_synced = models.DateTimeField(db_column='ActiveCamp__Last_Synced__c', verbose_name='ActiveCampaign Last Synced', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Account'
        verbose_name = 'Account'
        verbose_name_plural = 'Accounts'
        # keyPrefix = '001'



class AccountContactRelation(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    roles = models.CharField(db_column='Roles', max_length=4099, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_direct = models.BooleanField(db_column='IsDirect', verbose_name='Direct', sf_read_only=models.READ_ONLY, default=False)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    start_date = models.DateField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='accountcontactrelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='accountcontactrelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    relationship_strength = models.CharField(db_column='Relationship_Strength__c', max_length=255, verbose_name='Relationship Strength', choices=[('Strong', 'Strong'), ('Neutral', 'Neutral'), ('Weak', 'Weak')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountContactRelation'
        verbose_name = 'Account Contact Relationship'
        verbose_name_plural = 'Account Contact Relationships'
        # keyPrefix = '07k'



class AccountContactRole(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='accountcontactrole_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='accountcontactrole_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID')  # Master Detail Relationship *
    role = models.CharField(db_column='Role', max_length=40, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', default=False)
    class Meta(models.Model.Meta):
        db_table = 'AccountContactRole'
        verbose_name = 'Account Contact Role'
        verbose_name_plural = 'Account Contact Roles'
        # keyPrefix = '02Z'



class AccountFeed(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='accountfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='accountfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountFeed'
        verbose_name = 'Account Feed'
        verbose_name_plural = 'Account Feed'
        # keyPrefix = None



class AccountHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('accountMerged', 'Account Merged'), ('Name', 'Account Name'), ('TextName', 'Account Name'), ('AccountNumber', 'Account Number'), ('Owner', 'Account Owner'), ('Site', 'Account Site'), ('AccountSource', 'Account Source'), ('ActiveCamp__ActiveCampaign_Id__c', 'ActiveCampaign Id'), ('ActiveCamp__Last_Synced__c', 'ActiveCampaign Last Synced'), ('ActiveCamp__ActiveCampaign_Sync_Status__c', 'ActiveCampaign Sync Status'), ('Affordable_Housing__c', 'Affordable Housing'), ('ALN_ID__c', 'ALN ID'), ('AnnualRevenue', 'Annual Revenue'), ('Average_Rent__c', 'Average Rent'), ('Average_Unit_Size__c', 'Average Unit Size'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('Builders__c', 'Builders'), ('Completion_Date__c', 'Completion Date'), ('Construction_Notes__c', 'Construction Notes'), ('Construction_Start_Date__c', 'Construction Start Date'), ('created', 'Created.'), ('accountCreatedFromLead', 'Created by lead convert'), ('Jigsaw', 'Data.com Key'), ('Description', 'Description'), ('NumberOfEmployees', 'Employees'), ('Fax', 'Fax'), ('feedEvent', 'Feed event'), ('Has_elevators__c', 'Has Elevators'), ('Has_recycling__c', 'Has recycling'), ('Has_Valet_Trash__c', 'Has Valet Trash'), ('individualMerged', 'Individual Merged'), ('Industry', 'Industry'), ('accountUpdatedByLead', 'Lead converted to Account'), ('personAccountUpdatedByLead', 'Lead converted to Person Account'), ('Lease_Start_Date__c', 'Lease Start Date'), ('Merchant_Email__c', 'Merchant Email'), ('Merchant_Type__c', 'Merchant Type'), ('NCR_Status__c', 'NCR Status'), ('Number_of_buildings__c', 'Number of buildings'), ('Number_of_floors__c', 'Number of floors'), ('Number_of_Properties__c', 'Number of Properties'), ('Number_of_units__c', 'Number of units'), ('Occupancy_Date__c', 'Occupancy Date'), ('Occupancy_Rate__c', 'Occupancy Rate'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Ownership', 'Ownership'), ('Parent', 'Parent Account'), ('Phone', 'Phone'), ('Property_Ownership__c', 'Property Ownership'), ('Property_Type__c', 'Property Type'), ('Rating', 'Rating'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Rent_Sq_Ft__c', 'Rent/Sq Ft.'), ('Section_8__c', 'Section 8'), ('Senior_Living__c', 'Senior Living'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('Sic', 'SIC Code'), ('SicDesc', 'SIC Description'), ('Software_Used__c', 'Software Used'), ('Student_Housing__c', 'Student Housing'), ('TickerSymbol', 'Ticker Symbol'), ('Type', 'Type'), ('Website', 'Website'), ('Year_Built_Renovated__c', 'Year Built/Renovated')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountHistory'
        verbose_name = 'Account History'
        verbose_name_plural = 'Account History'
        # keyPrefix = None



class AccountPartner(models.Model):
    account_from = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountFromId', related_name='accountpartner_accountfrom_set', verbose_name='Account ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountToId', related_name='accountpartner_accountto_set', verbose_name='Account ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    role = models.CharField(db_column='Role', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('Advertiser', 'Advertiser'), ('Agency', 'Agency'), ('Broker', 'Broker'), ('Consultant', 'Consultant'), ('Dealer', 'Dealer'), ('Developer', 'Developer'), ('Distributor', 'Distributor'), ('Institution', 'Institution'), ('Lender', 'Lender'), ('System Integrator', 'System Integrator'), ('VAR/Reseller', 'VAR/Reseller')], blank=True, null=True)
    is_primary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='accountpartner_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='accountpartner_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, db_column='ReversePartnerId', verbose_name='Reverse Partner ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountPartner'
        verbose_name = 'Account Partner'
        verbose_name_plural = 'Account Partner'
        # keyPrefix = '00I'



class AccountShare(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    account_access_level = models.CharField(db_column='AccountAccessLevel', max_length=40, verbose_name='Account Access', default=models.DEFAULTED_ON_CREATE, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    opportunity_access_level = models.CharField(db_column='OpportunityAccessLevel', max_length=40, verbose_name='Opportunity Access', default=models.DEFAULTED_ON_CREATE, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    case_access_level = models.CharField(db_column='CaseAccessLevel', max_length=40, verbose_name='Case Access', default=models.DEFAULTED_ON_CREATE, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    contact_access_level = models.CharField(db_column='ContactAccessLevel', max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AccountShare'
        verbose_name = 'Account Share'
        verbose_name_plural = 'Account Share'
        # keyPrefix = '00r'



class ActionLinkGroupTemplate(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Name')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='actionlinkgrouptemplate_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='actionlinkgrouptemplate_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    executions_allowed = models.CharField(db_column='ExecutionsAllowed', max_length=255, choices=[('Once', 'Once'), ('OncePerUser', 'Once per User'), ('Unlimited', 'Unlimited')])
    hours_until_expiration = models.IntegerField(db_column='HoursUntilExpiration', verbose_name='Hours until Expiration', blank=True, null=True)
    category = models.CharField(db_column='Category', max_length=255, choices=[('Primary', 'Primary action'), ('Overflow', 'Overflow action')])
    is_published = models.BooleanField(db_column='IsPublished', verbose_name='Published', default=False)
    class Meta(models.Model.Meta):
        db_table = 'ActionLinkGroupTemplate'
        verbose_name = 'Action Link Group Template'
        verbose_name_plural = 'Action Link Group Templates'
        # keyPrefix = '07g'



class ActionLinkTemplate(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='actionlinktemplate_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='actionlinktemplate_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    action_link_group_template = models.ForeignKey(ActionLinkGroupTemplate, models.DO_NOTHING, db_column='ActionLinkGroupTemplateId', verbose_name='Action Link Group Template ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    label_key = models.CharField(db_column='LabelKey', max_length=128)
    method = models.CharField(db_column='Method', max_length=255, verbose_name='HTTP Method', choices=[('HttpDelete', 'DELETE'), ('HttpHead', 'HEAD'), ('HttpGet', 'GET'), ('HttpPatch', 'PATCH'), ('HttpPost', 'POST'), ('HttpPut', 'PUT')])
    link_type = models.CharField(db_column='LinkType', max_length=255, verbose_name='Action Type', choices=[('API', 'API'), ('APIAsync', 'API Async'), ('Download', 'Download'), ('UI', 'UI')])
    position = models.IntegerField(db_column='Position')
    is_confirmation_required = models.BooleanField(db_column='IsConfirmationRequired', verbose_name='Confirmation Required', default=False)
    is_group_default = models.BooleanField(db_column='IsGroupDefault', verbose_name='Default Link in Group', default=False)
    user_visibility = models.CharField(db_column='UserVisibility', max_length=255, choices=[('Creator', 'Only creator can see'), ('Everyone', 'Everyone can see'), ('EveryoneButCreator', 'Everyone but creator can see'), ('Manager', "Only creator's manager can see"), ('CustomUser', 'Only custom user can see'), ('CustomExcludedUser', 'Everyone but custom user can see')])
    user_alias = models.CharField(db_column='UserAlias', max_length=128, verbose_name='Custom User Alias', blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=255, blank=True, null=True)
    action_url = models.TextField(db_column='ActionUrl', verbose_name='Action URL')
    request_body = models.TextField(db_column='RequestBody', verbose_name='HTTP Request Body', blank=True, null=True)
    headers = models.TextField(db_column='Headers', verbose_name='HTTP Headers', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActionLinkTemplate'
        verbose_name = 'Action Link Template'
        verbose_name_plural = 'Action Link Templates'
        # keyPrefix = '07l'



class ActiveCampCxaUsageShare(models.Model):
    parent = models.ForeignKey('ActiveCampCxaUsage', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ActiveCamp__CXA_Usage__Share'
        verbose_name = 'Share: CXA Usage'
        verbose_name_plural = 'Share: CXA Usage'
        # keyPrefix = None



class ActiveCampCxaUsage(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='CXA Usage Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='activecampcxausage_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='activecampcxausage_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    active_camp_enter_into_automation_usage_failure = models.DecimalField(db_column='ActiveCamp__Enter_Into_Automation_Usage_Failure__c', max_digits=18, decimal_places=0, verbose_name='Enter Into Automation Usage Failure', default=0, blank=True, null=True) 
    active_camp_enter_into_automation_usage = models.DecimalField(db_column='ActiveCamp__Enter_Into_Automation_Usage__c', max_digits=18, decimal_places=0, verbose_name='Enter Into Automation Usage', default=0, blank=True, null=True) 
    active_camp_one_time_email_usage_failure = models.DecimalField(db_column='ActiveCamp__One_Time_Email_Usage_Failure__c', max_digits=18, decimal_places=0, verbose_name='One Time Email Usage Failure', default=0, blank=True, null=True) 
    active_camp_one_time_email_usage = models.DecimalField(db_column='ActiveCamp__One_Time_Email_Usage__c', max_digits=18, decimal_places=0, verbose_name='One Time Email Usage', default=0, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'ActiveCamp__CXA_Usage__c'
        verbose_name = 'CXA Usage'
        verbose_name_plural = 'CXA Usages'
        # keyPrefix = 'a08'



class ActiveCampDashboardLogShare(models.Model):
    parent = models.ForeignKey('ActiveCampDashboardLog', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ActiveCamp__Dashboard_Log__Share'
        verbose_name = 'Share: Dashboard Log'
        verbose_name_plural = 'Share: Dashboard Log'
        # keyPrefix = None



class ActiveCampDashboardLog(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Dashboard Log Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='activecampdashboardlog_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='activecampdashboardlog_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    active_camp_error_log = models.ForeignKey('ActiveCampErrorLog', models.DO_NOTHING, db_column='ActiveCamp__Error_Log__c', related_name='activecampdashboardlog_activecamperrorlog_set', verbose_name='Error Log', blank=True, null=True) 
    active_camp_failed_records = models.DecimalField(db_column='ActiveCamp__Failed_Records__c', max_digits=18, decimal_places=0, verbose_name='Failed Records', default=0, blank=True, null=True) 
    active_camp_initiated_at_timestamp = models.DateTimeField(db_column='ActiveCamp__Initiated_At_Timestamp__c', verbose_name='Initiated At Timestamp', blank=True, null=True) 
    active_camp_object_type = models.CharField(db_column='ActiveCamp__Object_Type__c', max_length=255, verbose_name='Object Type', choices=[('Lead', 'Lead'), ('Contact', 'Contact')], blank=True, null=True) 
    active_camp_skipped_records = models.DecimalField(db_column='ActiveCamp__Skipped_Records__c', max_digits=18, decimal_places=0, verbose_name='Skipped Records', default=0, blank=True, null=True) 
    active_camp_successful_records = models.DecimalField(db_column='ActiveCamp__Successful_Records__c', max_digits=18, decimal_places=0, verbose_name='Successful Records', default=0, blank=True, null=True) 
    active_camp_sync_direction = models.CharField(db_column='ActiveCamp__Sync_Direction__c', max_length=255, verbose_name='Sync Direction', choices=[('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True) 
    active_camp_sync_status = models.CharField(db_column='ActiveCamp__Sync_Status__c', max_length=255, verbose_name='Sync Status', choices=[('Successful', 'Successful'), ('Failure', 'Failure'), ('Partial', 'Partial'), ('Started', 'Started')], blank=True, null=True) 
    active_camp_total_records_batched = models.DecimalField(db_column='ActiveCamp__Total_Records_Batched__c', max_digits=18, decimal_places=0, verbose_name='Total Records Batched', default=0, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'ActiveCamp__Dashboard_Log__c'
        verbose_name = 'Dashboard Log'
        verbose_name_plural = 'Dashboard Logs'
        # keyPrefix = 'a09'



class ActiveCampErrorLogShare(models.Model):
    parent = models.ForeignKey('ActiveCampErrorLog', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ActiveCamp__Error_Log__Share'
        verbose_name = 'Share: Error Log'
        verbose_name_plural = 'Share: Error Log'
        # keyPrefix = None



class ActiveCampErrorLog(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Error Log Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='activecamperrorlog_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='activecamperrorlog_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    active_camp_dashboard_log = models.ForeignKey(ActiveCampDashboardLog, models.DO_NOTHING, db_column='ActiveCamp__Dashboard_Log__c', related_name='activecamperrorlog_activecampdashboardlog_set', verbose_name='Dashboard Log', blank=True, null=True) 
    active_camp_dump = models.TextField(db_column='ActiveCamp__Dump__c', verbose_name='Dump', blank=True, null=True) 
    active_camp_error_record_id = models.CharField(db_column='ActiveCamp__Error_Record_Id__c', max_length=255, verbose_name='Error Record Id', blank=True, null=True) 
    active_camp_message = models.CharField(db_column='ActiveCamp__Message__c', max_length=255, verbose_name='Message', blank=True, null=True) 
    active_camp_type = models.CharField(db_column='ActiveCamp__Type__c', max_length=255, verbose_name='Type', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'ActiveCamp__Error_Log__c'
        verbose_name = 'Error Log'
        verbose_name_plural = 'Error Logs'
        # keyPrefix = 'a0A'



class ActiveCampSetupDataShare(models.Model):
    parent = models.ForeignKey('ActiveCampSetupData', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ActiveCamp__Setup_Data__Share'
        verbose_name = 'Share: Setup Data'
        verbose_name_plural = 'Share: Setup Data'
        # keyPrefix = None



class ActiveCampSetupData(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Setup Data Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='activecampsetupdata_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='activecampsetupdata_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    active_camp_account_mappings = models.TextField(db_column='ActiveCamp__Account_Mappings__c', verbose_name='Account Mappings', blank=True, null=True) 
    active_camp_connection_event_sent = models.BooleanField(db_column='ActiveCamp__Connection_Event_Sent__c', verbose_name='Connection Event Sent', default=False) 
    active_camp_contact_sync_criteria = models.TextField(db_column='ActiveCamp__Contact_Sync_Criteria__c', verbose_name='Contact Sync Criteria', blank=True, null=True) 
    active_camp_contact_sync_type = models.CharField(db_column='ActiveCamp__Contact_Sync_Type__c', max_length=255, verbose_name='Contact Sync Type', choices=[('None', 'None'), ('New', 'New'), ('Process Builder', 'Process Builder'), ('Criteria', 'Criteria')], blank=True, null=True) 
    active_camp_custom_contact_mapping = models.TextField(db_column='ActiveCamp__Custom_Contact_Mapping__c', verbose_name='Custom Contact Mapping', blank=True, null=True) 
    active_camp_custom_field_mapping_complete = models.BooleanField(db_column='ActiveCamp__Custom_Field_Mapping_Complete__c', verbose_name='Custom Field Mapping Complete', default=False) 
    active_camp_custom_field_mappings = models.TextField(db_column='ActiveCamp__Custom_Field_Mappings__c', verbose_name='Custom Field Mappings', blank=True, null=True) 
    active_camp_first_sync_event_sent = models.BooleanField(db_column='ActiveCamp__First_Sync_Event_Sent__c', verbose_name='First Sync Event Sent', default=False) 
    active_camp_full_account_mapping = models.TextField(db_column='ActiveCamp__Full_Account_Mapping__c', verbose_name='Full Account Mapping', blank=True, null=True) 
    active_camp_has_crm = models.BooleanField(db_column='ActiveCamp__Has_Crm__c', verbose_name='Has CRM', default=False) 
    active_camp_inbound_connector_step_completed = models.BooleanField(db_column='ActiveCamp__Inbound_Connector_Step_Completed__c', verbose_name='Inbound Connector Step Completed', default=False) 
    active_camp_info_step = models.BooleanField(db_column='ActiveCamp__Info_Step__c', verbose_name='Info Step', default=False) 
    active_camp_job_frequency = models.TextField(db_column='ActiveCamp__Job_Frequency__c', verbose_name='Job Frequency', blank=True, null=True) 
    active_camp_job_id = models.TextField(db_column='ActiveCamp__Job_Id__c', verbose_name='Job Id', blank=True, null=True) 
    active_camp_job_start_hour = models.TextField(db_column='ActiveCamp__Job_Start_Hour__c', verbose_name='Job Start Hour', blank=True, null=True) 
    active_camp_last_account_sync = models.CharField(db_column='ActiveCamp__Last_Account_Sync__c', max_length=30, verbose_name='Last Account Sync', default='1970-01-01T00:00:00-05:00', blank=True, null=True) 
    active_camp_lead_mappings = models.TextField(db_column='ActiveCamp__Lead_Mappings__c', verbose_name='Lead Mappings', blank=True, null=True) 
    active_camp_map_account = models.BooleanField(db_column='ActiveCamp__Map_Account__c', verbose_name='Map Account', default=False) 
    active_camp_map_custom_contact = models.BooleanField(db_column='ActiveCamp__Map_Custom_Contact__c', verbose_name='Map Custom Contact', default=False) 
    active_camp_map_custom_lead = models.BooleanField(db_column='ActiveCamp__Map_Custom_Lead__c', verbose_name='Map Custom Lead', default=False) 
    active_camp_map_standard_contact = models.BooleanField(db_column='ActiveCamp__Map_Standard_Contact__c', verbose_name='Map Standard Contact', default=False) 
    active_camp_map_standard_lead = models.BooleanField(db_column='ActiveCamp__Map_Standard_Lead__c', verbose_name='Map Standard Lead', default=False) 
    active_camp_opportunity_mapping = models.TextField(db_column='ActiveCamp__Opportunity_Mapping__c', verbose_name='Opportunity Mapping', blank=True, null=True) 
    active_camp_standard_contact_mapping = models.TextField(db_column='ActiveCamp__Standard_Contact_Mapping__c', verbose_name='Standard Contact Mapping', blank=True, null=True) 
    active_camp_sync_criteria = models.TextField(db_column='ActiveCamp__Sync_Criteria__c', verbose_name='Sync Criteria', blank=True, null=True) 
    active_camp_sync_opportunity = models.BooleanField(db_column='ActiveCamp__Sync_Opportunity__c', verbose_name='Sync Opportunity', default=False) 
    active_camp_sync_type = models.CharField(db_column='ActiveCamp__Sync_Type__c', max_length=255, verbose_name='Sync Type', choices=[('Process Builder', 'Process Builder'), ('New', 'New'), ('Criteria', 'Criteria'), ('None', 'None')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'ActiveCamp__Setup_Data__c'
        verbose_name = 'Setup Data'
        verbose_name_plural = 'Setup Data'
        # keyPrefix = 'a0B'



class ActiveFeatureLicenseMetric(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    feature_type = models.CharField(db_column='FeatureType', max_length=40, verbose_name='Primary Grain', sf_read_only=models.READ_ONLY, choices=[('MarketingUser', 'Marketing User'), ('OfflineUser', 'Offline User'), ('WirelessUser', 'Wireless User'), ('AvantgoUser', 'AvantGo User'), ('MobileUser', 'Apex Mobile User'), ('SFContentUser', 'Salesforce CRM Content User'), ('KnowledgeUser', 'Knowledge User'), ('InteractionUser', 'Flow User'), ('SupportUser', 'Service Cloud User'), ('JigsawProspectingUser', 'Data.com User'), ('LiveAgentUser', 'Chat User'), ('SiteforceContributorUser', 'Site.com Contributor User'), ('SiteforcePublisherUser', 'Site.com Publisher User'), ('ChatterAnswersUser', 'Chatter Answers User'), ('WorkDotComUserFeature', 'WDC User')])
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    assigned_user_count = models.IntegerField(db_column='AssignedUserCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    active_user_count = models.IntegerField(db_column='ActiveUserCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_license_count = models.IntegerField(db_column='TotalLicenseCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActiveFeatureLicenseMetric'
        verbose_name = 'Active Feature License Metric'
        verbose_name_plural = 'Active Feature License Metrics'
        # keyPrefix = '5H2'



class ActivePermSetLicenseMetric(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, db_column='PermissionSetLicenseId', verbose_name='Permission Set License ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    assigned_user_count = models.IntegerField(db_column='AssignedUserCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    active_user_count = models.IntegerField(db_column='ActiveUserCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActivePermSetLicenseMetric'
        verbose_name = 'Active Permission Set License Metric'
        verbose_name_plural = 'Active Permission Set License Metrics'
        # keyPrefix = '5H1'



class ActiveProfileMetric(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, db_column='UserLicenseId', verbose_name='User License ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    profile = models.ForeignKey('Profile', models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    assigned_user_count = models.IntegerField(db_column='AssignedUserCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    active_user_count = models.IntegerField(db_column='ActiveUserCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActiveProfileMetric'
        verbose_name = 'Active Profile Metric'
        verbose_name_plural = 'Active Profile Metrics'
        # keyPrefix = '5H0'



class ActivityHistory(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='activityhistory_account_set', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey('Contact', models.DO_NOTHING, db_column='WhoId', related_name='activityhistory_who_set', verbose_name='Name ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, db_column='WhatId', related_name='activityhistory_what_set', verbose_name='Related To ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, ChangeRequest, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Entitlement, Image, Incident, ListEmail, Opportunity, Order, Problem, ProcessException, Product2, Quote, ServiceContract, ServiceResource, Solution, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate] Master Detail Relationship *
    subject = models.CharField(db_column='Subject', max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter of Authorization'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(db_column='IsTask', verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(db_column='ActivityDate', verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_date_time = models.DateTimeField(db_column='ActivityDateTime', verbose_name='Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('Calendar', models.DO_NOTHING, db_column='OwnerId', verbose_name='Assigned To ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Group, User]
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, default='Open', choices=[('Open', 'Open'), ('Completed', 'Completed'), ('Not Started', 'Not Started')], blank=True, null=True)
    priority = models.CharField(db_column='Priority', max_length=20, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal')], blank=True, null=True)
    is_high_priority = models.BooleanField(db_column='IsHighPriority', verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(db_column='ActivityType', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(db_column='IsAllDayEvent', verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(db_column='IsVisibleInSelfService', verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(db_column='DurationInMinutes', verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(db_column='Location', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='activityhistory_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='activityhistory_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(db_column='CallDurationInSeconds', verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(db_column='CallType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(db_column='CallDisposition', max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(db_column='CallObject', max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(db_column='EndDateTime', verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(db_column='StartDateTime', verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_who = models.ForeignKey('Contact', models.DO_NOTHING, db_column='PrimaryWhoId', related_name='activityhistory_primarywho_set', verbose_name='Primary Name ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    primary_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='PrimaryAccountId', related_name='activityhistory_primaryaccount_set', verbose_name='Primary Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(db_column='ActivitySubtype', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Cadence', 'Cadence'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    alternate_detail = models.ForeignKey('EmailMessage', models.DO_NOTHING, db_column='AlternateDetailId', verbose_name='Email Message ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    completed_date_time = models.DateTimeField(db_column='CompletedDateTime', verbose_name='Completed Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aircall_answered_by = models.CharField(db_column='aircall__Answered_by__c', max_length=255, verbose_name='Answered by', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_call_id = models.CharField(db_column='aircall__CallId__c', max_length=255, verbose_name='Call Id', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_call_recording = models.URLField(db_column='aircall__Call_Recording__c', verbose_name='Call Recording', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_country = models.CharField(db_column='aircall__Country__c', max_length=255, verbose_name='Country', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_detailed_call_type = models.CharField(db_column='aircall__Detailed_call_type__c', max_length=255, verbose_name='Detailed call type', sf_read_only=models.READ_ONLY, choices=[('Inbound answered', 'Inbound answered'), ('Missed call', 'Missed call'), ('Outbound answered', 'Outbound answered'), ('Outbound unanswered', 'Outbound unanswered'), ('Voicemail', 'Voicemail')], blank=True, null=True) 
    aircall_external_contact_phone_number = models.CharField(db_column='aircall__External_contact_phone_number__c', max_length=40, verbose_name='External contact phone number', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_handle_time = models.DecimalField(db_column='aircall__Handle_Time__c', max_digits=18, decimal_places=0, verbose_name='Handle Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_hour_in_time_zone = models.CharField(db_column='aircall__Hour_in_time_zone__c', max_length=255, verbose_name='Hour in timezone', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_is_missed_call = models.BooleanField(db_column='aircall__Is_Missed_call__c', verbose_name='Is Missed call', sf_read_only=models.READ_ONLY) 
    aircall_is_voicemail = models.BooleanField(db_column='aircall__Is_Voicemail__c', verbose_name='Is Voicemail', sf_read_only=models.READ_ONLY) 
    aircall_made_by = models.CharField(db_column='aircall__Made_By__c', max_length=255, verbose_name='Made By', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_missed_call_reason = models.CharField(db_column='aircall__Missed_Call_Reason__c', max_length=255, verbose_name='Missed Call Reason', sf_read_only=models.READ_ONLY, choices=[('abandoned_in_ivr', 'Abandoned in IVR'), ('agents_did_not_answer', 'Agents did not answer'), ('no_available_agent', 'No available agent'), ('out_of_opening_hours', 'Out of opening hours'), ('short_abandoned', 'Short abandoned'), ('abandoned_in_classic', 'Abandoned in Classic')], blank=True, null=True) 
    aircall_number_name = models.CharField(db_column='aircall__Number_Name__c', max_length=255, verbose_name='Number name', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_phone_number = models.CharField(db_column='aircall__Phone_number__c', max_length=40, verbose_name='Aircall number', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_time_zone = models.DecimalField(db_column='aircall__Time_zone__c', max_digits=18, decimal_places=0, verbose_name='Time zone', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_transferred_to = models.CharField(db_column='aircall__Transferred_to__c', max_length=255, verbose_name='Transferred to', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_waiting_time = models.DecimalField(db_column='aircall__Waiting_Time__c', max_digits=18, decimal_places=0, verbose_name='Waiting Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_connection_status = models.CharField(db_column='aircall__Connection_status__c', max_length=1300, verbose_name='Connection status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_has_connected = models.BooleanField(db_column='aircall__Has_connected__c', verbose_name='Has connected', sf_read_only=models.READ_ONLY) 
    class Meta(models.Model.Meta):
        db_table = 'ActivityHistory'
        verbose_name = 'Activity History'
        verbose_name_plural = 'Activity History'
        # keyPrefix = None



class ActivityUsrConnectionStatus(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_id = models.CharField(db_column='UserId', max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_name = models.CharField(db_column='UserName', max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    configuration_name = models.CharField(db_column='ConfigurationName', max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_address = models.CharField(db_column='EmailAddress', max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    connectivity_status = models.CharField(db_column='ConnectivityStatus', max_length=255, verbose_name='Connection Status', sf_read_only=models.READ_ONLY, choices=[('ACTIVE', 'Active'), ('PENDING', 'Pending'), ('INITIALIZING', 'Initializing'), ('PROCESSING', 'Processing'), ('NEEDSATTENTION', 'Needs Attention'), ('IDLE_STREAMING', 'Idle Streaming'), ('DISABLED', 'Disconnected'), ('NEEDSATTENTIONGLOBAL', 'Needs Attention Global'), ('NEEDSATTENTIONHYBRID', 'Needs Attention Hybrid')], blank=True, null=True)
    is_terms_of_service_accepted = models.BooleanField(db_column='IsTermsOfServiceAccepted', sf_read_only=models.READ_ONLY, default=False)
    global_oauth_terms_state = models.CharField(db_column='GlobalOauthTermsState', max_length=255, verbose_name='GlobalOauth Terms State', sf_read_only=models.READ_ONLY, choices=[('PENDING', None), ('DECLINED', None), ('ACCEPTED', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActivityUsrConnectionStatus'
        verbose_name = 'Activity User Connection Status'
        verbose_name_plural = 'Activity User Connection Status'
        # keyPrefix = '1fm'



class AdditionalNumber(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    call_center = models.ForeignKey('CallCenter', models.DO_NOTHING, db_column='CallCenterId', verbose_name='Call Center ID', blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='additionalnumber_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='additionalnumber_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'AdditionalNumber'
        verbose_name = 'Additional Directory Number'
        verbose_name_plural = 'Additional Directory Numbers'
        # keyPrefix = '04m'



class AgentWork(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', related_name='agentwork_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='agentwork_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='agentwork_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='agentwork_user_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    work_item = models.ForeignKey(Account, models.DO_NOTHING, db_column='WorkItemId', verbose_name='WorkItem ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Case, Contact, ContactRequest, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, In_App_Checklist_Settings__c, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Product_Category_Info__c, Product_Category__c, SocialPost, VoiceCall, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Assigned', 'Assigned'), ('Unavailable', 'Unavailable'), ('Declined', 'Declined'), ('Opened', 'Opened'), ('Closed', 'Closed'), ('DeclinedOnPushTimeout', 'Declined on Push Time-Out'), ('Canceled', 'Canceled'), ('Transferred', 'Transferred')])
    service_channel = models.ForeignKey('ServiceChannel', models.DO_NOTHING, db_column='ServiceChannelId', verbose_name='Service Channel ID', sf_read_only=models.NOT_UPDATEABLE)
    original_queue = models.ForeignKey('Group', models.DO_NOTHING, db_column='OriginalQueueId', related_name='agentwork_originalqueue_set', verbose_name='Queue ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    capacity_weight = models.DecimalField(db_column='CapacityWeight', max_digits=10, decimal_places=2, verbose_name='Units of Capacity', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    capacity_percentage = models.DecimalField(db_column='CapacityPercentage', max_digits=5, decimal_places=2, verbose_name='Percentage of Capacity', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    request_date_time = models.DateTimeField(db_column='RequestDateTime', verbose_name='Request Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    accept_date_time = models.DateTimeField(db_column='AcceptDateTime', verbose_name='Accept Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    decline_date_time = models.DateTimeField(db_column='DeclineDateTime', verbose_name='Decline Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    close_date_time = models.DateTimeField(db_column='CloseDateTime', verbose_name='Close Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    speed_to_answer = models.IntegerField(db_column='SpeedToAnswer', sf_read_only=models.READ_ONLY, blank=True, null=True)
    agent_capacity_when_declined = models.DecimalField(db_column='AgentCapacityWhenDeclined', max_digits=10, decimal_places=2, verbose_name='Agent Capacity when Declined', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pending_service_routing = models.ForeignKey('PendingServiceRouting', models.DO_NOTHING, db_column='PendingServiceRoutingId', verbose_name='Pending Service Routing ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    push_timeout = models.IntegerField(db_column='PushTimeout', verbose_name='Push Time-Out', sf_read_only=models.READ_ONLY, blank=True, null=True)
    push_timeout_date_time = models.DateTimeField(db_column='PushTimeoutDateTime', verbose_name='Push Time-Out Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    handle_time = models.IntegerField(db_column='HandleTime', sf_read_only=models.READ_ONLY, blank=True, null=True)
    active_time = models.IntegerField(db_column='ActiveTime', sf_read_only=models.READ_ONLY, blank=True, null=True)
    decline_reason = models.CharField(db_column='DeclineReason', max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    cancel_date_time = models.DateTimeField(db_column='CancelDateTime', verbose_name='Cancel Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    should_skip_capacity_check = models.BooleanField(db_column='ShouldSkipCapacityCheck', sf_read_only=models.NOT_UPDATEABLE, default=False)
    routing_type = models.CharField(db_column='RoutingType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('QueueBased', 'Queue Based'), ('SkillsBased', 'Skills Based')], blank=True, null=True)
    routing_model = models.CharField(db_column='RoutingModel', max_length=255, sf_read_only=models.READ_ONLY, choices=[('LeastActive', 'Least Active'), ('MostAvailable', 'Most Available'), ('ExternalRouting', 'External Routing')], blank=True, null=True)
    routing_priority = models.IntegerField(db_column='RoutingPriority', sf_read_only=models.READ_ONLY, blank=True, null=True)
    assigned_date_time = models.DateTimeField(db_column='AssignedDateTime', verbose_name='Assign Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    preferred_user = models.ForeignKey('User', models.DO_NOTHING, db_column='PreferredUserId', related_name='agentwork_preferreduser_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    original_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='OriginalGroupId', related_name='agentwork_originalgroup_set', verbose_name='Group ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    secondary_routing_priority = models.IntegerField(db_column='SecondaryRoutingPriority', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_preferred_user_required = models.BooleanField(db_column='IsPreferredUserRequired', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AgentWork'
        verbose_name = 'Agent Work'
        verbose_name_plural = 'Agent Work'
        # keyPrefix = '0Bz'



class AgentWorkShare(models.Model):
    parent = models.ForeignKey(AgentWork, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AgentWorkShare'
        verbose_name = 'Agent Work Share'
        verbose_name_plural = 'Agent Work Share'
        # keyPrefix = None



class AgentWorkSkill(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='agentworkskill_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='agentworkskill_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    agent_work = models.ForeignKey(AgentWork, models.DO_NOTHING, db_column='AgentWorkId', verbose_name='Agent Work ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    skill = models.ForeignKey('Skill', models.DO_NOTHING, db_column='SkillId', verbose_name='Skill ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    skill_level = models.DecimalField(db_column='SkillLevel', max_digits=4, decimal_places=2, verbose_name='SkillLevel', sf_read_only=models.READ_ONLY)
    is_additional_skill = models.BooleanField(db_column='IsAdditionalSkill', sf_read_only=models.READ_ONLY, default=False)
    was_dropped = models.BooleanField(db_column='WasDropped', sf_read_only=models.READ_ONLY, default=False)
    skill_priority = models.IntegerField(db_column='SkillPriority', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AgentWorkSkill'
        verbose_name = 'Agent Work Skill'
        verbose_name_plural = 'Agent Work Skills'
        # keyPrefix = '0Sm'



class AggregateResult(models.Model):
    class Meta(models.Model.Meta):
        db_table = 'AggregateResult'
        verbose_name = 'Aggregate Result'
        verbose_name_plural = 'Aggregate Result'
        # keyPrefix = None



class Announcement(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='announcement_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='announcement_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    feed_item = models.OneToOneField('FeedItem', models.DO_NOTHING, db_column='FeedItemId', verbose_name='Feed Item ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    expiration_date = models.DateTimeField(db_column='ExpirationDate')
    send_emails = models.BooleanField(db_column='SendEmails', verbose_name='Send Emails on Announcement', sf_read_only=models.READ_ONLY, default=False)
    is_archived = models.BooleanField(db_column='IsArchived', verbose_name='Is Announcement Archived', sf_read_only=models.NOT_CREATEABLE, default=False)
    parent = models.ForeignKey('CollaborationGroup', models.DO_NOTHING, db_column='ParentId', related_name='announcement_parent_set', verbose_name='Parent ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Announcement'
        verbose_name = 'Announcement'
        verbose_name_plural = 'Announcements'
        # keyPrefix = '0Bt'



class ApexComponent(models.Model):
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80)
    api_version = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    description = models.TextField(db_column='Description', blank=True, null=True)
    controller_type = models.CharField(db_column='ControllerType', max_length=40, choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controller_key = models.CharField(db_column='ControllerKey', max_length=255, blank=True, null=True)
    markup = models.TextField(db_column='Markup')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='apexcomponent_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='apexcomponent_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexComponent'
        verbose_name = 'Visualforce Component'
        verbose_name_plural = 'Visualforce Components'
        # keyPrefix = '099'



class ApexLog(models.Model):
    log_user = models.ForeignKey('User', models.DO_NOTHING, db_column='LogUserId', verbose_name='Log User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    log_length = models.IntegerField(db_column='LogLength', verbose_name='Log Size (bytes)', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Date', sf_read_only=models.READ_ONLY)
    request = models.CharField(db_column='Request', max_length=16, verbose_name='Request Type', sf_read_only=models.READ_ONLY)
    operation = models.CharField(db_column='Operation', max_length=128, sf_read_only=models.READ_ONLY)
    application = models.CharField(db_column='Application', max_length=64, sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY)
    duration_milliseconds = models.IntegerField(db_column='DurationMilliseconds', verbose_name='Duration (ms)', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    start_time = models.DateTimeField(db_column='StartTime', sf_read_only=models.READ_ONLY)
    location = models.CharField(db_column='Location', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Monitoring', None), ('Profiling', None), ('SystemLog', None), ('Preserved', None)], blank=True, null=True)
    request_identifier = models.CharField(db_column='RequestIdentifier', max_length=84, verbose_name='Request ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexLog'
        verbose_name = 'Apex Debug Log'
        verbose_name_plural = 'Apex Debug Log'
        # keyPrefix = '07L'



class ApexPage(models.Model):
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80)
    api_version = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    description = models.TextField(db_column='Description', blank=True, null=True)
    controller_type = models.CharField(db_column='ControllerType', max_length=40, choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controller_key = models.CharField(db_column='ControllerKey', max_length=255, blank=True, null=True)
    is_available_in_touch = models.BooleanField(db_column='IsAvailableInTouch', verbose_name='Available for Lightning Experience, Experience Builder sites, and the mobile app', default=False)
    is_confirmation_token_required = models.BooleanField(db_column='IsConfirmationTokenRequired', verbose_name='Require CSRF protection on GET requests', default=False)
    markup = models.TextField(db_column='Markup')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='apexpage_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='apexpage_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexPage'
        verbose_name = 'Visualforce Page'
        verbose_name_plural = 'Visualforce Pages'
        # keyPrefix = '066'



class ApexPageInfo(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    apex_page_id = models.CharField(db_column='ApexPageId', max_length=18, verbose_name='Apex Page ID', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, sf_read_only=models.READ_ONLY)
    name_space_prefix = models.CharField(db_column='NameSpacePrefix', max_length=512, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='API Version', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_available_in_touch = models.BooleanField(db_column='IsAvailableInTouch', sf_read_only=models.READ_ONLY, default=False)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_show_header = models.CharField(db_column='IsShowHeader', max_length=80, verbose_name='Show Header', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexPageInfo'
        verbose_name = 'Apex Page Info'
        verbose_name_plural = 'Apex Pages Info'
        # keyPrefix = '4ve'



class AppAnalyticsQueryRequest(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='appanalyticsqueryrequest_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='appanalyticsqueryrequest_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(db_column='DataType', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('PackageUsageSummary', 'Package Usage Summary'), ('PackageUsageLog', 'Package Usage Log'), ('SubscriberSnapshot', 'Subscriber Snapshot')])
    start_time = models.DateTimeField(db_column='StartTime', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    end_time = models.DateTimeField(db_column='EndTime', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    request_state = models.CharField(db_column='RequestState', max_length=255, sf_read_only=models.READ_ONLY, default='New', choices=[('New', 'New'), ('Pending', 'Pending'), ('Complete', 'Complete'), ('Expired', 'Expired'), ('Failed', 'Failed'), ('NoData', 'No Data'), ('Delivered', 'Delivered')], blank=True, null=True)
    download_url = models.TextField(db_column='DownloadUrl', verbose_name='Download URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    download_expiration_time = models.DateTimeField(db_column='DownloadExpirationTime', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_message = models.CharField(db_column='ErrorMessage', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    query_submitted_time = models.DateTimeField(db_column='QuerySubmittedTime', sf_read_only=models.READ_ONLY, blank=True, null=True)
    package_ids = models.CharField(db_column='PackageIds', max_length=255, verbose_name='Package IDs', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    organization_ids = models.CharField(db_column='OrganizationIds', max_length=255, verbose_name='Organization IDs', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    download_size = models.TextField(db_column='DownloadSize', verbose_name='Download File Size', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    file_compression = models.CharField(db_column='FileCompression', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('none', 'none'), ('gzip', 'gzip'), ('snappy', 'snappy')], blank=True, null=True)
    available_since = models.DateTimeField(db_column='AvailableSince', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    file_type = models.CharField(db_column='FileType', max_length=255, sf_read_only=models.NOT_UPDATEABLE, default='csv', choices=[('csv', 'csv'), ('parquet', 'parquet')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AppAnalyticsQueryRequest'
        verbose_name = 'App Analytics Query Request'
        verbose_name_plural = 'App Analytics Query Requests'
        # keyPrefix = '0XI'



class AppDefinition(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    logo_url = models.URLField(db_column='LogoUrl', verbose_name='Logo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    ui_type = models.CharField(db_column='UiType', max_length=255, verbose_name='UI Type', sf_read_only=models.READ_ONLY, choices=[('Aloha', None), ('Lightning', None)], blank=True, null=True)
    nav_type = models.CharField(db_column='NavType', max_length=255, verbose_name='Navigation Type', sf_read_only=models.READ_ONLY, choices=[('Standard', None), ('Console', None)], blank=True, null=True)
    utility_bar = models.CharField(db_column='UtilityBar', max_length=80, verbose_name='Utility Bar Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    header_color = models.CharField(db_column='HeaderColor', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_override_org_theme = models.BooleanField(db_column='IsOverrideOrgTheme', verbose_name='Is Org Theme Overridden', sf_read_only=models.READ_ONLY, default=False)
    is_small_form_factor_supported = models.BooleanField(db_column='IsSmallFormFactorSupported', sf_read_only=models.READ_ONLY, default=False)
    is_medium_form_factor_supported = models.BooleanField(db_column='IsMediumFormFactorSupported', sf_read_only=models.READ_ONLY, default=False)
    is_large_form_factor_supported = models.BooleanField(db_column='IsLargeFormFactorSupported', sf_read_only=models.READ_ONLY, default=False)
    is_nav_personalization_disabled = models.BooleanField(db_column='IsNavPersonalizationDisabled', verbose_name='Is Navigation Menu Personalization Disabled', sf_read_only=models.READ_ONLY, default=False)
    is_nav_auto_temp_tabs_disabled = models.BooleanField(db_column='IsNavAutoTempTabsDisabled', verbose_name='Is Navigation Menu Automatically Create Temporary Tabs Disabled', sf_read_only=models.READ_ONLY, default=False)
    is_nav_tab_persistence_disabled = models.BooleanField(db_column='IsNavTabPersistenceDisabled', verbose_name='Is Clearing Workspace Tabs Enabled', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AppDefinition'
        verbose_name = 'App Definition'
        verbose_name_plural = 'App Definitions'
        # keyPrefix = '06m'



class AppMenuItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='appmenuitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='appmenuitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_url = models.URLField(db_column='StartUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(db_column='MobileStartUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    logo_url = models.URLField(db_column='LogoUrl', verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(db_column='IconUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    info_url = models.URLField(db_column='InfoUrl', verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_using_admin_authorization = models.BooleanField(db_column='IsUsingAdminAuthorization', verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY, default=False)
    mobile_platform = models.CharField(db_column='MobilePlatform', max_length=255, verbose_name='Mobile device OS platform', sf_read_only=models.READ_ONLY, choices=[('ios', 'iOS'), ('android', 'Android')], blank=True, null=True)
    mobile_min_os_ver = models.CharField(db_column='MobileMinOsVer', max_length=255, verbose_name='Minimum required mobile device OS version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_device_type = models.CharField(db_column='MobileDeviceType', max_length=255, verbose_name='Type of mobile device', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_registered_device_only = models.BooleanField(db_column='IsRegisteredDeviceOnly', verbose_name='App requires a registered mobile device', sf_read_only=models.READ_ONLY, default=False)
    mobile_app_ver = models.CharField(db_column='MobileAppVer', max_length=255, verbose_name='Version of the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_installed_date = models.DateTimeField(db_column='MobileAppInstalledDate', verbose_name='Date the mobile app was most recently installed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_installed_version = models.CharField(db_column='MobileAppInstalledVersion', max_length=255, verbose_name='Most recently installed version of the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_binary_id = models.CharField(db_column='MobileAppBinaryId', max_length=255, verbose_name='ID for the related mobile app binary', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_install_url = models.URLField(db_column='MobileAppInstallUrl', verbose_name='URL to install the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_enabled = models.BooleanField(db_column='CanvasEnabled', verbose_name='Is this a canvas-enabled application', sf_read_only=models.READ_ONLY, default=False)
    canvas_reference_id = models.CharField(db_column='CanvasReferenceId', max_length=18, verbose_name='The identifier used to render the canvas application.', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_url = models.URLField(db_column='CanvasUrl', verbose_name='The canvas url for the canvas application', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_access_method = models.CharField(db_column='CanvasAccessMethod', max_length=255, verbose_name='The configured access method for the canvas application', sf_read_only=models.READ_ONLY, default='Post', choices=[('Get', 'OAuth Webflow (GET)'), ('Post', 'Signed Request (POST)')], blank=True, null=True)
    canvas_selected_locations = models.CharField(db_column='CanvasSelectedLocations', max_length=255, verbose_name='The selected/supported locations of the canvas application', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_options = models.CharField(db_column='CanvasOptions', max_length=255, verbose_name='The options to hide publisher header or publisher share button', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True, null=True)
    application_id = models.CharField(db_column='ApplicationId', max_length=18, verbose_name='Application ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference to a table
    user_sort_order = models.IntegerField(db_column='UserSortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible = models.BooleanField(db_column='IsVisible', sf_read_only=models.NOT_CREATEABLE, default=False)
    is_accessible = models.BooleanField(db_column='IsAccessible', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AppMenuItem'
        verbose_name = 'AppMenuItem'
        verbose_name_plural = 'AppMenuItems'
        # keyPrefix = '0DS'



class AppTabMember(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_definition_id = models.CharField(db_column='AppDefinitionId', max_length=512, verbose_name='App Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tab_definition_id = models.CharField(db_column='TabDefinitionId', max_length=512, verbose_name='Tab Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    workspace_driver_field = models.CharField(db_column='WorkspaceDriverField', max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AppTabMember'
        verbose_name = 'App Tab Member'
        verbose_name_plural = 'App Tab Members'
        # keyPrefix = '06o'



class Approval(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Contract', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='approval_owner_set', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='approval_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='approval_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')])
    request_comment = models.CharField(db_column='RequestComment', max_length=4000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    approve_comment = models.CharField(db_column='ApproveComment', max_length=4000, verbose_name='Approve/Reject Comment', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Approval'
        verbose_name = 'Approval'
        verbose_name_plural = 'Approval'
        # keyPrefix = '806'



class Asset(models.Model):
    contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='asset_account_set', verbose_name='Account ID', blank=True, null=True)  # Master Detail Relationship *
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', related_name='asset_parent_set', verbose_name='Parent Asset ID', blank=True, null=True)
    root_asset = models.ForeignKey('self', models.DO_NOTHING, db_column='RootAssetId', related_name='asset_rootasset_set', verbose_name='Root Asset ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', blank=True, null=True)
    product_code = models.CharField(db_column='ProductCode', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_competitor_product = models.BooleanField(db_column='IsCompetitorProduct', verbose_name='Competitor Asset', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='asset_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='asset_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Asset Name')
    serial_number = models.CharField(db_column='SerialNumber', max_length=80, blank=True, null=True)
    install_date = models.DateField(db_column='InstallDate', blank=True, null=True)
    purchase_date = models.DateField(db_column='PurchaseDate', blank=True, null=True)
    usage_end_date = models.DateField(db_column='UsageEndDate', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, choices=[('Purchased', 'Purchased'), ('Shipped', 'Shipped'), ('Installed', 'Installed'), ('Registered', 'Registered'), ('Obsolete', 'Obsolete')], blank=True, null=True)
    price = models.DecimalField(db_column='Price', max_digits=18, decimal_places=0, blank=True, null=True)
    quantity = models.DecimalField(db_column='Quantity', max_digits=12, decimal_places=2, blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='asset_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    asset_provided_by = models.ForeignKey(Account, models.DO_NOTHING, db_column='AssetProvidedById', related_name='asset_assetprovidedby_set', verbose_name='Asset Provided By ID', blank=True, null=True)
    asset_serviced_by = models.ForeignKey(Account, models.DO_NOTHING, db_column='AssetServicedById', related_name='asset_assetservicedby_set', verbose_name='Asset Serviced By ID', blank=True, null=True)
    is_internal = models.BooleanField(db_column='IsInternal', verbose_name='Internal Asset', default=False)
    asset_level = models.IntegerField(db_column='AssetLevel', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stock_keeping_unit = models.CharField(db_column='StockKeepingUnit', max_length=180, verbose_name='Product SKU', sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(db_column='Street', blank=True, null=True)
    city = models.CharField(db_column='City', max_length=40, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=80, blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=80, blank=True, null=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(db_column='GeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(db_column='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Asset'
        verbose_name = 'Asset'
        verbose_name_plural = 'Assets'
        # keyPrefix = '02i'



class AssetFeed(models.Model):
    parent = models.ForeignKey(Asset, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='assetfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='assetfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetFeed'
        verbose_name = 'Asset Feed'
        verbose_name_plural = 'Asset Feed'
        # keyPrefix = None



class AssetHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account'), ('Address', 'Address'), ('AssetLevel', 'Asset Level'), ('Name', 'Asset Name'), ('Owner', 'Asset Owner'), ('AssetProvidedBy', 'Asset Provided By'), ('AssetServicedBy', 'Asset Serviced By'), ('City', 'City'), ('IsCompetitorProduct', 'Competitor Asset'), ('ConsequenceOfFailure', 'Consequence Of Failure'), ('Contact', 'Contact'), ('Country', 'Country'), ('created', 'Created.'), ('Description', 'Description'), ('DigitalAssetStatus', 'Digital Asset Status'), ('ExternalIdentifier', 'External Id'), ('feedEvent', 'Feed event'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('individualMerged', 'Individual Merged'), ('InstallDate', 'Install Date'), ('IsInternal', 'Internal Asset'), ('Latitude', 'Latitude'), ('Longitude', 'Longitude'), ('ManufactureDate', 'Manufacture Date'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent Asset'), ('PostalCode', 'Postal Code'), ('Price', 'Price'), ('Product2', 'Product'), ('PurchaseDate', 'Purchase Date'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootAsset', 'Root Asset'), ('SerialNumber', 'Serial Number'), ('State', 'State'), ('Status', 'Status'), ('StatusReason', 'Status Reason'), ('Street', 'Street'), ('Uuid', 'Unique Identifier'), ('UsageEndDate', 'Usage End Date')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetHistory'
        verbose_name = 'Asset History'
        verbose_name_plural = 'Asset History'
        # keyPrefix = None



class AssetRelationship(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    asset_relationship_number = models.CharField(db_column='AssetRelationshipNumber', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='assetrelationship_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='assetrelationship_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', related_name='assetrelationship_asset_set', verbose_name='Asset ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    related_asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='RelatedAssetId', related_name='assetrelationship_relatedasset_set', verbose_name='Asset ID')
    from_date = models.DateTimeField(db_column='FromDate', blank=True, null=True)
    to_date = models.DateTimeField(db_column='ToDate', blank=True, null=True)
    relationship_type = models.CharField(db_column='RelationshipType', max_length=40, default='Replacement', choices=[('Replacement', 'Replacement'), ('Upgrade', 'Upgrade'), ('Crossgrade', 'Crossgrade')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetRelationship'
        verbose_name = 'Asset Relationship'
        verbose_name_plural = 'Asset Relationships'
        # keyPrefix = '1AR'



class AssetRelationshipFeed(models.Model):
    parent = models.ForeignKey(AssetRelationship, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='assetrelationshipfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='assetrelationshipfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetRelationshipFeed'
        verbose_name = 'Asset Relationship Feed'
        verbose_name_plural = 'Asset Relationship Feed'
        # keyPrefix = None



class AssetRelationshipHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    asset_relationship = models.ForeignKey(AssetRelationship, models.DO_NOTHING, db_column='AssetRelationshipId', verbose_name='Asset Relationship ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Asset', 'Asset'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('FromDate', 'From Date'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedAsset', 'Related Asset'), ('RelationshipType', 'Relationship Type'), ('ToDate', 'To Date')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetRelationshipHistory'
        verbose_name = 'Asset Relationship History'
        verbose_name_plural = 'Asset Relationship History'
        # keyPrefix = None



class AssetShare(models.Model):
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    asset_access_level = models.CharField(db_column='AssetAccessLevel', max_length=40, verbose_name='Asset Access', sf_read_only=models.NOT_UPDATEABLE, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AssetShare'
        verbose_name = 'Asset Share'
        verbose_name_plural = 'Asset Share'
        # keyPrefix = '70a'



class AssignmentRule(models.Model):
    name = models.CharField(db_column='Name', max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='SObject Type', sf_read_only=models.READ_ONLY, choices=[('Case', None), ('Lead', None)], blank=True, null=True)
    active = models.BooleanField(db_column='Active', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='assignmentrule_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='assignmentrule_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'AssignmentRule'
        verbose_name = 'Assignment Rule'
        verbose_name_plural = 'Assignment Rules'
        # keyPrefix = '01Q'



class AttachedContentDocument(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, db_column='LinkedEntityId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, Contact, ContentWorkspace, Contract, ContractLineItem, Dashboard, DashboardComponent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EmailMessage, EmailTemplate, EnhancedLetterhead, Entitlement, EntityMilestone, Event, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, Lead, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, OrderItem, Organization, Problem, ProblemIncident, ProblemRelatedItem, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Quote, Report, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPost, Solution, Task, User, VoiceCall, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='attachedcontentdocument_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='attachedcontentdocument_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(db_column='FileType', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(db_column='FileExtension', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(db_column='ContentUrl', verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(db_column='ExternalDataSourceName', max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(db_column='ExternalDataSourceType', max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('ContentHubIsotope', None), ('contentHubItem', None), ('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('SciApi', None), ('SimpleURL', None), ('Trailhead', None), ('TrailheadEditWithId', None), ('usermobileconfig', None), ('usrconnectionstatus', None), ('Wrapper', None), ('Zero', None)], blank=True, null=True)
    sharing_option = models.CharField(db_column='SharingOption', max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.READ_ONLY, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AttachedContentDocument'
        verbose_name = 'Attached Content Document'
        verbose_name_plural = 'Attached Content Documents'
        # keyPrefix = None



class AttachedContentNote(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, db_column='LinkedEntityId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, Contact, ContentWorkspace, Contract, ContractLineItem, Dashboard, DashboardComponent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EmailMessage, EmailTemplate, EnhancedLetterhead, Entitlement, EntityMilestone, Event, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, Lead, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, OrderItem, Organization, Problem, ProblemIncident, ProblemRelatedItem, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Quote, Report, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPost, Solution, Task, User, VoiceCall, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='attachedcontentnote_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='attachedcontentnote_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(db_column='FileType', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(db_column='FileExtension', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    text_preview = models.CharField(db_column='TextPreview', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AttachedContentNote'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = None



class Attachment(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, Campaign, Case, ChangeRequest, Contact, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, EmailMessage, EmailTemplate, Entitlement, Event, Image, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Problem, Product2, Product_Category_Info__c, Product_Category__c, Quote, ServiceContract, ServiceResource, SocialPost, Solution, Task, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    name = models.CharField(db_column='Name', max_length=255, verbose_name='File Name')
    is_private = models.BooleanField(db_column='IsPrivate', verbose_name='Private', default=False)
    content_type = models.CharField(db_column='ContentType', max_length=120, blank=True, null=True)
    body_length = models.IntegerField(db_column='BodyLength', sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body')
    owner = models.ForeignKey('Calendar', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Calendar, User]
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='attachment_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='attachment_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Attachment'
        verbose_name = 'Attachment'
        verbose_name_plural = 'Attachments'
        # keyPrefix = '00P'



class AuraDefinition(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='auradefinition_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='auradefinition_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    aura_definition_bundle = models.ForeignKey('AuraDefinitionBundle', models.DO_NOTHING, db_column='AuraDefinitionBundleId', verbose_name='Lightning Definition Bundle ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    def_type = models.CharField(db_column='DefType', max_length=255, verbose_name='Definition Type', choices=[('APPLICATION', '0'), ('CONTROLLER', '1'), ('COMPONENT', '2'), ('EVENT', '3'), ('HELPER', '4'), ('INTERFACE', '5'), ('RENDERER', '7'), ('STYLE', '8'), ('PROVIDER', '9'), ('MODEL', '10'), ('TESTSUITE', '11'), ('DOCUMENTATION', '12'), ('TOKENS', '13'), ('DESIGN', '14'), ('SVG', '15'), ('MODULE', '16')])
    format = models.CharField(db_column='Format', max_length=255, choices=[('XML', 'XML'), ('JS', 'JS'), ('CSS', 'CSS'), ('TEMPLATE_CSS', 'TEMPLATE_CSS'), ('SVG', 'SVG')])
    source = models.TextField(db_column='Source')
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinition'
        verbose_name = 'Lightning Component Definition'
        verbose_name_plural = 'Lightning Component Definitions'
        # keyPrefix = '0Ad'



class AuraDefinitionBundle(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='auradefinitionbundle_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='auradefinitionbundle_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1)
    description = models.TextField(db_column='Description')
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionBundle'
        verbose_name = 'Aura Component Bundle'
        verbose_name_plural = 'Aura Component Bundles'
        # keyPrefix = '0Ab'



class AuraDefinitionBundleInfo(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_bundle_id = models.CharField(db_column='AuraDefinitionBundleId', max_length=18, verbose_name='Lightning Definition Bundle ID', sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Bundle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionBundleInfo'
        verbose_name = 'AuraDefinitionBundle Info'
        verbose_name_plural = 'AuraDefinitionBundle Infos'
        # keyPrefix = '0ab'



class AuraDefinitionInfo(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_bundle_info_id = models.CharField(db_column='AuraDefinitionBundleInfoId', max_length=100, verbose_name='Lightning Definition Bundle ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_id = models.CharField(db_column='AuraDefinitionId', max_length=18, verbose_name='Lightning Definition ID', sf_read_only=models.READ_ONLY)
    def_type = models.CharField(db_column='DefType', max_length=255, verbose_name='Definition Type', sf_read_only=models.READ_ONLY, choices=[('APPLICATION', '0'), ('CONTROLLER', '1'), ('COMPONENT', '2'), ('EVENT', '3'), ('HELPER', '4'), ('INTERFACE', '5'), ('RENDERER', '7'), ('STYLE', '8'), ('PROVIDER', '9'), ('MODEL', '10'), ('TESTSUITE', '11'), ('DOCUMENTATION', '12'), ('TOKENS', '13'), ('DESIGN', '14'), ('SVG', '15'), ('MODULE', '16')])
    format = models.CharField(db_column='Format', max_length=255, sf_read_only=models.READ_ONLY, choices=[('XML', 'XML'), ('JS', 'JS'), ('CSS', 'CSS'), ('TEMPLATE_CSS', 'TEMPLATE_CSS'), ('SVG', 'SVG')])
    source = models.TextField(db_column='Source', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Bundle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionInfo'
        verbose_name = 'AuraDefinition Info'
        verbose_name_plural = 'AuraDefinition Infos'
        # keyPrefix = '0ad'



class AuthConfig(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='authconfig_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='authconfig_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    url = models.CharField(db_column='Url', unique=True, max_length=240, verbose_name='URL', sf_read_only=models.READ_ONLY)
    auth_options_username_password = models.BooleanField(db_column='AuthOptionsUsernamePassword', verbose_name='UsernamePassword', sf_read_only=models.READ_ONLY)
    auth_options_saml = models.BooleanField(db_column='AuthOptionsSaml', verbose_name='Saml', sf_read_only=models.READ_ONLY)
    auth_options_auth_provider = models.BooleanField(db_column='AuthOptionsAuthProvider', verbose_name='AuthProvider', sf_read_only=models.READ_ONLY)
    auth_options_certificate = models.BooleanField(db_column='AuthOptionsCertificate', verbose_name='Certificate', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Authentication Configuration Type', sf_read_only=models.READ_ONLY, choices=[('Org', 'Org'), ('Community', 'Community'), ('Site', 'Site'), ('Portal', 'Portal')])
    class Meta(models.Model.Meta):
        db_table = 'AuthConfig'
        verbose_name = 'Authentication Configuration'
        verbose_name_plural = 'Authentication Configurations'
        # keyPrefix = '07T'



class AuthConfigProviders(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='authconfigproviders_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='authconfigproviders_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    auth_config = models.ForeignKey(AuthConfig, models.DO_NOTHING, db_column='AuthConfigId', verbose_name='Authentication Configuration ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    auth_provider = models.ForeignKey('AuthProvider', models.DO_NOTHING, db_column='AuthProviderId', verbose_name='Authentication Provider ID', sf_read_only=models.READ_ONLY)  # Reference to tables [AuthProvider, SamlSsoConfig] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'AuthConfigProviders'
        verbose_name = 'Authentication Configuration Auth. Provider'
        verbose_name_plural = 'Authentication Configuration Auth. Providers'
        # keyPrefix = '07U'



class AuthProvider(models.Model):
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    provider_type = models.CharField(db_column='ProviderType', max_length=40, choices=[('Facebook', 'Facebook'), ('Janrain', 'Janrain'), ('Salesforce', 'Salesforce'), ('OpenIdConnect', 'Open ID Connect'), ('MicrosoftACS', 'Microsoft Access Control Service'), ('LinkedIn', 'LinkedIn'), ('Twitter', 'Twitter'), ('Google', 'Google'), ('GitHub', 'GitHub'), ('Custom', 'Custom'), ('Apple', 'Apple'), ('Evergreen', 'Evergreen'), ('Slack', 'Slack'), ('HubSpot', 'Hubspot'), ('Microsoft', 'Microsoft')])
    friendly_name = models.CharField(db_column='FriendlyName', max_length=32, verbose_name='Name')
    developer_name = models.CharField(db_column='DeveloperName', max_length=32, verbose_name='URL Suffix')
    execution_user = models.ForeignKey('User', models.DO_NOTHING, db_column='ExecutionUserId', verbose_name='User ID', blank=True, null=True)
    consumer_key = models.CharField(db_column='ConsumerKey', max_length=256, blank=True, null=True)
    consumer_secret = models.CharField(db_column='ConsumerSecret', max_length=100, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    error_url = models.CharField(db_column='ErrorUrl', max_length=500, verbose_name='Custom Error URL', blank=True, null=True)
    authorize_url = models.URLField(db_column='AuthorizeUrl', verbose_name='Authorize Endpoint URL', blank=True, null=True)
    token_url = models.URLField(db_column='TokenUrl', verbose_name='Token Endpoint URL', blank=True, null=True)
    user_info_url = models.URLField(db_column='UserInfoUrl', verbose_name='User Info Endpoint URL', blank=True, null=True)
    default_scopes = models.CharField(db_column='DefaultScopes', max_length=256, blank=True, null=True)
    id_token_issuer = models.CharField(db_column='IdTokenIssuer', max_length=1024, verbose_name='Token Issuer', blank=True, null=True)
    options_send_access_token_in_header = models.BooleanField(db_column='OptionsSendAccessTokenInHeader', verbose_name='Send access token in header')
    options_send_client_credentials_in_header = models.BooleanField(db_column='OptionsSendClientCredentialsInHeader', verbose_name='Send client credentials in header')
    options_include_org_id_in_id = models.BooleanField(db_column='OptionsIncludeOrgIdInId', verbose_name="Include identity organization's Organization ID for third-party account linkage")
    options_send_secret_in_apis = models.BooleanField(db_column='OptionsSendSecretInApis', verbose_name='Include Consumer Secret in API Responses')
    icon_url = models.URLField(db_column='IconUrl', verbose_name='Icon URL', blank=True, null=True)
    logout_url = models.URLField(db_column='LogoutUrl', verbose_name='Custom Logout URL', blank=True, null=True)
    custom_metadata_type_record = models.CharField(db_column='CustomMetadataTypeRecord', max_length=15, blank=True, null=True)
    ec_key = models.CharField(db_column='EcKey', max_length=30, verbose_name='Elliptic Curve Key', blank=True, null=True)
    apple_team = models.CharField(db_column='AppleTeam', max_length=12, blank=True, null=True)
    sso_kickoff_url = models.URLField(db_column='SsoKickoffUrl', verbose_name='Single Sign-On Initialization URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_kickoff_url = models.URLField(db_column='LinkKickoffUrl', verbose_name='Existing User Linking URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    oauth_kickoff_url = models.URLField(db_column='OauthKickoffUrl', verbose_name='OAuth-Only Initialization URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuthProvider'
        verbose_name = 'Auth. Provider'
        verbose_name_plural = 'Auth. Providers'
        # keyPrefix = '0SO'



class AuthSession(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, db_column='UsersId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Updated', sf_read_only=models.READ_ONLY)
    num_seconds_valid = models.IntegerField(db_column='NumSecondsValid', verbose_name='Valid For', sf_read_only=models.READ_ONLY)
    user_type = models.CharField(db_column='UserType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')])
    source_ip = models.CharField(db_column='SourceIp', max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    login_type = models.CharField(db_column='LoginType', max_length=40, verbose_name='Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    session_type = models.CharField(db_column='SessionType', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    session_security_level = models.CharField(db_column='SessionSecurityLevel', max_length=40, sf_read_only=models.READ_ONLY, choices=[('LOW', None), ('STANDARD', None), ('HIGH_ASSURANCE', None)], blank=True, null=True)
    logout_url = models.CharField(db_column='LogoutUrl', max_length=1500, verbose_name='Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', verbose_name='Auth Session ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_history = models.ForeignKey('LoginHistory', models.DO_NOTHING, db_column='LoginHistoryId', verbose_name='Login History ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_geo = models.ForeignKey('LoginGeo', models.DO_NOTHING, db_column='LoginGeoId', verbose_name='Login Geo Data ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_current = models.BooleanField(db_column='IsCurrent', verbose_name='Current Session', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AuthSession'
        verbose_name = 'Auth Session'
        verbose_name_plural = 'Auth Sessions'
        # keyPrefix = '0Ak'



class BackgroundOperation(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='backgroundoperation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='backgroundoperation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    submitted_at = models.DateTimeField(db_column='SubmittedAt', verbose_name='Submitted', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('New', None), ('Scheduled', None), ('Canceled', None), ('Merged', None), ('Waiting', None), ('Running', None), ('Error', None), ('Complete', None)], blank=True, null=True)
    execution_group = models.CharField(db_column='ExecutionGroup', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sequence_group = models.CharField(db_column='SequenceGroup', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sequence_number = models.IntegerField(db_column='SequenceNumber', sf_read_only=models.READ_ONLY, blank=True, null=True)
    group_leader = models.ForeignKey('self', models.DO_NOTHING, db_column='GroupLeaderId', verbose_name='Background Operation ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    started_at = models.DateTimeField(db_column='StartedAt', verbose_name='Started', sf_read_only=models.READ_ONLY, blank=True, null=True)
    finished_at = models.DateTimeField(db_column='FinishedAt', verbose_name='Finished', sf_read_only=models.READ_ONLY, blank=True, null=True)
    worker_uri = models.CharField(db_column='WorkerUri', max_length=255, verbose_name='Worker URI', sf_read_only=models.READ_ONLY, blank=True, null=True)
    timeout = models.IntegerField(db_column='Timeout', sf_read_only=models.READ_ONLY, blank=True, null=True)
    expires_at = models.DateTimeField(db_column='ExpiresAt', verbose_name='Expires', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_followers = models.IntegerField(db_column='NumFollowers', sf_read_only=models.READ_ONLY, blank=True, null=True)
    process_after = models.DateTimeField(db_column='ProcessAfter', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_key = models.CharField(db_column='ParentKey', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_limit = models.IntegerField(db_column='RetryLimit', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_count = models.IntegerField(db_column='RetryCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_backoff = models.IntegerField(db_column='RetryBackoff', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error = models.CharField(db_column='Error', max_length=255, verbose_name='Error Message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Sweeper', None), ('ExternalObject', None), ('ExternalObjectSync', None), ('ExternalChangeDataCapture', None), ('XClean', None), ('AsyncQuery', None), ('WebCart', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BackgroundOperation'
        verbose_name = 'Background Operation'
        verbose_name_plural = 'Background Operations'
        # keyPrefix = '08P'



class BrandTemplate(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Brand Template Name')
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Letterhead Unique Name', default=models.DEFAULTED_ON_CREATE)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    description = models.CharField(db_column='Description', max_length=1000, blank=True, null=True)
    value = models.TextField(db_column='Value')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='brandtemplate_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='brandtemplate_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BrandTemplate'
        verbose_name = 'Letterhead'
        verbose_name_plural = 'Letterheads'
        # keyPrefix = '016'



class BrandingSet(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Set Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='brandingset_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='brandingset_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BrandingSet'
        verbose_name = 'Branding Set'
        verbose_name_plural = 'Branding Sets'
        # keyPrefix = '0Lw'



class BrandingSetProperty(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='brandingsetproperty_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='brandingsetproperty_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    branding_set = models.ForeignKey(BrandingSet, models.DO_NOTHING, db_column='BrandingSetId', verbose_name='Branding Set ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    property_name = models.CharField(db_column='PropertyName', max_length=255, verbose_name='Branding Set Property Name')
    property_value = models.TextField(db_column='PropertyValue', verbose_name='Branding Set Property Value', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BrandingSetProperty'
        verbose_name = 'Branding Set Property'
        verbose_name_plural = 'Branding Set Properties'
        # keyPrefix = '0Ly'



class BriefcaseAssignment(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='briefcaseassignment_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='briefcaseassignment_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User or Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    briefcase = models.ForeignKey('BriefcaseDefinition', models.DO_NOTHING, db_column='BriefcaseId', verbose_name='Briefcase Definition ID', sf_read_only=models.NOT_UPDATEABLE)
    class Meta(models.Model.Meta):
        db_table = 'BriefcaseAssignment'
        verbose_name = 'Briefcase Assignment'
        verbose_name_plural = 'Briefcase Assignments'
        # keyPrefix = '5LH'



class BriefcaseDefinition(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='briefcasedefinition_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='briefcasedefinition_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BriefcaseDefinition'
        verbose_name = 'Briefcase Definition'
        verbose_name_plural = 'Briefcase Definitions'
        # keyPrefix = '1rY'



class BriefcaseRule(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='briefcaserule_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='briefcaserule_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    briefcase = models.ForeignKey(BriefcaseDefinition, models.DO_NOTHING, db_column='BriefcaseId', verbose_name='Briefcase Definition ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    target_entity = models.CharField(db_column='TargetEntity', max_length=255, verbose_name='Target Object', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AccountContactRelation', None), ('Asset', None), ('AssetRelationship', None), ('Campaign', None), ('CampaignInfluence', None), ('CampaignMember', None), ('Case', None), ('CaseRelatedIssue', None), ('ChangeRequest', None), ('ChangeRequestRelatedIssue', None), ('ChangeRequestRelatedItem', None), ('Contact', None), ('ContactRequest', None), ('ContentVersion', None), ('Contract', None), ('ContractLineItem', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Entitlement', None), ('EntityMilestone', None), ('Event', None), ('Idea', None), ('Image', None), ('Incident', None), ('IncidentRelatedItem', None), ('Lead', None), ('Macro', None), ('Opportunity', None), ('OpportunityContactRole', None), ('OpportunityLineItem', None), ('OpportunityLineItemSchedule', None), ('Order', None), ('OrderItem', None), ('Pricebook2', None), ('PricebookEntry', None), ('Problem', None), ('ProblemIncident', None), ('ProblemRelatedItem', None), ('ProcessException', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('QuickText', None), ('Quote', None), ('QuoteLineItem', None), ('Recommendation', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('ServiceContract', None), ('ServiceResource', None), ('ServiceResourceSkill', None), ('SkillRequirement', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('Task', None), ('User', None), ('UserProvisioningRequest', None), ('VoiceCall', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPlan', None), ('WorkPlanTemplate', None), ('WorkPlanTemplateEntry', None), ('WorkStep', None), ('WorkStepTemplate', None), ('WorkThanks', None)])
    parent_rule = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentRuleId', verbose_name='Briefcase Rule ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    filter_logic = models.CharField(db_column='FilterLogic', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    query_scope = models.CharField(db_column='QueryScope', max_length=255, verbose_name='Scope', sf_read_only=models.READ_ONLY, choices=[('everything', None), ('assignedToMe', None), ('mine', None)])
    record_limit = models.IntegerField(db_column='RecordLimit', verbose_name='Limit', sf_read_only=models.READ_ONLY, blank=True, null=True)
    order_by = models.CharField(db_column='OrderBy', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Too long choices skipped
    is_ascending_order = models.BooleanField(db_column='IsAscendingOrder', verbose_name='Ascending', sf_read_only=models.READ_ONLY, default=False)
    relationship_field = models.CharField(db_column='RelationshipField', max_length=255, verbose_name='Custom Field Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AccountRollup', None), ('Action', None), ('ActivatedBy', None), ('Activity', None), ('ArchivedBy', None), ('Asset', None), ('AssetProvidedBy', None), ('AssetServicedBy', None), ('AttachedTo', None), ('BasisTransactionItem', None), ('BillToContact', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('ChangeRequest', None), ('CompanyAuthorizedBy', None), ('CompanySigned', None), ('Contact', None), ('ContentModifiedBy', None), ('Contract', None), ('ContractLineItem', None), ('ConvertedAccount', None), ('ConvertedContact', None), ('ConvertedOpportunity', None), ('CreatedBy', None), ('CustomerAuthorizedBy', None), ('CustomerSigned', None), ('Definition', None), ('DelegatedApprover', None), ('DeletedBy', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Entitlement', None), ('FirstPublishLocation', None), ('From', None), ('Giver', None), ('HiddenBy', None), ('Incident', None), ('Issue', None), ('LastModifiedBy', None), ('Lead', None), ('LeadOrContact', None), ('LeadOrContactOwner', None), ('Manager', None), ('MasterEvent', None), ('MasterRecord', None), ('Opportunity', None), ('OpportunityContactRole', None), ('OpportunityLineItem', None), ('Order', None), ('Organizer', None), ('Owner', None), ('Parent', None), ('ParentContractLineItem', None), ('ParentEntity', None), ('ParentIdea', None), ('ParentIncident', None), ('ParentProblem', None), ('ParentRecord', None), ('ParentServiceContract', None), ('ParentWorkOrder', None), ('ParentWorkOrderLineItem', None), ('Persona', None), ('Pricebook2', None), ('PricebookEntry', None), ('PrimaryPartnerAccount', None), ('Problem', None), ('Product', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillUser', None), ('Quote', None), ('QuoteLineItem', None), ('Recipient', None), ('Record', None), ('RecurrenceActivity', None), ('RelatedAsset', None), ('RelatedIssue', None), ('RelatedRecord', None), ('RelatedTo', None), ('ReplyTo', None), ('ReplyToEmailMessage', None), ('ReportsTo', None), ('ResolvedBy', None), ('Reviewer', None), ('RootAsset', None), ('RootContractLineItem', None), ('RootServiceContract', None), ('RootWorkOrder', None), ('RootWorkOrderLineItem', None), ('SalesforceUser', None), ('Scorecard', None), ('ServiceContract', None), ('ServiceResource', None), ('ShipToContact', None), ('Source', None), ('SyncedQuote', None), ('TargetEntity', None), ('User', None), ('What', None), ('Who', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPlan', None), ('WorkPlanTemplate', None), ('WorkStepTemplate', None)], blank=True, null=True)
    relationship_type = models.CharField(db_column='RelationshipType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('ParentToChild', None), ('ChildToParent', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BriefcaseRule'
        verbose_name = 'Briefcase Rule'
        verbose_name_plural = 'Briefcase Rules'
        # keyPrefix = '1rX'



class BriefcaseRuleFilter(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='briefcaserulefilter_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='briefcaserulefilter_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    briefcase_rule = models.ForeignKey(BriefcaseRule, models.DO_NOTHING, db_column='BriefcaseRuleId', verbose_name='Briefcase Rule ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    target_entity_field = models.CharField(db_column='TargetEntityField', max_length=255, verbose_name='Field', sf_read_only=models.READ_ONLY)  # Too long choices skipped
    filter_operator = models.CharField(db_column='FilterOperator', max_length=255, verbose_name='Operator', sf_read_only=models.READ_ONLY, choices=[('e', '='), ('n', '!='), ('l', '<'), ('g', '>'), ('m', '<='), ('h', '>='), ('s', 'Starts with'), ('d', 'Ends with')])
    filter_value = models.CharField(db_column='FilterValue', max_length=255, verbose_name='Value', sf_read_only=models.READ_ONLY, blank=True, null=True)
    filter_seq_number = models.IntegerField(db_column='FilterSeqNumber', verbose_name='Filter Sequence Number', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BriefcaseRuleFilter'
        verbose_name = 'Briefcase Rule Filter'
        verbose_name_plural = 'Briefcase Rule Filters'
        # keyPrefix = '1rZ'



class BusinessHours(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Business Hours Name')
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    is_default = models.BooleanField(db_column='IsDefault', verbose_name='Default Business Hours', default=False)
    sunday_start_time = models.TimeField(db_column='SundayStartTime', verbose_name='Sunday Start', blank=True, null=True)
    sunday_end_time = models.TimeField(db_column='SundayEndTime', verbose_name='Sunday End', blank=True, null=True)
    monday_start_time = models.TimeField(db_column='MondayStartTime', verbose_name='Monday Start', blank=True, null=True)
    monday_end_time = models.TimeField(db_column='MondayEndTime', verbose_name='Monday End', blank=True, null=True)
    tuesday_start_time = models.TimeField(db_column='TuesdayStartTime', verbose_name='Tuesday Start', blank=True, null=True)
    tuesday_end_time = models.TimeField(db_column='TuesdayEndTime', verbose_name='Tuesday End', blank=True, null=True)
    wednesday_start_time = models.TimeField(db_column='WednesdayStartTime', verbose_name='Wednesday Start', blank=True, null=True)
    wednesday_end_time = models.TimeField(db_column='WednesdayEndTime', verbose_name='Wednesday End', blank=True, null=True)
    thursday_start_time = models.TimeField(db_column='ThursdayStartTime', verbose_name='Thursday Start', blank=True, null=True)
    thursday_end_time = models.TimeField(db_column='ThursdayEndTime', verbose_name='Thursday End', blank=True, null=True)
    friday_start_time = models.TimeField(db_column='FridayStartTime', verbose_name='Friday Start', blank=True, null=True)
    friday_end_time = models.TimeField(db_column='FridayEndTime', verbose_name='Friday End', blank=True, null=True)
    saturday_start_time = models.TimeField(db_column='SaturdayStartTime', verbose_name='Saturday Start', blank=True, null=True)
    saturday_end_time = models.TimeField(db_column='SaturdayEndTime', verbose_name='Saturday End', blank=True, null=True)
    time_zone_sid_key = models.CharField(db_column='TimeZoneSidKey', max_length=40, verbose_name='Time Zone')  # Too long choices skipped
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='businesshours_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='businesshours_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BusinessHours'
        verbose_name = 'Business Hours'
        verbose_name_plural = 'Business Hours'
        # keyPrefix = '01m'



class BusinessProcess(models.Model):
    name = models.CharField(db_column='Name', max_length=80)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    table_enum_or_id = models.CharField(db_column='TableEnumOrId', max_length=40, verbose_name='Entity Enumeration Or ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Case', None), ('Lead', None), ('Opportunity', None), ('Solution', None)])
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.NOT_CREATEABLE, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='businessprocess_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='businessprocess_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BusinessProcess'
        verbose_name = 'Business Process'
        verbose_name_plural = 'Business Process'
        # keyPrefix = '019'



class Calendar(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Calendar Name', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='calendar_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Calendar Type', sf_read_only=models.READ_ONLY, choices=[('User', 'User Calendar'), ('Public', 'Public Calendar'), ('Resource', 'Resource Calendar'), ('Holiday', 'Holiday Calendar')])
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='calendar_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='calendar_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Calendar'
        verbose_name = 'Calendar'
        verbose_name_plural = 'Calendars'
        # keyPrefix = '023'



class CalendarView(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Calendar Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='calendarview_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='calendarview_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_displayed = models.BooleanField(db_column='IsDisplayed', default=False)
    color = models.CharField(db_column='Color', max_length=6, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    fill_pattern = models.CharField(db_column='FillPattern', max_length=50, blank=True, null=True)
    list_view_filter = models.ForeignKey('ListView', models.DO_NOTHING, db_column='ListViewFilterId', verbose_name='List View ID', blank=True, null=True)
    date_handling_type = models.CharField(db_column='DateHandlingType', max_length=255, sf_read_only=models.READ_ONLY, default='Datetime', choices=[('Datetime', 'Datetime'), ('Date', 'Date')], blank=True, null=True)
    start_field = models.CharField(db_column='StartField', max_length=255)
    end_field = models.CharField(db_column='EndField', max_length=255, blank=True, null=True)
    display_field = models.CharField(db_column='DisplayField', max_length=255)
    sobject_type = models.CharField(db_column='SobjectType', max_length=255, verbose_name='sObject Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Asset', None), ('Campaign', None), ('Case', None), ('Contact', None), ('Contract', None), ('EmailMessage', None), ('Endorsement', None), ('Event', None), ('Holiday', None), ('Idea', None), ('Lead', None), ('Opportunity', None), ('Order', None), ('Partner', None), ('Pricebook2', None), ('Product2', None), ('Report', None), ('Skill', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('Task', None), ('Topic', None), ('User', None), ('UserProvisioningRequest', None), ('WorkBadge', None), ('WorkOrder', None), ('WorkThanks', None)])
    publisher = models.ForeignKey(Calendar, models.DO_NOTHING, db_column='PublisherId', verbose_name='Publisher ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Calendar, ListView, User]
    class Meta(models.Model.Meta):
        db_table = 'CalendarView'
        verbose_name = 'Calendar'
        verbose_name_plural = 'Calendars'
        # keyPrefix = '03A'



class CalendarViewShare(models.Model):
    parent = models.ForeignKey(CalendarView, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CalendarViewShare'
        verbose_name = 'Calendar Share'
        verbose_name_plural = 'Calendar Share'
        # keyPrefix = None



class CallCenter(models.Model):
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.NOT_UPDATEABLE)
    internal_name = models.CharField(db_column='InternalName', max_length=240, sf_read_only=models.NOT_UPDATEABLE)
    version = models.DecimalField(db_column='Version', max_digits=18, decimal_places=3, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    adapter_url = models.CharField(db_column='AdapterUrl', max_length=2000, verbose_name='CTI Adapter URL', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    custom_settings = models.CharField(db_column='CustomSettings', max_length=3000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='callcenter_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='callcenter_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CallCenter'
        verbose_name = 'Call Center'
        verbose_name_plural = 'Call Centers'
        # keyPrefix = '04v'



class CallCoachingMediaProvider(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='callcoachingmediaprovider_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='callcoachingmediaprovider_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    provider_name = models.CharField(db_column='ProviderName', unique=True, max_length=255, sf_read_only=models.NOT_UPDATEABLE)
    provider_description = models.CharField(db_column='ProviderDescription', max_length=255, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CallCoachingMediaProvider'
        verbose_name = 'CallCoachingMediaProvider'
        verbose_name_plural = 'CallCoachingMediaProviders'
        # keyPrefix = '0hn'



class CallRecordingGeoRestriction(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='callrecordinggeorestriction_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='callrecordinggeorestriction_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    geographic_region_name = models.CharField(db_column='GeographicRegionName', max_length=255, sf_read_only=models.READ_ONLY)
    geographic_region_type = models.CharField(db_column='GeographicRegionType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('State', '0'), ('Country', '1')])
    class Meta(models.Model.Meta):
        db_table = 'CallRecordingGeoRestriction'
        verbose_name = 'CallRecordingGeoRestriction'
        verbose_name_plural = 'CallRecordingGeoRestrictions'
        # keyPrefix = '0mp'



class Campaign(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80)
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent Campaign ID', blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, default='Event', choices=[('Event', 'Event'), ('Demo Signup / Trial', 'Demo Signup / Trial'), ('Email', 'Email'), ('Referral Program', 'Referral Program'), ('Search', 'Search'), ('Social Media', 'Social Media'), ('Thought Leadership', 'Thought Leadership'), ('Website Direct', 'Website Direct'), ('Other', 'Other')], blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, default='Planned', choices=[('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Aborted', 'Aborted'), ('Planned', 'Planned')], blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', blank=True, null=True)
    expected_revenue = models.DecimalField(db_column='ExpectedRevenue', max_digits=18, decimal_places=0, verbose_name='Expected Revenue in Campaign', blank=True, null=True)
    budgeted_cost = models.DecimalField(db_column='BudgetedCost', max_digits=18, decimal_places=0, verbose_name='Budgeted Cost in Campaign', blank=True, null=True)
    actual_cost = models.DecimalField(db_column='ActualCost', max_digits=18, decimal_places=0, verbose_name='Actual Cost in Campaign', blank=True, null=True)
    expected_response = models.DecimalField(db_column='ExpectedResponse', max_digits=10, decimal_places=2, verbose_name='Expected Response (%)', blank=True, null=True)
    number_sent = models.DecimalField(db_column='NumberSent', max_digits=18, decimal_places=0, verbose_name='Num Sent in Campaign', blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    description = models.TextField(db_column='Description', blank=True, null=True)
    number_of_leads = models.IntegerField(db_column='NumberOfLeads', verbose_name='Leads in Campaign', sf_read_only=models.READ_ONLY)
    number_of_converted_leads = models.IntegerField(db_column='NumberOfConvertedLeads', verbose_name='Converted Leads in Campaign', sf_read_only=models.READ_ONLY)
    number_of_contacts = models.IntegerField(db_column='NumberOfContacts', verbose_name='Contacts in Campaign', sf_read_only=models.READ_ONLY)
    number_of_responses = models.IntegerField(db_column='NumberOfResponses', verbose_name='Responses in Campaign', sf_read_only=models.READ_ONLY)
    number_of_opportunities = models.IntegerField(db_column='NumberOfOpportunities', verbose_name='Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    number_of_won_opportunities = models.IntegerField(db_column='NumberOfWonOpportunities', verbose_name='Won Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    amount_all_opportunities = models.DecimalField(db_column='AmountAllOpportunities', max_digits=18, decimal_places=0, verbose_name='Value Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    amount_won_opportunities = models.DecimalField(db_column='AmountWonOpportunities', max_digits=18, decimal_places=0, verbose_name='Value Won Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='campaign_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='campaign_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='campaign_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaign_member_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, db_column='CampaignMemberRecordTypeId', verbose_name='Record Type ID', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Campaign'
        verbose_name = 'Campaign'
        verbose_name_plural = 'Campaigns'
        # keyPrefix = '701'



class CampaignFeed(models.Model):
    parent = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='campaignfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='campaignfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignFeed'
        verbose_name = 'Campaign Feed'
        verbose_name_plural = 'Campaign Feed'
        # keyPrefix = None



class CampaignHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='CampaignId', verbose_name='Campaign ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('ActualCost', 'Actual Cost in Campaign'), ('BudgetedCost', 'Budgeted Cost in Campaign'), ('CampaignMemberRecordType', 'Campaign Member Type'), ('Name', 'Campaign Name'), ('Owner', 'Campaign Owner'), ('created', 'Created.'), ('Description', 'Description'), ('EndDate', 'End Date'), ('ExpectedResponse', 'Expected Response (%)'), ('ExpectedRevenue', 'Expected Revenue in Campaign'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('NumberSent', 'Num Sent in Campaign'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent Campaign'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('StartDate', 'Start Date'), ('Status', 'Status'), ('Type', 'Type')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignHistory'
        verbose_name = 'Campaign Field History'
        verbose_name_plural = 'Campaign Field History'
        # keyPrefix = None



class CampaignInfluenceModel(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Model Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='campaigninfluencemodel_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='campaigninfluencemodel_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    model_type = models.CharField(db_column='ModelType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('1', 'Primary Campaign Source Model'), ('2', 'Custom Model'), ('3', 'First Touch Model'), ('4', 'Last Touch Model'), ('5', 'Even Distribution Model'), ('6', 'Data-Driven Model')], blank=True, null=True)
    model_description = models.CharField(db_column='ModelDescription', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default_model = models.BooleanField(db_column='IsDefaultModel', verbose_name='Default Model', sf_read_only=models.READ_ONLY, default=False)
    is_model_locked = models.BooleanField(db_column='IsModelLocked', verbose_name='Locked', sf_read_only=models.READ_ONLY, default=False)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    record_preference = models.CharField(db_column='RecordPreference', max_length=255, sf_read_only=models.READ_ONLY, default='AllRecords', choices=[('AllRecords', 'All Records'), ('RecordsWithAttribution', 'Records with >0% Attribution')])
    class Meta(models.Model.Meta):
        db_table = 'CampaignInfluenceModel'
        verbose_name = 'Campaign Influence Model'
        verbose_name_plural = 'Campaign Influence Models'
        # keyPrefix = '03V'



class CampaignMember(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='CampaignId', verbose_name='Campaign ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    lead = models.ForeignKey('Lead', models.DO_NOTHING, db_column='LeadId', verbose_name='Lead ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='campaignmember_account_set', verbose_name='Account ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    status = models.CharField(db_column='Status', max_length=40, choices=[('Responded', 'Responded'), ('Sent', 'Sent')], blank=True, null=True)
    has_responded = models.BooleanField(db_column='HasResponded', verbose_name='Responded', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='campaignmember_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='campaignmember_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    first_responded_date = models.DateField(db_column='FirstRespondedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    salutation = models.CharField(db_column='Salutation', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(db_column='FirstName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(db_column='LastName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.CharField(db_column='Street', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(db_column='City', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(db_column='Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(db_column='Fax', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_phone = models.CharField(db_column='MobilePhone', max_length=40, verbose_name='Mobile', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    do_not_call = models.BooleanField(db_column='DoNotCall', sf_read_only=models.READ_ONLY, default=False)
    has_opted_out_of_email = models.BooleanField(db_column='HasOptedOutOfEmail', verbose_name='Email Opt Out', sf_read_only=models.READ_ONLY, default=False)
    has_opted_out_of_fax = models.BooleanField(db_column='HasOptedOutOfFax', verbose_name='Fax Opt Out', sf_read_only=models.READ_ONLY, default=False)
    lead_source = models.CharField(db_column='LeadSource', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], blank=True, null=True)
    company_or_account = models.CharField(db_column='CompanyOrAccount', max_length=255, verbose_name='Company (Account)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_or_contact = models.ForeignKey(Account, models.DO_NOTHING, db_column='LeadOrContactId', related_name='campaignmember_leadorcontact_set', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Contact, Lead]
    lead_or_contact_owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='LeadOrContactOwnerId', verbose_name='Related Record Owner ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    class Meta(models.Model.Meta):
        db_table = 'CampaignMember'
        verbose_name = 'Campaign Member'
        verbose_name_plural = 'Campaign Members'
        # keyPrefix = '00v'



class CampaignMemberStatus(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='CampaignId', verbose_name='Campaign ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    label = models.CharField(db_column='Label', max_length=765, verbose_name='Member Status')
    sort_order = models.IntegerField(db_column='SortOrder', blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', default=False)
    has_responded = models.BooleanField(db_column='HasResponded', verbose_name='Responded', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='campaignmemberstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='campaignmemberstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CampaignMemberStatus'
        verbose_name = 'Campaign Member Status'
        verbose_name_plural = 'Campaign Member Statuses'
        # keyPrefix = '01Y'



class CampaignShare(models.Model):
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='CampaignId', verbose_name='Campaign ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    campaign_access_level = models.CharField(db_column='CampaignAccessLevel', max_length=40, verbose_name='Campaign Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CampaignShare'
        verbose_name = 'Campaign Share'
        verbose_name_plural = 'Campaign Share'
        # keyPrefix = '08s'



class Case(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, db_column='MasterRecordId', related_name='case_masterrecord_set', verbose_name='Master Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    case_number = models.CharField(db_column='CaseNumber', max_length=30, sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', blank=True, null=True)
    source = models.ForeignKey('EmailMessage', models.DO_NOTHING, db_column='SourceId', verbose_name='Source ID', blank=True, null=True)  # Reference to tables [EmailMessage, SocialPost]
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', related_name='case_parent_set', verbose_name='Parent Case ID', blank=True, null=True)
    supplied_name = models.CharField(db_column='SuppliedName', max_length=80, verbose_name='Name', blank=True, null=True)
    supplied_email = models.EmailField(db_column='SuppliedEmail', verbose_name='Email Address', blank=True, null=True)
    supplied_phone = models.CharField(db_column='SuppliedPhone', max_length=40, verbose_name='Phone', blank=True, null=True)
    supplied_company = models.CharField(db_column='SuppliedCompany', max_length=80, verbose_name='Company', blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Case Type', choices=[('Problem', 'Problem'), ('Feature Request', 'Feature Request'), ('Question', 'Question')], blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, default='New', choices=[('On Hold', 'On Hold'), ('Escalated', 'Escalated'), ('Closed', 'Closed'), ('New', 'New'), ('In Progress', 'In Progress'), ('Waiting for Customer', 'Waiting for Customer'), ('Merged', 'Merged'), ('Response Received', 'Response Received')], blank=True, null=True)
    reason = models.CharField(db_column='Reason', max_length=255, verbose_name='Case Reason', choices=[("User didn't attend training", "User didn't attend training"), ('Complex functionality', 'Complex functionality'), ('Existing problem', 'Existing problem'), ('Instructions not clear', 'Instructions not clear'), ('New problem', 'New problem')], blank=True, null=True)
    origin = models.CharField(db_column='Origin', max_length=255, verbose_name='Case Origin', choices=[('Email', 'Email'), ('Phone', 'Phone'), ('Web', 'Web')], blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255, blank=True, null=True)
    priority = models.CharField(db_column='Priority', max_length=255, default='Medium', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    closed_date = models.DateTimeField(db_column='ClosedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_escalated = models.BooleanField(db_column='IsEscalated', verbose_name='Escalated', default=False)
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='case_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='case_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    contact_phone = models.CharField(db_column='ContactPhone', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_mobile = models.CharField(db_column='ContactMobile', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_email = models.EmailField(db_column='ContactEmail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_fax = models.CharField(db_column='ContactFax', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    comments = models.TextField(db_column='Comments', verbose_name='Internal Comments', blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Case'
        verbose_name = 'Case'
        verbose_name_plural = 'Cases'
        # keyPrefix = '500'



class CaseComment(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_published = models.BooleanField(db_column='IsPublished', verbose_name='Published', default=False)
    comment_body = models.TextField(db_column='CommentBody', verbose_name='Body', blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='casecomment_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='casecomment_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseComment'
        verbose_name = 'Case Comment'
        verbose_name_plural = 'Case Comments'
        # keyPrefix = '00a'



class CaseContactRole(models.Model):
    cases = models.ForeignKey(Case, models.DO_NOTHING, db_column='CasesId', verbose_name='Case ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID')  # Master Detail Relationship *
    role = models.CharField(db_column='Role', max_length=255, choices=[('Technical Contact', 'Technical Contact'), ('Business Contact', 'Business Contact'), ('Decision Maker', 'Decision Maker'), ('Other', 'Other')], blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='casecontactrole_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='casecontactrole_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseContactRole'
        verbose_name = 'Case Contact Role'
        verbose_name_plural = 'Case Contact Role'
        # keyPrefix = '03j'



class CaseFeed(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='casefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='casefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseFeed'
        verbose_name = 'Case Feed'
        verbose_name_plural = 'Case Feed'
        # keyPrefix = None



class CaseHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    case = models.ForeignKey(Case, models.DO_NOTHING, db_column='CaseId', verbose_name='Case ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('Asset', 'Asset'), ('BusinessHours', 'Business Hours'), ('caseMerged', 'Case Merged'), ('Origin', 'Case Origin'), ('Owner', 'Case Owner'), ('Reason', 'Case Reason'), ('Source', 'Case Source'), ('closed', 'Closed.'), ('IsClosedOnCreate', 'Closed When Created'), ('Contact', 'Contact Name'), ('created', 'Created.'), ('Description', 'Description'), ('Entitlement', 'Entitlement Name'), ('SlaStartDate', 'Entitlement Process Start Time'), ('IsEscalated', 'Escalated'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ownerEscalated', 'Owner (Escalation)'), ('Parent', 'Parent Case'), ('Priority', 'Priority'), ('Product', 'Product'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ServiceContract', 'Service Contract'), ('Status', 'Status'), ('IsStopped', 'Stopped'), ('Subject', 'Subject'), ('Type', 'Type')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseHistory'
        verbose_name = 'Case History'
        verbose_name_plural = 'Case History'
        # keyPrefix = None



class CaseMilestone(models.Model):
    case = models.ForeignKey(Case, models.DO_NOTHING, db_column='CaseId', verbose_name='Case ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    start_date = models.DateTimeField(db_column='StartDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    target_date = models.DateTimeField(db_column='TargetDate', sf_read_only=models.READ_ONLY)
    completion_date = models.DateTimeField(db_column='CompletionDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    milestone_type = models.ForeignKey('MilestoneType', models.DO_NOTHING, db_column='MilestoneTypeId', verbose_name='Milestone Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_completed = models.BooleanField(db_column='IsCompleted', verbose_name='Completed', sf_read_only=models.READ_ONLY, default=False)
    is_violated = models.BooleanField(db_column='IsViolated', verbose_name='Violation', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='casemilestone_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='casemilestone_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    target_response_in_mins = models.IntegerField(db_column='TargetResponseInMins', verbose_name='Target Response (Mins)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_response_in_hrs = models.DecimalField(db_column='TargetResponseInHrs', max_digits=6, decimal_places=2, verbose_name='Target Response (Hours)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_response_in_days = models.DecimalField(db_column='TargetResponseInDays', max_digits=6, decimal_places=2, verbose_name='Target Response (Days)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_remaining_in_mins = models.CharField(db_column='TimeRemainingInMins', max_length=10, verbose_name='Time Remaining (Min:Sec)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_remaining_in_hrs = models.CharField(db_column='TimeRemainingInHrs', max_length=10, verbose_name='Time Remaining (Hour:Min)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_remaining_in_days = models.DecimalField(db_column='TimeRemainingInDays', max_digits=6, decimal_places=2, verbose_name='Time Remaining (Days)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_mins = models.IntegerField(db_column='ElapsedTimeInMins', verbose_name='Elapsed Time (Mins)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hrs = models.DecimalField(db_column='ElapsedTimeInHrs', max_digits=6, decimal_places=2, verbose_name='Elapsed Time (Hours)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_days = models.DecimalField(db_column='ElapsedTimeInDays', max_digits=6, decimal_places=2, verbose_name='Elapsed Time (Days)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_since_target_in_mins = models.CharField(db_column='TimeSinceTargetInMins', max_length=10, verbose_name='Time Since Target (Min:Sec)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_since_target_in_hrs = models.CharField(db_column='TimeSinceTargetInHrs', max_length=10, verbose_name='Time Since Target (Hour:Min)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_since_target_in_days = models.DecimalField(db_column='TimeSinceTargetInDays', max_digits=6, decimal_places=2, verbose_name='Time Since Target (Days)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    business_hours = models.ForeignKey(BusinessHours, models.DO_NOTHING, db_column='BusinessHoursId', verbose_name='Business Hours ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseMilestone'
        verbose_name = 'Case Milestone'
        verbose_name_plural = 'Case Milestones'
        # keyPrefix = '555'



class CaseRelatedIssue(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Case Related Issue Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='caserelatedissue_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='caserelatedissue_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    case = models.ForeignKey(Case, models.DO_NOTHING, db_column='CaseId', verbose_name='Case ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    related_issue = models.ForeignKey('Incident', models.DO_NOTHING, db_column='RelatedIssueId', verbose_name='Related Issue ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Incident, Problem] Master Detail Relationship *
    related_entity_type = models.CharField(db_column='RelatedEntityType', max_length=255, verbose_name='Related Issue Type', sf_read_only=models.READ_ONLY, choices=[('Incident', 'Incident'), ('Problem', 'Problem')])
    relationship_type = models.CharField(db_column='RelationshipType', max_length=40, default='Root Cause', choices=[('Root Cause', 'Root Cause'), ('Similar', 'Similar')])
    class Meta(models.Model.Meta):
        db_table = 'CaseRelatedIssue'
        verbose_name = 'Case Related Issue'
        verbose_name_plural = 'Case Related Issues'
        # keyPrefix = '0oL'



class CaseRelatedIssueFeed(models.Model):
    parent = models.ForeignKey(CaseRelatedIssue, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='caserelatedissuefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='caserelatedissuefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseRelatedIssueFeed'
        verbose_name = 'Case Related Issue Feed'
        verbose_name_plural = 'Case Related Issue Feed'
        # keyPrefix = None



class CaseRelatedIssueHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    case_related_issue = models.ForeignKey(CaseRelatedIssue, models.DO_NOTHING, db_column='CaseRelatedIssueId', verbose_name='Case Related Issue ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Case', 'Case'), ('Name', 'Case Related Issue Number'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedIssue', 'Related Issue'), ('RelatedEntityType', 'Related Issue Type'), ('RelationshipType', 'Relationship Type'), ('UniqueKeyIndex', 'Unique key')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseRelatedIssueHistory'
        verbose_name = 'Case Related Issue History'
        verbose_name_plural = 'Case Related Issue History'
        # keyPrefix = None



class CaseSolution(models.Model):
    case = models.ForeignKey(Case, models.DO_NOTHING, db_column='CaseId', verbose_name='Case ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    solution = models.ForeignKey('Solution', models.DO_NOTHING, db_column='SolutionId', verbose_name='Solution ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseSolution'
        verbose_name = 'Case Solution'
        verbose_name_plural = 'Case Solution'
        # keyPrefix = '010'



class CaseStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(db_column='IsClosed', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='casestatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='casestatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseStatus'
        verbose_name = 'Case Status Value'
        verbose_name_plural = 'Case Status Value'
        # keyPrefix = None



class CaseSubjectParticle(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='casesubjectparticle_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='casesubjectparticle_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    index = models.IntegerField(db_column='Index', unique=True)
    type = models.CharField(db_column='Type', max_length=255, choices=[('ProvidedString', 'ProvidedString'), ('Source', 'Source'), ('MessageType', 'MessageType'), ('SocialHandle', 'SocialHandle'), ('SocialNetwork', 'SocialNetwork'), ('Sentiment', 'Sentiment'), ('RealName', 'RealName'), ('Content', 'Message'), ('PipeSeparator', 'PipeSeparator'), ('ColonSeparator', 'ColonSeparator'), ('HyphenSeparator', 'HyphenSeparator')])
    text_field = models.CharField(db_column='TextField', max_length=255, verbose_name='Freeform Text Field', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseSubjectParticle'
        verbose_name = 'Case Subject Particle'
        verbose_name_plural = 'Case Subject Particles'
        # keyPrefix = '0Oi'



class CategoryData(models.Model):
    category_node = models.ForeignKey('CategoryNode', models.DO_NOTHING, db_column='CategoryNodeId', verbose_name='Category Node ID')  # Master Detail Relationship *
    related_sobject = models.ForeignKey('Solution', models.DO_NOTHING, db_column='RelatedSobjectId', verbose_name='sObject ID')  # Master Detail Relationship *
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='categorydata_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='categorydata_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryData'
        verbose_name = 'Category Data'
        verbose_name_plural = 'Category Data'
        # keyPrefix = '02o'



class CategoryNode(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent Category Node ID', blank=True, null=True)  # Master Detail Relationship *
    master_label = models.CharField(db_column='MasterLabel', max_length=40, verbose_name='Name')
    sort_order = models.IntegerField(db_column='SortOrder', blank=True, null=True)
    sort_style = models.CharField(db_column='SortStyle', max_length=40, verbose_name='Subcategory Sort Style', choices=[('custom', 'Custom Order'), ('alphabetical', 'Alphabetical Order')])
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='categorynode_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='categorynode_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryNode'
        verbose_name = 'Category Node'
        verbose_name_plural = 'Category Nodes'
        # keyPrefix = '02n'



class ChangeRequest(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    change_request_number = models.CharField(db_column='ChangeRequestNumber', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created On', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='changerequest_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified On', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='changerequest_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255)
    description = models.TextField(db_column='Description', blank=True, null=True)
    status_code = models.CharField(db_column='StatusCode', max_length=255, sf_read_only=models.READ_ONLY, default='New', choices=[('New', 'New'), ('Open', 'Open'), ('Planning', 'Planning'), ('Scheduled', 'Scheduled'), ('Implementing', 'Implementing'), ('Reviewed', 'Reviewed'), ('Approved', 'Approved'), ('Closed', 'Closed'), ('Canceled', 'Canceled'), ('Rejected', 'Rejected')], blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, default='New', choices=[('New', 'New'), ('Open', 'Open'), ('Planning', 'Planning'), ('Scheduled', 'Scheduled'), ('Implementing', 'Implementing'), ('Reviewed', 'Reviewed'), ('Approved', 'Approved'), ('Closed', 'Closed'), ('Canceled', 'Canceled'), ('Rejected', 'Rejected')])
    priority = models.CharField(db_column='Priority', max_length=40, default='Critical', choices=[('Critical', 'Critical'), ('High', 'High'), ('Moderate', 'Moderate'), ('Low', 'Low')])
    impact = models.CharField(db_column='Impact', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')])
    risk_level = models.CharField(db_column='RiskLevel', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')])
    category = models.CharField(db_column='Category', max_length=40, blank=True, null=True)
    change_type = models.CharField(db_column='ChangeType', max_length=255, verbose_name='Type of Change', choices=[('Standard', 'Standard'), ('Normal', 'Normal'), ('Major', 'Major'), ('Emergency', 'Emergency')], blank=True, null=True)
    reviewer = models.ForeignKey('User', models.DO_NOTHING, db_column='ReviewerId', related_name='changerequest_reviewer_set', verbose_name='User ID', blank=True, null=True)
    final_review_notes = models.TextField(db_column='FinalReviewNotes', blank=True, null=True)
    final_review_date_time = models.DateTimeField(db_column='FinalReviewDateTime', verbose_name='Reviewed On', blank=True, null=True)
    business_reason = models.CharField(db_column='BusinessReason', max_length=40, blank=True, null=True)
    business_justification = models.TextField(db_column='BusinessJustification', blank=True, null=True)
    risk_impact_analysis = models.TextField(db_column='RiskImpactAnalysis', verbose_name='Impact Analysis', blank=True, null=True)
    remediation_plan = models.TextField(db_column='RemediationPlan', blank=True, null=True)
    estimated_start_time = models.DateTimeField(db_column='EstimatedStartTime', verbose_name='Start Time (Estimated)', blank=True, null=True)
    estimated_end_time = models.DateTimeField(db_column='EstimatedEndTime', verbose_name='End Time (Estimated)', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequest'
        verbose_name = 'Change Request'
        verbose_name_plural = 'Change Requests'
        # keyPrefix = '0oW'



class ChangeRequestFeed(models.Model):
    parent = models.ForeignKey(ChangeRequest, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='changerequestfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='changerequestfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestFeed'
        verbose_name = 'Change Request Feed'
        verbose_name_plural = 'Change Request Feed'
        # keyPrefix = None



class ChangeRequestHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    change_request = models.ForeignKey(ChangeRequest, models.DO_NOTHING, db_column='ChangeRequestId', verbose_name='Change Request ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('BusinessJustification', 'Business Justification'), ('BusinessReason', 'Business Reason'), ('Category', 'Category'), ('Owner', 'Change Request Owner'), ('created', 'Created.'), ('Description', 'Description'), ('EstimatedEndTime', 'End Time (Estimated)'), ('feedEvent', 'Feed event'), ('FinalReviewNotes', 'Final Review Notes'), ('Impact', 'Impact'), ('RiskImpactAnalysis', 'Impact Analysis'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Priority', 'Priority'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedIssueAutonumberMaster', 'Related Issue Autonumber Master'), ('RelatedItemAutonumberMaster', 'Related Item Autonumber Master'), ('RemediationPlan', 'Remediation Plan'), ('FinalReviewDateTime', 'Reviewed On'), ('Reviewer', 'Reviewer'), ('RiskLevel', 'Risk Level'), ('EstimatedStartTime', 'Start Time (Estimated)'), ('Status', 'Status'), ('Subject', 'Subject'), ('ChangeType', 'Type of Change')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestHistory'
        verbose_name = 'Change Request History'
        verbose_name_plural = 'Change Request History'
        # keyPrefix = None



class ChangeRequestRelatedIssue(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Change Request Related Issue Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='changerequestrelatedissue_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='changerequestrelatedissue_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    change_request = models.ForeignKey(ChangeRequest, models.DO_NOTHING, db_column='ChangeRequestId', verbose_name='Change Request ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    related_issue = models.ForeignKey(Case, models.DO_NOTHING, db_column='RelatedIssueId', verbose_name='Related Issue ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Case, Incident, Problem] Master Detail Relationship *
    related_entity_type = models.CharField(db_column='RelatedEntityType', max_length=255, verbose_name='Related Issue Type', sf_read_only=models.READ_ONLY, choices=[('Incident', 'Incident'), ('Problem', 'Problem'), ('Case', 'Case')])
    relationship_type = models.CharField(db_column='RelationshipType', max_length=40, default='Caused By', choices=[('Caused By', 'Caused By'), ('Resolved By', 'Resolved By')])
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestRelatedIssue'
        verbose_name = 'Change Request Related Issue'
        verbose_name_plural = 'Change Request Related Issues'
        # keyPrefix = '0oK'



class ChangeRequestRelatedIssueFeed(models.Model):
    parent = models.ForeignKey(ChangeRequestRelatedIssue, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='changerequestrelatedissuefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='changerequestrelatedissuefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestRelatedIssueFeed'
        verbose_name = 'Change Request Related Issue Feed'
        verbose_name_plural = 'Change Request Related Issue Feed'
        # keyPrefix = None



class ChangeRequestRelatedIssueHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    change_request_related_issue = models.ForeignKey(ChangeRequestRelatedIssue, models.DO_NOTHING, db_column='ChangeRequestRelatedIssueId', verbose_name='Change Request Related Issue ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ChangeRequest', 'Change Request'), ('Name', 'Change Request Related Issue Number'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedIssue', 'Related Issue'), ('RelatedEntityType', 'Related Issue Type'), ('RelationshipType', 'Relationship Type'), ('UniqueKeyIndex', 'Unique key')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestRelatedIssueHistory'
        verbose_name = 'Change Request Related Issue History'
        verbose_name_plural = 'Change Request Related Issue History'
        # keyPrefix = None



class ChangeRequestRelatedItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Change Request Related Item Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='changerequestrelateditem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='changerequestrelateditem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    change_request = models.ForeignKey(ChangeRequest, models.DO_NOTHING, db_column='ChangeRequestId', verbose_name='Change Request ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    relationship_type = models.CharField(db_column='RelationshipType', max_length=40, default='Broke Item', choices=[('Broke Item', 'Broke Item'), ('Fixed Item', 'Fixed Item')])
    impact_level = models.CharField(db_column='ImpactLevel', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True)
    comment = models.TextField(db_column='Comment', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestRelatedItem'
        verbose_name = 'Change Request Related Item'
        verbose_name_plural = 'Change Request Related Items'
        # keyPrefix = '0tC'



class ChangeRequestRelatedItemFeed(models.Model):
    parent = models.ForeignKey(ChangeRequestRelatedItem, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='changerequestrelateditemfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='changerequestrelateditemfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestRelatedItemFeed'
        verbose_name = 'Change Request Related Item Feed'
        verbose_name_plural = 'Change Request Related Item Feed'
        # keyPrefix = None



class ChangeRequestRelatedItemHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    change_request_related_item = models.ForeignKey(ChangeRequestRelatedItem, models.DO_NOTHING, db_column='ChangeRequestRelatedItemId', verbose_name='Change Request Related Item ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Asset', 'Asset'), ('ChangeRequest', 'Change Request'), ('Name', 'Change Request Related Item Number'), ('Comment', 'Comment'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('ImpactLevel', 'Impact Level'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelationshipType', 'Relationship Type')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestRelatedItemHistory'
        verbose_name = 'Change Request Related Item History'
        verbose_name_plural = 'Change Request Related Item History'
        # keyPrefix = None



class ChangeRequestShare(models.Model):
    parent = models.ForeignKey(ChangeRequest, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ChangeRequestShare'
        verbose_name = 'Change Request Share'
        verbose_name_plural = 'Change Request Share'
        # keyPrefix = None



class ChatterActivity(models.Model):
    parent = models.ForeignKey('User', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    post_count = models.IntegerField(db_column='PostCount', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    comment_received_count = models.IntegerField(db_column='CommentReceivedCount', sf_read_only=models.READ_ONLY)
    like_received_count = models.IntegerField(db_column='LikeReceivedCount', sf_read_only=models.READ_ONLY)
    influence_raw_rank = models.IntegerField(db_column='InfluenceRawRank', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ChatterActivity'
        verbose_name = 'Chatter Activity'
        verbose_name_plural = 'Chatter Activity'
        # keyPrefix = '0ca'



class ChatterExtension(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_protected = models.BooleanField(db_column='IsProtected', verbose_name='Protected Component', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='chatterextension_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='chatterextension_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    extension_name = models.CharField(db_column='ExtensionName', max_length=32, verbose_name='Name')
    type = models.CharField(db_column='Type', max_length=255, choices=[('Lightning', None)])
    icon = models.ForeignKey('ContentAsset', models.DO_NOTHING, db_column='IconId', verbose_name='Asset File ID', blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255)
    composition_component_enum_or_id = models.CharField(db_column='CompositionComponentEnumOrId', max_length=255, verbose_name='Lightning Definition Bundle ID', blank=True, null=True)  # Too long choices skipped
    render_component_enum_or_id = models.CharField(db_column='RenderComponentEnumOrId', max_length=255, verbose_name='Lightning Definition Bundle ID', blank=True, null=True)  # Too long choices skipped
    hover_text = models.CharField(db_column='HoverText', max_length=255, blank=True, null=True)
    header_text = models.CharField(db_column='HeaderText', max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChatterExtension'
        verbose_name = 'Extension'
        verbose_name_plural = 'Extensions'
        # keyPrefix = '0MY'



class ChatterExtensionConfig(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='chatterextensionconfig_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='chatterextensionconfig_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    chatter_extension = models.ForeignKey(ChatterExtension, models.DO_NOTHING, db_column='ChatterExtensionId', verbose_name='Chatter Extension ID', blank=True, null=True)  # Master Detail Relationship *
    can_create = models.BooleanField(db_column='CanCreate', default=False)
    can_read = models.BooleanField(db_column='CanRead', default=False)
    position = models.IntegerField(db_column='Position', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChatterExtensionConfig'
        verbose_name = 'Chatter Extension Configuration'
        verbose_name_plural = 'Chatter Extension Configurations'
        # keyPrefix = '0Ob'



class ClientBrowser(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, db_column='UsersId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    full_user_agent = models.CharField(db_column='FullUserAgent', max_length=1024, sf_read_only=models.READ_ONLY, blank=True, null=True)
    proxy_info = models.CharField(db_column='ProxyInfo', max_length=1024, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_update = models.DateTimeField(db_column='LastUpdate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ClientBrowser'
        verbose_name = 'Client Browser'
        verbose_name_plural = 'Client Browser'
        # keyPrefix = '713'



class CollaborationGroup(models.Model):
    name = models.CharField(db_column='Name', max_length=40)
    member_count = models.IntegerField(db_column='MemberCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='collaborationgroup_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    collaboration_type = models.CharField(db_column='CollaborationType', max_length=40, verbose_name='Access Type', choices=[('Public', 'Public'), ('Private', 'Private'), ('Unlisted', 'Unlisted')])
    description = models.TextField(db_column='Description', blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='collaborationgroup_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='collaborationgroup_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    full_photo_url = models.URLField(db_column='FullPhotoUrl', verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(db_column='MediumPhotoUrl', verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(db_column='SmallPhotoUrl', verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_feed_modified_date = models.DateTimeField(db_column='LastFeedModifiedDate', sf_read_only=models.READ_ONLY)
    information_title = models.CharField(db_column='InformationTitle', max_length=30, blank=True, null=True)
    information_body = models.TextField(db_column='InformationBody', verbose_name='Information', blank=True, null=True)
    has_private_fields_access = models.BooleanField(db_column='HasPrivateFieldsAccess', sf_read_only=models.READ_ONLY, default=False)
    can_have_guests = models.BooleanField(db_column='CanHaveGuests', verbose_name='Allow customers', default=False)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_archived = models.BooleanField(db_column='IsArchived', verbose_name='Archive', default=False)
    is_auto_archive_disabled = models.BooleanField(db_column='IsAutoArchiveDisabled', verbose_name='Disable automatic archiving', default=False)
    announcement = models.ForeignKey(Announcement, models.DO_NOTHING, db_column='AnnouncementId', verbose_name='Announcement ID', blank=True, null=True)
    group_email = models.EmailField(db_column='GroupEmail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(db_column='BannerPhotoUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_broadcast = models.BooleanField(db_column='IsBroadcast', verbose_name='Broadcast Only', default=False)
    is_activity_group = models.BooleanField(db_column='IsActivityGroup', verbose_name='Enable email and event sharing', default=False)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroup'
        verbose_name = 'Group'
        verbose_name_plural = 'Groups'
        # keyPrefix = '0F9'



class CollaborationGroupFeed(models.Model):
    parent = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='collaborationgroupfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='collaborationgroupfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupFeed'
        verbose_name = 'Group Feed'
        verbose_name_plural = 'Group Feed'
        # keyPrefix = None



class CollaborationGroupMember(models.Model):
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, db_column='CollaborationGroupId', verbose_name='CollaborationGroup ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    member = models.ForeignKey('User', models.DO_NOTHING, db_column='MemberId', related_name='collaborationgroupmember_member_set', verbose_name='Member ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    collaboration_role = models.CharField(db_column='CollaborationRole', max_length=40, verbose_name='Group Member Role', choices=[('Admin', 'Manager'), ('Standard', 'Member')], blank=True, null=True)
    notification_frequency = models.CharField(db_column='NotificationFrequency', max_length=40, default='N', choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')], blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='collaborationgroupmember_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='collaborationgroupmember_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_feed_access_date = models.DateTimeField(db_column='LastFeedAccessDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_activity_shared = models.BooleanField(db_column='IsActivityShared', verbose_name='Email and Meeting Sharing', default=False)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Members'
        # keyPrefix = '0FB'



class CollaborationGroupMemberRequest(models.Model):
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, db_column='CollaborationGroupId', verbose_name='CollaborationGroup ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    requester = models.ForeignKey('User', models.DO_NOTHING, db_column='RequesterId', related_name='collaborationgroupmemberrequest_requester_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    response_message = models.CharField(db_column='ResponseMessage', max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Pending', None), ('Accepted', None), ('Declined', None)])
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='collaborationgroupmemberrequest_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='collaborationgroupmemberrequest_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMemberRequest'
        verbose_name = 'Group Member Request'
        verbose_name_plural = 'Group Member Requests'
        # keyPrefix = '0I5'



class CollaborationGroupRecord(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='collaborationgrouprecord_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='collaborationgrouprecord_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, db_column='CollaborationGroupId', verbose_name='Chatter Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    record = models.ForeignKey(Account, models.DO_NOTHING, db_column='RecordId', verbose_name='Record ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Campaign, Case, Contact, Contract, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, In_App_Checklist_Settings__c, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Product_Category_Info__c, Product_Category__c, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupRecord'
        verbose_name = 'Group Record'
        verbose_name_plural = 'Group Records'
        # keyPrefix = '0Aa'



class CollaborationInvitation(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shared_entity = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, db_column='SharedEntityId', verbose_name='Shared Entity ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [CollaborationGroup, User] Master Detail Relationship *
    inviter = models.ForeignKey('User', models.DO_NOTHING, db_column='InviterId', related_name='collaborationinvitation_inviter_set', verbose_name='Inviter User ID', sf_read_only=models.READ_ONLY)
    invited_user_email = models.CharField(db_column='InvitedUserEmail', max_length=240, verbose_name='Invited Email', sf_read_only=models.NOT_UPDATEABLE)
    invited_user_email_normalized = models.EmailField(db_column='InvitedUserEmailNormalized', verbose_name='Invited Email (Normalized)', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Invitation Status', sf_read_only=models.READ_ONLY, choices=[('Sent', None), ('Accepted', None), ('Canceled', None)])
    optional_message = models.CharField(db_column='OptionalMessage', max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='collaborationinvitation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='collaborationinvitation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationInvitation'
        verbose_name = 'Chatter Invitation'
        verbose_name_plural = 'Chatter Invitations'
        # keyPrefix = '0H1'



class ColorDefinition(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Color Definition Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tab_definition_id = models.CharField(db_column='TabDefinitionId', max_length=512, verbose_name='Tab Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    color = models.CharField(db_column='Color', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    theme = models.CharField(db_column='Theme', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    context = models.CharField(db_column='Context', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ColorDefinition'
        verbose_name = 'Color Definition'
        verbose_name_plural = 'Color Definitions'
        # keyPrefix = '05k'



class CombinedAttachment(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, Contact, ContentWorkspace, Contract, ContractLineItem, Dashboard, DashboardComponent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EmailMessage, EmailTemplate, EnhancedLetterhead, Entitlement, EntityMilestone, Event, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, Lead, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, OrderItem, Organization, Problem, ProblemIncident, ProblemRelatedItem, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Quote, Report, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPost, Solution, Task, User, VoiceCall, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    record_type = models.CharField(db_column='RecordType', max_length=30, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='combinedattachment_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='combinedattachment_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(db_column='FileType', max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(db_column='FileExtension', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(db_column='ContentUrl', verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(db_column='ExternalDataSourceName', max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(db_column='ExternalDataSourceType', max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('ContentHubIsotope', None), ('contentHubItem', None), ('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('SciApi', None), ('SimpleURL', None), ('Trailhead', None), ('TrailheadEditWithId', None), ('usermobileconfig', None), ('usrconnectionstatus', None), ('Wrapper', None), ('Zero', None)], blank=True, null=True)
    sharing_option = models.CharField(db_column='SharingOption', max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.READ_ONLY, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CombinedAttachment'
        verbose_name = 'Note, Attachment, Google Doc And File'
        verbose_name_plural = 'Notes, Attachments, Google Docs And Files'
        # keyPrefix = None



class Community(models.Model):
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='community_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='community_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    is_published = models.BooleanField(db_column='IsPublished', verbose_name='Show In Portal', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Community'
        verbose_name = 'Zone'
        verbose_name_plural = 'Zones'
        # keyPrefix = '09a'



class ConferenceNumber(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='conferencenumber_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='conferencenumber_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    external_event = models.ForeignKey('ExternalEvent', models.DO_NOTHING, db_column='ExternalEventId', verbose_name='External Event ID', blank=True, null=True)  # Master Detail Relationship *
    label = models.CharField(db_column='Label', max_length=255, blank=True, null=True)
    number = models.CharField(db_column='Number', max_length=40, blank=True, null=True)
    access_code = models.CharField(db_column='AccessCode', max_length=255, blank=True, null=True)
    vendor = models.CharField(db_column='Vendor', max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ConferenceNumber'
        verbose_name = 'Conference Number'
        verbose_name_plural = 'Conference Numbers'
        # keyPrefix = '0Ah'



class ConnectedApplication(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Connected App Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='connectedapplication_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='connectedapplication_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    options_allow_admin_approved_users_only = models.BooleanField(db_column='OptionsAllowAdminApprovedUsersOnly', verbose_name='AllowAdminApprovedUsersOnly', sf_read_only=models.READ_ONLY)
    options_refresh_token_validity_metric = models.BooleanField(db_column='OptionsRefreshTokenValidityMetric', verbose_name='RefreshTokenValidityMetric', sf_read_only=models.READ_ONLY)
    options_has_session_level_policy = models.BooleanField(db_column='OptionsHasSessionLevelPolicy', verbose_name='HasSessionLevelPolicy', sf_read_only=models.READ_ONLY)
    options_is_internal = models.BooleanField(db_column='OptionsIsInternal', verbose_name='isInternal', sf_read_only=models.READ_ONLY)
    options_full_content_push_notifications = models.BooleanField(db_column='OptionsFullContentPushNotifications', verbose_name='FullContentPushNotifications', sf_read_only=models.READ_ONLY)
    mobile_session_timeout = models.CharField(db_column='MobileSessionTimeout', max_length=40, verbose_name='Lock App After', sf_read_only=models.READ_ONLY, default='10', choices=[('1', '1 minute'), ('5', '5 minutes'), ('10', '10 minutes'), ('30', '30 minutes'), ('60', '60 minutes'), ('120', '120 minutes'), ('180', '180 minutes'), ('240', '240 minutes')], blank=True, null=True)
    pin_length = models.CharField(db_column='PinLength', max_length=40, verbose_name='PIN Length', sf_read_only=models.READ_ONLY, choices=[('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], blank=True, null=True)
    start_url = models.URLField(db_column='StartUrl', verbose_name='Start URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(db_column='MobileStartUrl', verbose_name='Mobile Start URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    refresh_token_validity_period = models.IntegerField(db_column='RefreshTokenValidityPeriod', verbose_name='Refresh Token Policy:', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ConnectedApplication'
        verbose_name = 'Connected App'
        verbose_name_plural = 'Connected Apps'
        # keyPrefix = '0H4'



class Contact(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, db_column='MasterRecordId', related_name='contact_masterrecord_set', verbose_name='Master Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='contact_account_set', verbose_name='Account ID', blank=True, null=True)  # Master Detail Relationship *
    last_name = models.CharField(db_column='LastName', max_length=80)
    first_name = models.CharField(db_column='FirstName', max_length=40, blank=True, null=True)
    salutation = models.CharField(db_column='Salutation', max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(db_column='MiddleName', max_length=40, blank=True, null=True)
    suffix = models.CharField(db_column='Suffix', max_length=40, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    mailing_street = models.TextField(db_column='MailingStreet', blank=True, null=True)
    mailing_city = models.CharField(db_column='MailingCity', max_length=40, blank=True, null=True)
    mailing_state = models.CharField(db_column='MailingState', max_length=80, verbose_name='Mailing State/Province', blank=True, null=True)
    mailing_postal_code = models.CharField(db_column='MailingPostalCode', max_length=20, verbose_name='Mailing Zip/Postal Code', blank=True, null=True)
    mailing_country = models.CharField(db_column='MailingCountry', max_length=80, blank=True, null=True)
    mailing_latitude = models.DecimalField(db_column='MailingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_longitude = models.DecimalField(db_column='MailingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_geocode_accuracy = models.CharField(db_column='MailingGeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    mailing_address = models.TextField(db_column='MailingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Business Phone', blank=True, null=True)
    fax = models.CharField(db_column='Fax', max_length=40, verbose_name='Business Fax', blank=True, null=True)
    mobile_phone = models.CharField(db_column='MobilePhone', max_length=40, blank=True, null=True)
    reports_to = models.ForeignKey('self', models.DO_NOTHING, db_column='ReportsToId', related_name='contact_reportsto_set', verbose_name='Reports To ID', blank=True, null=True)
    email = models.EmailField(db_column='Email', blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=128, blank=True, null=True)
    department = models.CharField(db_column='Department', max_length=80, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='contact_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contact_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contact_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_curequest_date = models.DateTimeField(db_column='LastCURequestDate', verbose_name='Last Stay-in-Touch Request Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_cuupdate_date = models.DateTimeField(db_column='LastCUUpdateDate', verbose_name='Last Stay-in-Touch Save Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(db_column='EmailBouncedReason', max_length=255, blank=True, null=True)
    email_bounced_date = models.DateTimeField(db_column='EmailBouncedDate', blank=True, null=True)
    is_email_bounced = models.BooleanField(db_column='IsEmailBounced', sf_read_only=models.READ_ONLY, default=False)
    photo_url = models.URLField(db_column='PhotoUrl', verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(db_column='Jigsaw', max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_contact_id = models.CharField(db_column='JigsawContactId', max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    property = models.ForeignKey(Account, models.DO_NOTHING, db_column='Property__c', related_name='contact_property_set', blank=True, null=True)
    active_camp_account_relation_sync_status = models.CharField(db_column='ActiveCamp__Account_Relation_Sync_Status__c', max_length=255, verbose_name='Account Relation Sync Status', choices=[('Successfully Synced', 'Successfully Synced'), ('Waiting For Next Sync', 'Waiting For Next Sync'), ('Waiting For Update', 'Waiting For Update')], blank=True, null=True) 
    active_camp_active_campaign_sync_status = models.CharField(db_column='ActiveCamp__ActiveCampaign_Sync_Status__c', max_length=255, verbose_name='ActiveCampaign Sync Status', choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Duplicate Email Found Do Not Sync', 'Duplicate Email Found Do Not Sync')], blank=True, null=True) 
    active_camp_active_campaign_id = models.CharField(db_column='ActiveCamp__Active_Campaign_Id__c', unique=True, max_length=255, verbose_name='ActiveCampaign Id', blank=True, null=True) 
    active_camp_last_synced = models.DateTimeField(db_column='ActiveCamp__Last_Synced__c', verbose_name='ActiveCampaign Last Synced', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Contact'
        verbose_name = 'Contact'
        verbose_name_plural = 'Contacts'
        # keyPrefix = '003'



class ContactFeed(models.Model):
    parent = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contactfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='contactfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactFeed'
        verbose_name = 'Contact Feed'
        verbose_name_plural = 'Contact Feed'
        # keyPrefix = None



class ContactHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActiveCamp__Account_Relation_Sync_Status__c', 'Account Relation Sync Status'), ('ActiveCamp__Active_Campaign_Id__c', 'ActiveCampaign Id'), ('ActiveCamp__Last_Synced__c', 'ActiveCampaign Last Synced'), ('ActiveCamp__ActiveCampaign_Sync_Status__c', 'ActiveCampaign Sync Status'), ('AssistantName', 'Assistant'), ('AssistantPhone', 'Asst. Phone'), ('Birthdate', 'Birthdate'), ('contactMerged', 'Contact Merged'), ('Owner', 'Contact Owner'), ('created', 'Created.'), ('contactCreatedFromLead', 'Created by lead convert'), ('Jigsaw', 'Data.com Key'), ('Department', 'Department'), ('Description', 'Description'), ('DoNotCall', 'Do Not Call'), ('Email', 'Email'), ('EmailBouncedDate', 'Email Bounced Date'), ('EmailBouncedReason', 'Email Bounced Reason'), ('HasOptedOutOfEmail', 'Email Opt Out'), ('Fax', 'Fax'), ('HasOptedOutOfFax', 'Fax Opt Out'), ('feedEvent', 'Feed event'), ('FirstName', 'First Name'), ('HomePhone', 'Home Phone'), ('individualMerged', 'Individual Merged'), ('LastName', 'Last Name'), ('contactUpdatedByLead', 'Lead converted to Contact'), ('LeadSource', 'Lead Source'), ('MailingAddress', 'Mailing Address'), ('MailingCity', 'Mailing City'), ('MailingCountry', 'Mailing Country'), ('MailingGeocodeAccuracy', 'Mailing Geocode Accuracy'), ('MailingLatitude', 'Mailing Latitude'), ('MailingLongitude', 'Mailing Longitude'), ('MailingState', 'Mailing State/Province'), ('MailingStreet', 'Mailing Street'), ('MailingPostalCode', 'Mailing Zip/Postal Code'), ('MiddleName', 'Middle Name'), ('MobilePhone', 'Mobile'), ('Name', 'Name'), ('OtherAddress', 'Other Address'), ('OtherCity', 'Other City'), ('OtherCountry', 'Other Country'), ('OtherGeocodeAccuracy', 'Other Geocode Accuracy'), ('OtherLatitude', 'Other Latitude'), ('OtherLongitude', 'Other Longitude'), ('OtherPhone', 'Other Phone'), ('OtherState', 'Other State/Province'), ('OtherStreet', 'Other Street'), ('OtherPostalCode', 'Other Zip/Postal Code'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Phone', 'Phone'), ('Property__c', 'Property'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ReportsTo', 'Reports To'), ('Salutation', 'Salutation'), ('Suffix', 'Suffix'), ('Title', 'Title')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactHistory'
        verbose_name = 'Contact History'
        verbose_name_plural = 'Contact History'
        # keyPrefix = None



class ContactRequest(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Contact Request Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contactrequest_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contactrequest_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    what = models.ForeignKey(Account, models.DO_NOTHING, db_column='WhatId', verbose_name='Related To ID', blank=True, null=True)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Case, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, In_App_Checklist_Settings__c, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Product_Category_Info__c, Product_Category__c, WorkOrder, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c]
    who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='WhoId', verbose_name='Requestor ID', blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    preferred_phone = models.CharField(db_column='PreferredPhone', max_length=40, verbose_name='Preferred Phone Number', blank=True, null=True)
    preferred_channel = models.CharField(db_column='PreferredChannel', max_length=40, default='Phone', choices=[('Phone', 'Phone')])
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Request Status', default='New', choices=[('New', 'New'), ('Attempted', 'Attempted'), ('Contacted', 'Contacted'), ('Abandoned', 'Abandoned')])
    request_reason = models.CharField(db_column='RequestReason', max_length=40, default='Account', choices=[('Account', 'Account'), ('Billing', 'Billing'), ('Case', 'Case'), ('General', 'General'), ('Order', 'Order'), ('Product', 'Product'), ('Other', 'Other')], blank=True, null=True)
    request_description = models.TextField(db_column='RequestDescription', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactRequest'
        verbose_name = 'Contact Request'
        verbose_name_plural = 'Contact Requests'
        # keyPrefix = '0Tz'



class ContactRequestShare(models.Model):
    parent = models.ForeignKey(ContactRequest, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContactRequestShare'
        verbose_name = 'Contact Request Share'
        verbose_name_plural = 'Contact Request Share'
        # keyPrefix = None



class ContactShare(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    contact_access_level = models.CharField(db_column='ContactAccessLevel', max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContactShare'
        verbose_name = 'Contact Share'
        verbose_name_plural = 'Contact Share'
        # keyPrefix = '03s'



class ContentAsset(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Unique Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentasset_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentasset_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, db_column='ContentDocumentId', related_name='contentasset_contentdocument_set', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible_by_external_users = models.BooleanField(db_column='IsVisibleByExternalUsers', verbose_name='Let unauthenticated users see this asset file', default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentAsset'
        verbose_name = 'Asset File'
        verbose_name_plural = 'Asset Files'
        # keyPrefix = '03S'



class ContentBody(models.Model):
    class Meta(models.Model.Meta):
        db_table = 'ContentBody'
        verbose_name = 'Content Body'
        verbose_name_plural = 'Content Bodies'
        # keyPrefix = '05T'



class ContentDistribution(models.Model):
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentdistribution_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='contentdistribution_owner_set', verbose_name='Owner ID')  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentdistribution_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=100, verbose_name='Content Delivery Name')
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='ContentVersionId', verbose_name='ContentVersion ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_record = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', blank=True, null=True)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Campaign, Case, Contact, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EmailMessage, In_App_Checklist_Settings__c, Lead, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Product_Category_Info__c, Product_Category__c, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    preferences_allow_pdfdownload = models.BooleanField(db_column='PreferencesAllowPDFDownload', verbose_name='Allow Download as PDF')
    preferences_allow_original_download = models.BooleanField(db_column='PreferencesAllowOriginalDownload', verbose_name='Allow Download in Original Format')
    preferences_password_required = models.BooleanField(db_column='PreferencesPasswordRequired', verbose_name='Require Password to Access Content')
    preferences_notify_on_visit = models.BooleanField(db_column='PreferencesNotifyOnVisit', verbose_name='Notify Me of First View or Download')
    preferences_link_latest_version = models.BooleanField(db_column='PreferencesLinkLatestVersion', verbose_name='Content Delivery Opens Latest Version')
    preferences_allow_view_in_browser = models.BooleanField(db_column='PreferencesAllowViewInBrowser', verbose_name='Allow View in the Browser')
    preferences_expires = models.BooleanField(db_column='PreferencesExpires', verbose_name='Content Delivery Expires')
    preferences_notify_rndtn_complete = models.BooleanField(db_column='PreferencesNotifyRndtnComplete', verbose_name='Email when Preview Images are Ready')
    expiry_date = models.DateTimeField(db_column='ExpiryDate', verbose_name='Expiration Date', blank=True, null=True)
    password = models.CharField(db_column='Password', max_length=36, sf_read_only=models.READ_ONLY, blank=True, null=True)
    view_count = models.IntegerField(db_column='ViewCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_view_date = models.DateTimeField(db_column='FirstViewDate', verbose_name='First Viewed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_view_date = models.DateTimeField(db_column='LastViewDate', verbose_name='Last Viewed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    distribution_public_url = models.CharField(db_column='DistributionPublicUrl', max_length=256, verbose_name='External Link', sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_download_url = models.CharField(db_column='ContentDownloadUrl', max_length=256, verbose_name='File Download Link', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pdf_download_url = models.CharField(db_column='PdfDownloadUrl', max_length=256, verbose_name='PDF Download Link', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDistribution'
        verbose_name = 'Content Delivery'
        verbose_name_plural = 'Content Deliveries'
        # keyPrefix = '05D'



class ContentDistributionView(models.Model):
    distribution = models.ForeignKey(ContentDistribution, models.DO_NOTHING, db_column='DistributionId', verbose_name='Content Delivery ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    parent_view = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentViewId', verbose_name='Content Delivery View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='View Date', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_internal = models.BooleanField(db_column='IsInternal', verbose_name='Internal View', sf_read_only=models.READ_ONLY, default=False)
    is_download = models.BooleanField(db_column='IsDownload', verbose_name='File Downloaded', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentDistributionView'
        verbose_name = 'Content Delivery View'
        verbose_name_plural = 'Content Delivery Views'
        # keyPrefix = '05H'



class ContentDocument(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentdocument_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentdocument_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(db_column='IsArchived', sf_read_only=models.NOT_CREATEABLE, default=False)
    archived_by = models.ForeignKey('User', models.DO_NOTHING, db_column='ArchivedById', related_name='contentdocument_archivedby_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    archived_date = models.DateField(db_column='ArchivedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='contentdocument_owner_set', verbose_name='Owner ID', sf_read_only=models.NOT_CREATEABLE)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.NOT_CREATEABLE)
    publish_status = models.CharField(db_column='PublishStatus', max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Private Library')])
    latest_published_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='LatestPublishedVersionId', related_name='contentdocument_latestpublishedversion_set', verbose_name='Latest Published Version ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('ContentWorkspace', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)  # Master Detail Relationship *
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_type = models.CharField(db_column='FileType', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(db_column='FileExtension', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sharing_option = models.CharField(db_column='SharingOption', max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.NOT_CREATEABLE, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    sharing_privacy = models.CharField(db_column='SharingPrivacy', max_length=40, verbose_name='File Privacy on Records', sf_read_only=models.NOT_CREATEABLE, default='N', choices=[('N', 'Visible to Anyone With Record Access'), ('P', 'Private on Records')], blank=True, null=True)
    content_modified_date = models.DateTimeField(db_column='ContentModifiedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_asset = models.ForeignKey(ContentAsset, models.DO_NOTHING, db_column='ContentAssetId', related_name='contentdocument_contentasset_set', verbose_name='Asset File ID', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocument'
        verbose_name = 'Content Document'
        verbose_name_plural = 'Content Documents'
        # keyPrefix = '069'



class ContentDocumentFeed(models.Model):
    parent = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentdocumentfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='contentdocumentfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentFeed'
        verbose_name = 'ContentDocument Feed'
        verbose_name_plural = 'ContentDocument Feed'
        # keyPrefix = None



class ContentDocumentHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ArchivedBy', 'Archived By'), ('ArchivedDate', 'Archived Date'), ('ContentAsset', 'Asset File Details'), ('created', 'Created.'), ('DeletedBy', 'Deleted By'), ('DeletedDate', 'Deleted Date'), ('contentDocPublished', 'Document Added To Library'), ('contentDocFeatured', 'Document Featured'), ('contentDocRepublished', 'Document Re-added To Library'), ('contentDocUnpublished', 'Document Removed From Library'), ('contentDocSubscribed', 'Document Subscribed to'), ('contentDocUnsubscribed', 'Document Unsubscribed to'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('IsArchived', 'Is Archived'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent'), ('PublishStatus', 'Publish Status'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentHistory'
        verbose_name = 'Content Document History'
        verbose_name_plural = 'Content Document History'
        # keyPrefix = None



class ContentDocumentLink(models.Model):
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, db_column='LinkedEntityId', verbose_name='Linked Entity ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, Contact, ContentWorkspace, Contract, ContractLineItem, Dashboard, DashboardComponent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EmailMessage, EmailTemplate, EnhancedLetterhead, Entitlement, EntityMilestone, Event, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, Lead, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, OrderItem, Organization, OutgoingEmail, Problem, ProblemIncident, ProblemRelatedItem, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Quote, Report, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPost, Solution, Task, Topic, User, VoiceCall, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_deleted = models.BooleanField(db_column='IsDeleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    share_type = models.CharField(db_column='ShareType', max_length=40, choices=[('V', 'Viewer'), ('C', 'Collaborator'), ('I', 'Inferred')], blank=True, null=True)
    visibility = models.CharField(db_column='Visibility', max_length=40, choices=[('AllUsers', 'All Users'), ('InternalUsers', 'Standard Users'), ('SharedUsers', 'Shared Users')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentLink'
        verbose_name = 'Content Document Link'
        verbose_name_plural = 'Content Document Link'
        # keyPrefix = '06A'



class ContentDocumentSubscription(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='Document ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_comment_sub = models.BooleanField(db_column='IsCommentSub', verbose_name='Is Comment Subscription', sf_read_only=models.READ_ONLY, default=False)
    is_document_sub = models.BooleanField(db_column='IsDocumentSub', verbose_name='Is Document Subscription', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentSubscription'
        verbose_name = 'Content Document Subscription'
        verbose_name_plural = 'Content Document Subscriptions'
        # keyPrefix = '057'



class ContentFolder(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentfolder_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentfolder_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent_content_folder = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentContentFolderId', verbose_name='Parent Content Folder ID', blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentFolder'
        verbose_name = 'Content Folder'
        verbose_name_plural = 'Content Folders'
        # keyPrefix = '07H'



class ContentFolderItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_folder = models.BooleanField(db_column='IsFolder', sf_read_only=models.READ_ONLY, default=False)
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, db_column='ParentContentFolderId', verbose_name='Parent Content Folder ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY)
    file_type = models.CharField(db_column='FileType', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(db_column='FileExtension', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentfolderitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentfolderitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderItem'
        verbose_name = 'Content Folder Item'
        verbose_name_plural = 'Content Folder Items'
        # keyPrefix = None



class ContentFolderLink(models.Model):
    parent_entity = models.ForeignKey('ContentWorkspace', models.DO_NOTHING, db_column='ParentEntityId', verbose_name='Parent Entity ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, db_column='ContentFolderId', verbose_name='Content Folder ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_deleted = models.BooleanField(db_column='IsDeleted', sf_read_only=models.READ_ONLY, default=False)
    enable_folder_status = models.CharField(db_column='EnableFolderStatus', max_length=40, sf_read_only=models.READ_ONLY, choices=[('S', 'Started'), ('C', 'Completed'), ('F', 'Failed')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderLink'
        verbose_name = 'Content Folder Link'
        verbose_name_plural = 'Content Folder Links'
        # keyPrefix = '07v'



class ContentFolderMember(models.Model):
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, db_column='ParentContentFolderId', verbose_name='Parent Content Folder ID', sf_read_only=models.NOT_CREATEABLE)
    child_record = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ChildRecordId', verbose_name='Child Record ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentfoldermember_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentfoldermember_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderMember'
        verbose_name = 'Content Folder Member'
        verbose_name_plural = 'Content Folder Members'
        # keyPrefix = '07I'



class ContentNote(models.Model):
    title = models.CharField(db_column='Title', max_length=255)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentnote_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentnote_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified', sf_read_only=models.READ_ONLY)
    content_modified_date = models.DateTimeField(db_column='ContentModifiedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_type = models.CharField(db_column='FileType', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    text_preview = models.CharField(db_column='TextPreview', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    file_extension = models.CharField(db_column='FileExtension', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latest_published_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, db_column='LatestPublishedVersionId', verbose_name='ContentVersion ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='contentnote_owner_set', verbose_name='Owner ID', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    latest_content = models.ForeignKey(ContentBody, models.DO_NOTHING, db_column='LatestContentId', verbose_name='Content Body ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    content = models.TextField(db_column='Content', blank=True, null=True)
    is_read_only = models.BooleanField(db_column='IsReadOnly', sf_read_only=models.READ_ONLY, default=False)
    sharing_privacy = models.CharField(db_column='SharingPrivacy', max_length=40, verbose_name='Note Privacy on Records', default='N', choices=[('N', 'Visible to Anyone With Record Access'), ('P', 'Private on Records')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentNote'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = '069'



class ContentNotification(models.Model):
    nature = models.CharField(db_column='Nature', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    users = models.ForeignKey('User', models.DO_NOTHING, db_column='UsersId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    entity_type = models.CharField(db_column='EntityType', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_identifier = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='EntityIdentifierId', verbose_name='Entity ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentDocument, ContentVersion, ContentWorkspace, ContentWorkspacePermission, User]
    subject = models.TextField(db_column='Subject', sf_read_only=models.READ_ONLY, blank=True, null=True)
    text = models.TextField(db_column='Text', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentNotification'
        verbose_name = 'Content Notification'
        verbose_name_plural = 'Content Notifications'
        # keyPrefix = '05V'



class ContentTagSubscription(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentTagSubscription'
        verbose_name = 'Content Tag Subscription'
        verbose_name_plural = 'Content Tag Subscriptions'
        # keyPrefix = '05Q'



class ContentUserSubscription(models.Model):
    subscriber_user = models.ForeignKey('User', models.DO_NOTHING, db_column='SubscriberUserId', related_name='contentusersubscription_subscriberuser_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    subscribed_to_user = models.ForeignKey('User', models.DO_NOTHING, db_column='SubscribedToUserId', related_name='contentusersubscription_subscribedtouser_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentUserSubscription'
        verbose_name = 'Content User Subscription'
        verbose_name_plural = 'Content User Subscriptions'
        # keyPrefix = '05S'



class ContentVersion(models.Model):
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_latest = models.BooleanField(db_column='IsLatest', sf_read_only=models.READ_ONLY)
    content_url = models.URLField(db_column='ContentUrl', verbose_name='Content URL', blank=True, null=True)
    content_body = models.ForeignKey(ContentBody, models.DO_NOTHING, db_column='ContentBodyId', verbose_name='Content Body ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    version_number = models.CharField(db_column='VersionNumber', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=255)
    description = models.TextField(db_column='Description', blank=True, null=True)
    reason_for_change = models.CharField(db_column='ReasonForChange', max_length=1000, blank=True, null=True)
    sharing_option = models.CharField(db_column='SharingOption', max_length=40, verbose_name='Prevent others from sharing and unsharing', default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')])
    sharing_privacy = models.CharField(db_column='SharingPrivacy', max_length=40, verbose_name='File Privacy on Records', default='N', choices=[('N', 'Visible to Anyone With Record Access'), ('P', 'Private on Records')])
    path_on_client = models.CharField(db_column='PathOnClient', max_length=500, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    rating_count = models.IntegerField(db_column='RatingCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', sf_read_only=models.READ_ONLY, default=False)
    content_modified_date = models.DateTimeField(db_column='ContentModifiedDate', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    content_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='ContentModifiedById', related_name='contentversion_contentmodifiedby_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    positive_rating_count = models.IntegerField(db_column='PositiveRatingCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    negative_rating_count = models.IntegerField(db_column='NegativeRatingCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    featured_content_boost = models.IntegerField(db_column='FeaturedContentBoost', sf_read_only=models.READ_ONLY, blank=True, null=True)
    featured_content_date = models.DateField(db_column='FeaturedContentDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='contentversion_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentversion_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentversion_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    tag_csv = models.TextField(db_column='TagCsv', verbose_name='Tags', blank=True, null=True)
    file_type = models.CharField(db_column='FileType', max_length=20, sf_read_only=models.READ_ONLY)
    publish_status = models.CharField(db_column='PublishStatus', max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Private Library')])
    version_data = models.TextField(db_column='VersionData', blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(db_column='FileExtension', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_publish_location = models.ForeignKey(Account, models.DO_NOTHING, db_column='FirstPublishLocationId', verbose_name='First Publish Location ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, Contact, ContentWorkspace, Contract, ContractLineItem, Dashboard, DashboardComponent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EmailMessage, EmailTemplate, EnhancedLetterhead, Entitlement, EntityMilestone, Event, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, Lead, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, OrderItem, Organization, OutgoingEmail, Problem, ProblemIncident, ProblemRelatedItem, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Quote, Report, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPost, Solution, Task, Topic, User, VoiceCall, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c]
    origin = models.CharField(db_column='Origin', max_length=40, verbose_name='Content Origin', sf_read_only=models.NOT_UPDATEABLE, default='C', choices=[('C', 'Content'), ('H', 'Chatter')])
    content_location = models.CharField(db_column='ContentLocation', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='S', choices=[('S', 'Salesforce'), ('E', 'External'), ('L', 'Social Customer Service')])
    text_preview = models.CharField(db_column='TextPreview', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_document_info1 = models.CharField(db_column='ExternalDocumentInfo1', max_length=1000, blank=True, null=True)
    external_document_info2 = models.CharField(db_column='ExternalDocumentInfo2', max_length=1000, blank=True, null=True)
    external_data_source = models.ForeignKey('ExternalDataSource', models.DO_NOTHING, db_column='ExternalDataSourceId', verbose_name='External Data Source ID', blank=True, null=True)
    checksum = models.CharField(db_column='Checksum', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_major_version = models.BooleanField(db_column='IsMajorVersion', verbose_name='Major Version', sf_read_only=models.NOT_UPDATEABLE, default=False)
    is_asset_enabled = models.BooleanField(db_column='IsAssetEnabled', verbose_name='Asset File Enabled', sf_read_only=models.NOT_UPDATEABLE, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersion'
        verbose_name = 'Content Version'
        verbose_name_plural = 'Content Versions'
        # keyPrefix = '068'



class ContentVersionComment(models.Model):
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_version = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='ContentVersionId', verbose_name='ContentVersion ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_comment = models.TextField(db_column='UserComment', verbose_name='Version Comment', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionComment'
        verbose_name = 'Content Version Comment'
        verbose_name_plural = 'Content Version Comments'
        # keyPrefix = '05C'



class ContentVersionHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_version = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='ContentVersionId', verbose_name='ContentVersion ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ContentUrl', 'Content URL'), ('created', 'Created.'), ('Description', 'Description'), ('ExternalDataSource', 'External Data Source'), ('ExternalDocumentInfo1', 'External Document Info1'), ('ExternalDocumentInfo2', 'External Document Info2'), ('feedEvent', 'Feed event'), ('SharingPrivacy', 'File Privacy on Records'), ('individualMerged', 'Individual Merged'), ('Language', 'Language'), ('IsMajorVersion', 'Major Version'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('SharingOption', 'Prevent others from sharing and unsharing'), ('ReasonForChange', 'Reason For Change'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title'), ('contentVersionCommented', 'Version Commented'), ('contentVersionCreated', 'Version Created'), ('contentVersionDataReplaced', 'Version Data Replaced'), ('contentVersionDeleted', 'Version Deleted'), ('contentVersionDownloaded', 'Version Downloaded'), ('contentVersionRated', 'Version Rated'), ('contentVersionUpdated', 'Version Updated'), ('contentVersionViewed', 'Version Viewed')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionHistory'
        verbose_name = 'Content Version History'
        verbose_name_plural = 'Content Version History'
        # keyPrefix = None



class ContentVersionRating(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_version = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='ContentVersionId', verbose_name='Version ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    rating = models.IntegerField(db_column='Rating', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_comment = models.TextField(db_column='UserComment', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionRating'
        verbose_name = 'Content Version Rating'
        verbose_name_plural = 'Content Version Ratings'
        # keyPrefix = '05J'



class ContentWorkspace(models.Model):
    name = models.CharField(db_column='Name', max_length=255)
    description = models.TextField(db_column='Description', blank=True, null=True)
    tag_model = models.CharField(db_column='TagModel', max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Unrestricted'), ('G', 'Guided'), ('R', 'Restricted')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentworkspace_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentworkspace_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    default_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, db_column='DefaultRecordTypeId', verbose_name='Record Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_restrict_content_types = models.BooleanField(db_column='IsRestrictContentTypes', verbose_name='Restrict Record Types', sf_read_only=models.READ_ONLY, default=False)
    is_restrict_linked_content_types = models.BooleanField(db_column='IsRestrictLinkedContentTypes', verbose_name='Restrict Linked Record Types', sf_read_only=models.READ_ONLY, default=False)
    workspace_type = models.CharField(db_column='WorkspaceType', max_length=40, verbose_name='Library Type', sf_read_only=models.READ_ONLY, default='R', choices=[('R', 'Regular'), ('B', 'Asset System')], blank=True, null=True)
    should_add_creator_membership = models.BooleanField(db_column='ShouldAddCreatorMembership', verbose_name='Add Creator Membership', sf_read_only=models.NOT_UPDATEABLE, default=False)
    last_workspace_activity_date = models.DateTimeField(db_column='LastWorkspaceActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    root_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, db_column='RootContentFolderId', verbose_name='Content Folder ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Unique Name', blank=True, null=True)
    workspace_image = models.ForeignKey(ContentAsset, models.DO_NOTHING, db_column='WorkspaceImageId', verbose_name='Asset File ID', help_text="Dress up your library with an image. An image that's 16:9 aspect ratio (for example 480 pixels by 270 pixels) works best. All users can see this image even if they aren't library members.", blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspace'
        verbose_name = 'Library'
        verbose_name_plural = 'Libraries'
        # keyPrefix = '058'



class ContentWorkspaceDoc(models.Model):
    content_workspace = models.ForeignKey(ContentWorkspace, models.DO_NOTHING, db_column='ContentWorkspaceId', verbose_name='Library ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_owner = models.BooleanField(db_column='IsOwner', verbose_name='Is Owning Library', sf_read_only=models.READ_ONLY, default=False)
    is_deleted = models.BooleanField(db_column='IsDeleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspaceDoc'
        verbose_name = 'Library Document'
        verbose_name_plural = 'Library Documents'
        # keyPrefix = '059'



class ContentWorkspaceMember(models.Model):
    content_workspace = models.ForeignKey(ContentWorkspace, models.DO_NOTHING, db_column='ContentWorkspaceId', verbose_name='Library ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_workspace_permission = models.ForeignKey('ContentWorkspacePermission', models.DO_NOTHING, db_column='ContentWorkspacePermissionId', verbose_name='Library Permission ID', blank=True, null=True)
    member = models.ForeignKey('Group', models.DO_NOTHING, db_column='MemberId', verbose_name='Member ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    member_type = models.CharField(db_column='MemberType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('U', 'User'), ('G', 'Group')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspaceMember'
        verbose_name = 'Library Member'
        verbose_name_plural = 'Library Members'
        # keyPrefix = '05A'



class ContentWorkspacePermission(models.Model):
    name = models.CharField(db_column='Name', max_length=255)
    type = models.CharField(db_column='Type', max_length=40, sf_read_only=models.READ_ONLY, default='Custom', choices=[('Admin', 'Library Administrator'), ('Author', 'Author'), ('Viewer', 'Viewer'), ('Custom', 'Custom')], blank=True, null=True)
    permissions_manage_workspace = models.BooleanField(db_column='PermissionsManageWorkspace', verbose_name='Manage Library')
    permissions_add_content = models.BooleanField(db_column='PermissionsAddContent', verbose_name='Add Content')
    permissions_add_content_obo = models.BooleanField(db_column='PermissionsAddContentOBO', verbose_name='Add Content on Behalf of Others')
    permissions_archive_content = models.BooleanField(db_column='PermissionsArchiveContent', verbose_name='Archive Content')
    permissions_delete_content = models.BooleanField(db_column='PermissionsDeleteContent', verbose_name='Delete Content')
    permissions_feature_content = models.BooleanField(db_column='PermissionsFeatureContent', verbose_name='Feature Content')
    permissions_view_comments = models.BooleanField(db_column='PermissionsViewComments', verbose_name='View Comment')
    permissions_add_comment = models.BooleanField(db_column='PermissionsAddComment', verbose_name='Add Comment')
    permissions_modify_comments = models.BooleanField(db_column='PermissionsModifyComments', verbose_name='Modify Comments')
    permissions_tag_content = models.BooleanField(db_column='PermissionsTagContent', verbose_name='Tag Content')
    permissions_deliver_content = models.BooleanField(db_column='PermissionsDeliverContent', verbose_name='Deliver Content')
    permissions_chatter_sharing = models.BooleanField(db_column='PermissionsChatterSharing', verbose_name='Attach or Share Content')
    permissions_organize_file_and_folder = models.BooleanField(db_column='PermissionsOrganizeFileAndFolder', verbose_name='Organize File and Content Folder')
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contentworkspacepermission_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contentworkspacepermission_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspacePermission'
        verbose_name = 'Library Permission'
        verbose_name_plural = 'Library Permissions'
        # keyPrefix = '05P'



class ContentWorkspaceSubscription(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_workspace = models.ForeignKey(ContentWorkspace, models.DO_NOTHING, db_column='ContentWorkspaceId', verbose_name='Workspace ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspaceSubscription'
        verbose_name = 'Content Workspace Subscription'
        verbose_name_plural = 'Content Workspace Subscriptions'
        # keyPrefix = '05R'



class Contract(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID')  # Master Detail Relationship *
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, db_column='Pricebook2Id', verbose_name='Price Book ID', blank=True, null=True)
    owner_expiration_notice = models.CharField(db_column='OwnerExpirationNotice', max_length=40, choices=[('15', '15 Days'), ('30', '30 Days'), ('45', '45 Days'), ('60', '60 Days'), ('90', '90 Days'), ('120', '120 Days')], blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', verbose_name='Contract Start Date', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', verbose_name='Contract End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(db_column='BillingStreet', blank=True, null=True)
    billing_city = models.CharField(db_column='BillingCity', max_length=40, blank=True, null=True)
    billing_state = models.CharField(db_column='BillingState', max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(db_column='BillingPostalCode', max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(db_column='BillingCountry', max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(db_column='BillingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(db_column='BillingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(db_column='BillingGeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(db_column='BillingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(db_column='ShippingStreet', blank=True, null=True)
    shipping_city = models.CharField(db_column='ShippingCity', max_length=40, blank=True, null=True)
    shipping_state = models.CharField(db_column='ShippingState', max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(db_column='ShippingPostalCode', max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(db_column='ShippingCountry', max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(db_column='ShippingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(db_column='ShippingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(db_column='ShippingGeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(db_column='ShippingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    contract_term = models.IntegerField(db_column='ContractTerm', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='contract_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(db_column='Status', max_length=100, default=models.DEFAULTED_ON_CREATE, choices=[('In Approval Process', 'In Approval Process'), ('Activated', 'Activated'), ('Draft', 'Draft')])
    company_signed = models.ForeignKey('User', models.DO_NOTHING, db_column='CompanySignedId', related_name='contract_companysigned_set', verbose_name='Company Signed By ID', blank=True, null=True)
    company_signed_date = models.DateField(db_column='CompanySignedDate', blank=True, null=True)
    customer_signed = models.ForeignKey(Contact, models.DO_NOTHING, db_column='CustomerSignedId', verbose_name='Customer Signed By ID', blank=True, null=True)
    customer_signed_title = models.CharField(db_column='CustomerSignedTitle', max_length=40, blank=True, null=True)
    customer_signed_date = models.DateField(db_column='CustomerSignedDate', blank=True, null=True)
    special_terms = models.TextField(db_column='SpecialTerms', blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, db_column='ActivatedById', related_name='contract_activatedby_set', verbose_name='Activated By ID', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activated_date = models.DateTimeField(db_column='ActivatedDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_code = models.CharField(db_column='StatusCode', max_length=40, verbose_name='Status Category', sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')])
    description = models.TextField(db_column='Description', blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract_number = models.CharField(db_column='ContractNumber', max_length=30, sf_read_only=models.READ_ONLY)
    last_approved_date = models.DateTimeField(db_column='LastApprovedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contract_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contract_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Contract'
        verbose_name = 'Contract'
        verbose_name_plural = 'Contracts'
        # keyPrefix = '800'



class ContractContactRole(models.Model):
    contract = models.ForeignKey(Contract, models.DO_NOTHING, db_column='ContractId', verbose_name='Contract ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID')  # Master Detail Relationship *
    role = models.CharField(db_column='Role', max_length=255, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contractcontactrole_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contractcontactrole_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContractContactRole'
        verbose_name = 'Contract Contact Role'
        verbose_name_plural = 'Contract Contact Role'
        # keyPrefix = '02a'



class ContractFeed(models.Model):
    parent = models.ForeignKey(Contract, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contractfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='contractfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractFeed'
        verbose_name = 'Contract Feed'
        verbose_name_plural = 'Contract Feed'
        # keyPrefix = None



class ContractHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, db_column='ContractId', verbose_name='Contract ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActivatedBy', 'Activated By'), ('ActivatedDate', 'Activated Date'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('CompanySigned', 'Company Signed By'), ('CompanySignedDate', 'Company Signed Date'), ('contractActivation', 'Contract Activated.'), ('contractConversion', 'Contract Converted.'), ('contractDraft', 'Contract Draft.'), ('EndDate', 'Contract End Date'), ('contractExpiration', 'Contract Expired.'), ('contractApproval', 'Contract in Approval.'), ('Name', 'Contract Name'), ('Owner', 'Contract Owner'), ('StartDate', 'Contract Start Date'), ('ContractTerm', 'Contract Term (months)'), ('contractTermination', 'Contract Terminated.'), ('created', 'Created.'), ('CustomerSigned', 'Customer Signed By'), ('CustomerSignedDate', 'Customer Signed Date'), ('CustomerSignedTitle', 'Customer Signed Title'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('OwnerExpirationNotice', 'Owner Expiration Notice'), ('Pricebook2', 'Price Book'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('SpecialTerms', 'Special Terms'), ('Status', 'Status')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractHistory'
        verbose_name = 'Contract History'
        verbose_name_plural = 'Contract History'
        # keyPrefix = None



class ContractLineItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    line_item_number = models.CharField(db_column='LineItemNumber', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contractlineitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contractlineitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_contract = models.ForeignKey('ServiceContract', models.DO_NOTHING, db_column='ServiceContractId', verbose_name='Service Contract ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, db_column='PricebookEntryId', verbose_name='Price Book Entry ID')
    quantity = models.DecimalField(db_column='Quantity', max_digits=12, decimal_places=2)
    unit_price = models.DecimalField(db_column='UnitPrice', max_digits=18, decimal_places=2, verbose_name='Sales Price')
    discount = models.DecimalField(db_column='Discount', max_digits=5, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(db_column='ListPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    subtotal = models.DecimalField(db_column='Subtotal', max_digits=18, decimal_places=2, verbose_name='Subtotal ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Expired', 'Expired')], blank=True, null=True)
    parent_contract_line_item = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentContractLineItemId', related_name='contractlineitem_parentcontractlineitem_set', verbose_name='Contract Line Item ID', blank=True, null=True)
    root_contract_line_item = models.ForeignKey('self', models.DO_NOTHING, db_column='RootContractLineItemId', related_name='contractlineitem_rootcontractlineitem_set', verbose_name='Contract Line Item ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractLineItem'
        verbose_name = 'Contract Line Item'
        verbose_name_plural = 'Contract Line Items'
        # keyPrefix = '811'



class ContractLineItemFeed(models.Model):
    parent = models.ForeignKey(ContractLineItem, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contractlineitemfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='contractlineitemfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractLineItemFeed'
        verbose_name = 'Contract Line Item Feed'
        verbose_name_plural = 'Contract Line Item Feed'
        # keyPrefix = None



class ContractLineItemHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract_line_item = models.ForeignKey(ContractLineItem, models.DO_NOTHING, db_column='ContractLineItemId', verbose_name='Contract Line Item ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Asset', 'Asset Name'), ('created', 'Created.'), ('Description', 'Description'), ('Discount', 'Discount'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ListPrice', 'List Price'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentContractLineItem', 'Parent Contract Line Item'), ('PricebookEntry', 'Price Book Entry'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootContractLineItem', 'Root Contract Line Item'), ('UnitPrice', 'Sales Price'), ('ServiceContract', 'Service Contract'), ('StartDate', 'Start Date'), ('Status', 'Status'), ('StatusIndicator', 'Status Icon'), ('Subtotal', 'Subtotal '), ('TotalPrice', 'Total Price')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractLineItemHistory'
        verbose_name = 'Contract Line Item History'
        verbose_name_plural = 'Contract Line Item History'
        # keyPrefix = None



class ContractStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(db_column='StatusCode', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='contractstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='contractstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContractStatus'
        verbose_name = 'Contract Status Value'
        verbose_name_plural = 'Contract Status Value'
        # keyPrefix = None



class CorsWhitelistEntry(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='corswhitelistentry_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='corswhitelistentry_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    url_pattern = models.CharField(db_column='UrlPattern', max_length=255, verbose_name='Origin URL Pattern')
    class Meta(models.Model.Meta):
        db_table = 'CorsWhitelistEntry'
        verbose_name = 'CORS Allowed Origin List'
        verbose_name_plural = 'CORS Allowed Origins List'
        # keyPrefix = '074'



class CspTrustedSite(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Trusted Site Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='csptrustedsite_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='csptrustedsite_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    endpoint_url = models.CharField(db_column='EndpointUrl', max_length=255, verbose_name='Trusted Site URL')
    description = models.TextField(db_column='Description', blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    context = models.CharField(db_column='Context', max_length=255, choices=[('All', 'All'), ('LEX', 'Lightning Experience Pages'), ('Communities', 'Experience Builder Sites'), ('FieldServiceMobileExtension', 'Field Service Mobile Extension'), ('VisualForce', 'Visualforce Pages')])
    is_applicable_to_connect_src = models.BooleanField(db_column='IsApplicableToConnectSrc', verbose_name='Allow site for connect-src', default=False, help_text='Allow Lightning components to load URLs using script interfaces from this site.')
    is_applicable_to_frame_src = models.BooleanField(db_column='IsApplicableToFrameSrc', verbose_name='Allow site for frame-src', default=False, help_text='Allow Lightning components to load resources contained in <iframe> elements from this site.')
    is_applicable_to_img_src = models.BooleanField(db_column='IsApplicableToImgSrc', verbose_name='Allow site for img-src', default=False, help_text='Allow Lightning components to load images from this site.')
    is_applicable_to_style_src = models.BooleanField(db_column='IsApplicableToStyleSrc', verbose_name='Allow site for style-src', default=False, help_text='Allow Lightning components to load stylesheets from this site.')
    is_applicable_to_font_src = models.BooleanField(db_column='IsApplicableToFontSrc', verbose_name='Allow site for font-src', default=False, help_text='Allow Lightning components to load fonts from this site.')
    is_applicable_to_media_src = models.BooleanField(db_column='IsApplicableToMediaSrc', verbose_name='Allow site for media-src', default=False, help_text='Allow Lightning components to load audio and video from this site.')
    class Meta(models.Model.Meta):
        db_table = 'CspTrustedSite'
        verbose_name = 'Content Security Policy Trusted Site'
        verbose_name_plural = 'Content Security Policy Trusted Sites'
        # keyPrefix = '08y'



class CustomBrand(models.Model):
    parent = models.ForeignKey('Organization', models.DO_NOTHING, db_column='ParentId', verbose_name='Branded Entity ID')  # Reference to tables [Organization, Stamp, Topic] Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='custombrand_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='custombrand_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomBrand'
        verbose_name = 'Custom Brand'
        verbose_name_plural = 'Custom Brand'
        # keyPrefix = '07W'



class CustomBrandAsset(models.Model):
    custom_brand = models.ForeignKey(CustomBrand, models.DO_NOTHING, db_column='CustomBrandId', verbose_name='Custom Brand ID')  # Master Detail Relationship *
    asset_category = models.CharField(db_column='AssetCategory', max_length=40, choices=[('MotifZeronaryColor', 'Zeronary motif color'), ('MotifPrimaryColor', 'Primary motif color'), ('MotifSecondaryColor', 'Secondary motif color'), ('MotifTertiaryColor', 'Tertiary motif color'), ('MotifQuaternaryColor', 'Quaternary motif color'), ('MotifZeronaryComplementColor', 'Zeronary motif colors complement color'), ('MotifPrimaryComplementColor', 'Primary motif colors complement color'), ('MotifTertiaryComplementColor', 'Tertiary motif colors complement color'), ('MotifQuaternaryComplementColor', 'Quaternary motif colors complement color'), ('PageHeader', 'Page Header'), ('PageFooter', 'Page Footer'), ('LoginFooterText', 'Footer text displayed on the login page'), ('LoginLogoImageId', 'Logo image displayed on the login page'), ('LargeLogoImageId', 'Large logo image'), ('MediumLogoImageId', 'Medium logo image'), ('SmallLogoImageId', 'Small logo image'), ('StaticLogoImageUrl', 'Static logo image url'), ('LoginQuaternaryColor', 'Login background color'), ('LoginRightFrameUrl', 'Login right frame url'), ('LogoAssetId', 'Logo asset image'), ('LoginPrimaryColor', 'Login primary color'), ('LoginBackgroundImageUrl', 'Background image url'), ('LargeLogoAssetId', 'Large logo asset image'), ('MediumLogoAssetId', 'Medium logo asset image')])
    text_asset = models.CharField(db_column='TextAsset', max_length=333, blank=True, null=True)
    asset_source = models.ForeignKey(ContentAsset, models.DO_NOTHING, db_column='AssetSourceId', verbose_name='Asset source ID', blank=True, null=True)  # Reference to tables [ContentAsset, Document]
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='custombrandasset_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='custombrandasset_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomBrandAsset'
        verbose_name = 'Custom Brand Asset'
        verbose_name_plural = 'Custom Brand Asset'
        # keyPrefix = '07X'



class CustomHelpMenuItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='customhelpmenuitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='customhelpmenuitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('CustomHelpMenuSection', models.DO_NOTHING, db_column='ParentId', verbose_name='Custom Help Menu Section ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    master_label = models.CharField(db_column='MasterLabel', max_length=100, verbose_name='Item Label')
    link_url = models.URLField(db_column='LinkUrl')
    sort_order = models.IntegerField(db_column='SortOrder')
    class Meta(models.Model.Meta):
        db_table = 'CustomHelpMenuItem'
        verbose_name = 'Custom Help Menu Item'
        verbose_name_plural = 'Custom Help Menu Items'
        # keyPrefix = '2Ca'



class CustomHelpMenuSection(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Section Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='customhelpmenusection_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='customhelpmenusection_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomHelpMenuSection'
        verbose_name = 'Custom Help Menu Section'
        verbose_name_plural = 'Custom Help Menu Sections'
        # keyPrefix = '2Cx'



class CustomHttpHeader(models.Model):
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='customhttpheader_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='customhttpheader_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('ExternalDataSource', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Reference to tables [ExternalDataSource, NamedCredential] Master Detail Relationship *
    header_field_name = models.CharField(db_column='HeaderFieldName', max_length=255, sf_read_only=models.READ_ONLY)
    header_field_value = models.CharField(db_column='HeaderFieldValue', max_length=1000, sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomHttpHeader'
        verbose_name = 'Custom HTTP Header'
        verbose_name_plural = 'Custom HTTP Headers'
        # keyPrefix = '0XH'



class CustomNotificationType(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='customnotificationtype_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='customnotificationtype_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    custom_notif_type_name = models.CharField(db_column='CustomNotifTypeName', unique=True, max_length=80, verbose_name='Name')
    description = models.TextField(db_column='Description', blank=True, null=True)
    desktop = models.BooleanField(db_column='Desktop', default=False)
    mobile = models.BooleanField(db_column='Mobile', default=False)
    is_slack = models.BooleanField(db_column='IsSlack', verbose_name='Slack', default=False)
    class Meta(models.Model.Meta):
        db_table = 'CustomNotificationType'
        verbose_name = 'Custom Notification Type'
        verbose_name_plural = 'Custom Notification Types'
        # keyPrefix = '0ML'



class CustomObjectUserLicenseMetrics(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, db_column='UserLicenseId', verbose_name='User License ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    custom_object_id = models.CharField(db_column='CustomObjectId', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    custom_object_type = models.CharField(db_column='CustomObjectType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Enterprise', 'Enterprise'), ('Light', 'Light')], blank=True, null=True)
    custom_object_name = models.CharField(db_column='CustomObjectName', max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    object_count = models.IntegerField(db_column='ObjectCount', verbose_name='Count of Objects assigned', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomObjectUserLicenseMetrics'
        verbose_name = 'Custom Object Usage By User License Metric'
        verbose_name_plural = 'Custom Object Usage By User License Metrics'
        # keyPrefix = '3NA'



class CustomPermission(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_protected = models.BooleanField(db_column='IsProtected', verbose_name='Protected Component', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='custompermission_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='custompermission_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_licensed = models.BooleanField(db_column='IsLicensed', verbose_name='License Required', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CustomPermission'
        verbose_name = 'Custom Permission'
        verbose_name_plural = 'Custom Permissions'
        # keyPrefix = '0CP'



class CustomPermissionDependency(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='custompermissiondependency_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='custompermissiondependency_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, db_column='CustomPermissionId', related_name='custompermissiondependency_custompermission_set', verbose_name='Custom Permission ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    required_custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, db_column='RequiredCustomPermissionId', related_name='custompermissiondependency_requiredcustompermission_set', verbose_name='Custom Permission ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'CustomPermissionDependency'
        verbose_name = 'Custom Permission Dependency'
        verbose_name_plural = 'Custom Permission Dependencies'
        # keyPrefix = '0PD'



class Dashboard(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    folder = models.ForeignKey('Folder', models.DO_NOTHING, db_column='FolderId', verbose_name='Folder ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Folder, User]
    folder_name = models.CharField(db_column='FolderName', max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=80, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Dashboard Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    left_size = models.CharField(db_column='LeftSize', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    middle_size = models.CharField(db_column='MiddleSize', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')], blank=True, null=True)
    right_size = models.CharField(db_column='RightSize', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dashboard_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='dashboard_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    running_user = models.ForeignKey('User', models.DO_NOTHING, db_column='RunningUserId', related_name='dashboard_runninguser_set', verbose_name='Running User ID', sf_read_only=models.READ_ONLY)
    title_color = models.IntegerField(db_column='TitleColor', sf_read_only=models.READ_ONLY)
    title_size = models.IntegerField(db_column='TitleSize', sf_read_only=models.READ_ONLY)
    text_color = models.IntegerField(db_column='TextColor', sf_read_only=models.READ_ONLY)
    background_start = models.IntegerField(db_column='BackgroundStart', verbose_name='Starting Color', sf_read_only=models.READ_ONLY)
    background_end = models.IntegerField(db_column='BackgroundEnd', verbose_name='Ending Color', sf_read_only=models.READ_ONLY)
    background_direction = models.CharField(db_column='BackgroundDirection', max_length=40, verbose_name='Background Fade Direction', sf_read_only=models.READ_ONLY, default='Diagonal', choices=[('TopToBottom', 'Top to Bottom'), ('LeftToRight', 'Left to Right'), ('Diagonal', 'Diagonal')])
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Dashboard Running User', sf_read_only=models.READ_ONLY, default='SpecifiedUser', choices=[('SpecifiedUser', 'Run as specified user'), ('LoggedInUser', 'Run as logged-in user'), ('MyTeamUser', 'Let authorized users change running user')])
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard_result_refreshed_date = models.CharField(db_column='DashboardResultRefreshedDate', max_length=256, verbose_name='Last refreshed for this user', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard_result_running_user = models.CharField(db_column='DashboardResultRunningUser', max_length=256, verbose_name='Running as', sf_read_only=models.READ_ONLY, blank=True, null=True)
    color_palette = models.CharField(db_column='ColorPalette', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Default', 'Default Palette'), ('gray', 'Gray Palette'), ('colorSafe', 'Color Safe Palette'), ('unity', 'Aurora Palette'), ('justice', 'Wildflowers Palette'), ('nightfall', 'Nightfall Palette'), ('sunrise', 'Sunrise Palette'), ('bluegrass', 'Bluegrass Palette'), ('tropic', 'Ocean Palette'), ('heat', 'Heat Palette'), ('dusk', 'Dusk Palette'), ('pond', 'Pond Palette'), ('watermelon', 'Watermelon Palette'), ('fire', 'Fire Palette'), ('water', 'Water Palette'), ('earth', 'Lake Palette'), ('accessible', 'Mineral(Accessible) Palette')], blank=True, null=True)
    chart_theme = models.CharField(db_column='ChartTheme', max_length=40, verbose_name='Chart Background', sf_read_only=models.READ_ONLY, choices=[('light', 'Light Background'), ('dark', 'Dark Background')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Dashboard'
        verbose_name = 'Dashboard'
        verbose_name_plural = 'Dashboards'
        # keyPrefix = '01Z'



class DashboardComponent(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Dashboard Component Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard = models.ForeignKey(Dashboard, models.DO_NOTHING, db_column='DashboardId', verbose_name='Dashboard ID', sf_read_only=models.READ_ONLY)
    custom_report = models.ForeignKey('Report', models.DO_NOTHING, db_column='CustomReportId', verbose_name='Report ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponent'
        verbose_name = 'Dashboard Component'
        verbose_name_plural = 'Dashboard Components'
        # keyPrefix = '01a'



class DashboardComponentFeed(models.Model):
    parent = models.ForeignKey(DashboardComponent, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dashboardcomponentfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='dashboardcomponentfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponentFeed'
        verbose_name = 'Dashboard Component Feed'
        verbose_name_plural = 'Dashboard Component Feed'
        # keyPrefix = None



class DashboardFeed(models.Model):
    parent = models.ForeignKey(Dashboard, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dashboardfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='dashboardfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardFeed'
        verbose_name = 'Dashboard Feed'
        verbose_name_plural = 'Dashboard Feed'
        # keyPrefix = None



class DataAssessmentFieldMetric(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Data Assessment Field Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dataassessmentfieldmetric_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='dataassessmentfieldmetric_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    data_assessment_metric = models.ForeignKey('DataAssessmentMetric', models.DO_NOTHING, db_column='DataAssessmentMetricId', verbose_name='Data Assessment Metric ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    field_name = models.CharField(db_column='FieldName', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_in_sync = models.IntegerField(db_column='NumMatchedInSync', verbose_name='Number of Matched Records that have the same value for this field as Data.com', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_different = models.IntegerField(db_column='NumMatchedDifferent', verbose_name='Number of Matched Records that have different value for this field than Data.com', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_blanks = models.IntegerField(db_column='NumMatchedBlanks', verbose_name='Number of Matched Records that have blanks for this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_unmatched_blanks = models.IntegerField(db_column='NumUnmatchedBlanks', verbose_name='Number of Unmatched Records that have blanks for this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentFieldMetric'
        verbose_name = 'Data Assessment Field Metric'
        verbose_name_plural = 'Data Assessment Field Metrics'
        # keyPrefix = '03Q'



class DataAssessmentMetric(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Data Assessment Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dataassessmentmetric_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='dataassessmentmetric_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    num_total = models.IntegerField(db_column='NumTotal', verbose_name='Total Number of Records to access', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_processed = models.IntegerField(db_column='NumProcessed', verbose_name='Number of Processed Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched = models.IntegerField(db_column='NumMatched', verbose_name='Number of Matched Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_different = models.IntegerField(db_column='NumMatchedDifferent', verbose_name='Number of Matched Records with different field values', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_unmatched = models.IntegerField(db_column='NumUnmatched', verbose_name='Number of Unmatched Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_duplicates = models.IntegerField(db_column='NumDuplicates', verbose_name='Number of Duplicates', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentMetric'
        verbose_name = 'Data Assessment Metric'
        verbose_name_plural = 'Data Assessment Metrics'
        # keyPrefix = '03P'



class DataAssessmentValueMetric(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Data Assessment Field Value Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dataassessmentvaluemetric_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='dataassessmentvaluemetric_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    data_assessment_field_metric = models.ForeignKey(DataAssessmentFieldMetric, models.DO_NOTHING, db_column='DataAssessmentFieldMetricId', verbose_name='Data Assessment Field Metric ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    field_value = models.CharField(db_column='FieldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_count = models.IntegerField(db_column='ValueCount', verbose_name='Number of times this value appears in this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentValueMetric'
        verbose_name = 'Data Assessment Field Value Metric'
        verbose_name_plural = 'Data Assessment Field Value Metrics'
        # keyPrefix = '03R'



class DataIntegrationRecordPurchasePermission(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dataintegrationrecordpurchasepermission_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='dataintegrationrecordpurchasepermission_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='dataintegrationrecordpurchasepermission_user_set', verbose_name='User ID')  # Master Detail Relationship *
    external_object = models.CharField(db_column='ExternalObject', max_length=255, verbose_name='Custom Object Definition ID', choices=[('ActiveCamp__CXA_Usage__c', None), ('ActiveCamp__Dashboard_Log__c', None), ('ActiveCamp__Error_Log__c', None), ('ActiveCamp__Setup_Configuration__mdt', None), ('ActiveCamp__Setup_Data__c', None), ('Dhruvsoft__O2O_Logs__c', None), ('Main_Product__c', None), ('Main_Product_Frequency__c', None), ('Main_Product_Info__c', None), ('pandadoc__DocStatus__c', None), ('pandadoc__Object_Tokens__c', None), ('pandadoc__PandaDocDocument__c', None), ('pandadoc__PandaDocLog__c', None), ('pandadoc__Pricing_Item_Mapping__c', None), ('pandadoc__Recipient_Map__c', None), ('pandadoc__TriggerSetting__c', None), ('Product_Category__c', None), ('Product_Category_Info__c', None)], blank=True, null=True)
    user_record_purchase_limit = models.IntegerField(db_column='UserRecordPurchaseLimit', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataIntegrationRecordPurchasePermission'
        verbose_name = 'DataIntegrationRecordPurchasePermission'
        verbose_name_plural = 'DataIntegrationRecordPurchasePermissions'
        # keyPrefix = '0Gy'



class DataStatistics(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='ExternalId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stat_type = models.CharField(db_column='StatType', max_length=255, verbose_name='StatType', sf_read_only=models.READ_ONLY, choices=[('RecordCount', 'RecordCount'), ('UserAccessRecordCount', 'UserAccessRecordCount'), ('DeletedCount', 'DeletedCount')], blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Too long choices skipped
    stat_value = models.IntegerField(db_column='StatValue', verbose_name='StatValue', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataStatistics'
        verbose_name = 'Data Statistics'
        verbose_name_plural = 'Data Statistics'
        # keyPrefix = '05a'



class DataType(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Data Type Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(db_column='DeveloperName', max_length=70, verbose_name='Data Type Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_complex = models.BooleanField(db_column='IsComplex', verbose_name='Is this Data Type Complex?', sf_read_only=models.READ_ONLY, default=False)
    context_service_data_type_id = models.CharField(db_column='ContextServiceDataTypeId', max_length=70, verbose_name='Service Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    context_wsdl_data_type_id = models.CharField(db_column='ContextWsdlDataTypeId', max_length=70, verbose_name='WSDL Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataType'
        verbose_name = 'Data Type'
        verbose_name_plural = 'Data Types'
        # keyPrefix = '4dt'



class DatacloudAddress(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='Data.com Address ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    address_line1 = models.CharField(db_column='AddressLine1', max_length=255, verbose_name=' Address Line 1 ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    address_line2 = models.CharField(db_column='AddressLine2', max_length=255, verbose_name=' Address Line 2 ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(db_column='City', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=255, verbose_name='Country/Territory', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=255, verbose_name='PostalCode', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.CharField(db_column='Latitude', max_length=11, verbose_name=' Latitude ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.CharField(db_column='Longitude', max_length=11, verbose_name='Longitude ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_accuracy_code = models.CharField(db_column='GeoAccuracyCode', max_length=15, verbose_name=' GeoAccuracy Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_accuracy_num = models.CharField(db_column='GeoAccuracyNum', max_length=3, verbose_name=' GeoAccuracy Num', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudAddress'
        verbose_name = 'Data.com Address'
        verbose_name_plural = 'Data.com Addresses'
        # keyPrefix = '07m'



class DeclinedEventRelation(models.Model):
    relation = models.ForeignKey(Calendar, models.DO_NOTHING, db_column='RelationId', verbose_name='Relation ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Contact, Lead, User]
    event = models.ForeignKey('Event', models.DO_NOTHING, db_column='EventId', verbose_name='Event ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(db_column='RespondedDate', verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='declinedeventrelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='declinedeventrelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(db_column='Type', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DeclinedEventRelation'
        verbose_name = 'Declined Event Relation'
        verbose_name_plural = 'Declined Event Relations'
        # keyPrefix = None



class DeleteEvent(models.Model):
    record = models.CharField(db_column='Record', max_length=18, verbose_name='Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_name = models.CharField(db_column='RecordName', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    deleted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='DeletedById', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)
    deleted_date = models.DateTimeField(db_column='DeletedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_name = models.CharField(db_column='SobjectName', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'DeleteEvent'
        verbose_name = 'Recycle Bin Item'
        verbose_name_plural = 'Recycle Bin'
        # keyPrefix = '00C'



class DhruvsoftO2OLogsHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('DhruvsoftO2OLogs', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Dhruvsoft__Description__c', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'O2O Logs Name'), ('Dhruvsoft__Opportunity__c', 'Opportunity'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Dhruvsoft__Status__c', 'Status')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Dhruvsoft__O2O_Logs__History'
        verbose_name = 'History: O2O Log'
        verbose_name_plural = 'History: O2O Log'
        # keyPrefix = None



class DhruvsoftO2OLogsShare(models.Model):
    parent = models.ForeignKey('DhruvsoftO2OLogs', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Dhruvsoft__O2O_Logs__Share'
        verbose_name = 'Share: O2O Log'
        verbose_name_plural = 'Share: O2O Log'
        # keyPrefix = None



class DhruvsoftO2OLogs(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='O2O Logs Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dhruvsofto2ologs_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='dhruvsofto2ologs_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(db_column='LastActivityDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dhruvsoft_description = models.TextField(db_column='Dhruvsoft__Description__c', verbose_name='Description', blank=True, null=True) 
    dhruvsoft_opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, db_column='Dhruvsoft__Opportunity__c', verbose_name='Opportunity', blank=True, null=True) 
    dhruvsoft_status = models.CharField(db_column='Dhruvsoft__Status__c', max_length=255, verbose_name='Status', choices=[('New', 'New'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Processing', 'Processing')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Dhruvsoft__O2O_Logs__c'
        verbose_name = 'O2O Log'
        verbose_name_plural = 'O2O Logs'
        # keyPrefix = 'a04'



class DhruvsoftOpptyProductOrderProductMapping(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey('Organization', models.DO_NOTHING, db_column='SetupOwnerId', verbose_name='Location', blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dhruvsoftopptyproductorderproductmapping_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='dhruvsoftopptyproductorderproductmapping_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    dhruvsoft_opportunity_productfield = models.CharField(db_column='Dhruvsoft__Opportunity_Productfield__c', max_length=255, verbose_name='Opportunity Productfield', blank=True, null=True) 
    dhruvsoft_opportunity_productlabel = models.CharField(db_column='Dhruvsoft__Opportunity_Productlabel__c', max_length=255, verbose_name='Opportunity Productlabel', blank=True, null=True) 
    dhruvsoft_opty_product_data_type = models.CharField(db_column='Dhruvsoft__OptyProduct_DataType__c', max_length=25, verbose_name='OptyProduct DataType', blank=True, null=True) 
    dhruvsoft_opty_product_size = models.CharField(db_column='Dhruvsoft__OptyProduct_Size__c', max_length=25, verbose_name='OptyProduct Size', blank=True, null=True) 
    dhruvsoft_order_product_data_type = models.CharField(db_column='Dhruvsoft__OrderProduct_DataType__c', max_length=25, verbose_name='OrderProduct DataType', blank=True, null=True) 
    dhruvsoft_order_product_size = models.CharField(db_column='Dhruvsoft__OrderProduct_Size__c', max_length=25, verbose_name='OrderProduct Size', blank=True, null=True) 
    dhruvsoft_order_productfield = models.CharField(db_column='Dhruvsoft__Order_Productfield__c', max_length=255, verbose_name='Order Productfield', blank=True, null=True) 
    dhruvsoft_order_productlabel = models.CharField(db_column='Dhruvsoft__Order_Productlabel__c', max_length=255, verbose_name='Order Productlabel', blank=True, null=True) 
    dhruvsoft_product_map_default_value = models.CharField(db_column='Dhruvsoft__ProductMapDefaultValue__c', max_length=255, verbose_name='ProductMapDefaultValue', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Dhruvsoft__OpptyProductOrderProductMapping__c'
        verbose_name = 'OpptyProductOrderProductMapping'
        verbose_name_plural = 'OpptyProductOrderProductMapping'
        # keyPrefix = 'a07'



class DialerCallUsage(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='DialerCallUsage Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='dialercallusage_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='dialercallusage_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    voice_call = models.OneToOneField('VoiceCall', models.DO_NOTHING, db_column='VoiceCallId', verbose_name='Voice Call ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    duration_in_seconds = models.IntegerField(db_column='DurationInSeconds', verbose_name='Call Duration', sf_read_only=models.READ_ONLY)
    from_country = models.CharField(db_column='FromCountry', max_length=255, sf_read_only=models.READ_ONLY, choices=[('US', 'United States of America'), ('CA', 'Canada'), ('IE', 'Ireland'), ('FR', 'France'), ('DE', 'Germany'), ('GB', 'United Kingdom'), ('BE', 'Belgium'), ('DK', 'Denmark'), ('FI', 'Finland'), ('IT', 'Italy'), ('NL', 'Netherlands'), ('ES', 'Spain'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('LU', 'Luxembourg'), ('NO', 'Norway'), ('PT', 'Portugal')])
    to_country = models.CharField(db_column='ToCountry', max_length=255, sf_read_only=models.READ_ONLY, choices=[('US', 'United States of America'), ('CA', 'Canada'), ('IE', 'Ireland'), ('FR', 'France'), ('DE', 'Germany'), ('GB', 'United Kingdom'), ('BE', 'Belgium'), ('DK', 'Denmark'), ('FI', 'Finland'), ('IT', 'Italy'), ('NL', 'Netherlands'), ('ES', 'Spain'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('LU', 'Luxembourg'), ('NO', 'Norway'), ('PT', 'Portugal')])
    vendor_type = models.CharField(db_column='VendorType', max_length=255, verbose_name='VendorType', sf_read_only=models.READ_ONLY, choices=[('Twilio', 'Twilio'), ('Custom', 'Custom'), ('TwilioTrial', 'TwilioTrial'), ('ContactCenter', 'ContactCenter')])
    call_type = models.CharField(db_column='CallType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound'), ('Coach', 'Coach'), ('Bridge', 'Bridge'), ('Transfer', 'Transfer'), ('Callback', 'Callback')])
    call_start_date_time = models.DateTimeField(db_column='CallStartDateTime', verbose_name='Call Started', sf_read_only=models.READ_ONLY)
    to_phone_number = models.CharField(db_column='ToPhoneNumber', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    from_phone_number = models.CharField(db_column='FromPhoneNumber', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DialerCallUsage'
        verbose_name = 'DialerCallUsage'
        verbose_name_plural = 'DialerCallUsages'
        # keyPrefix = '0gX'



class DialerCallUsageShare(models.Model):
    parent = models.ForeignKey(DialerCallUsage, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'DialerCallUsageShare'
        verbose_name = 'DialerCallUsage Share'
        verbose_name_plural = 'DialerCallUsage Share'
        # keyPrefix = None



class Document(models.Model):
    folder = models.ForeignKey('Folder', models.DO_NOTHING, db_column='FolderId', verbose_name='Folder ID')  # Reference to tables [Folder, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Document Name')
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Document Unique Name', default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_type = models.CharField(db_column='ContentType', max_length=120, verbose_name='MIME Type', blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, verbose_name='File Extension', blank=True, null=True)
    is_public = models.BooleanField(db_column='IsPublic', verbose_name='Externally Available', default=False)
    body_length = models.IntegerField(db_column='BodyLength', sf_read_only=models.READ_ONLY)
    body = models.TextField(db_column='Body', blank=True, null=True)
    url = models.CharField(db_column='Url', max_length=255, blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    keywords = models.CharField(db_column='Keywords', max_length=255, blank=True, null=True)
    is_internal_use_only = models.BooleanField(db_column='IsInternalUseOnly', verbose_name='Internal Use Only', default=False)
    author = models.ForeignKey('User', models.DO_NOTHING, db_column='AuthorId', related_name='document_author_set', verbose_name='Author ID', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='document_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='document_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_body_searchable = models.BooleanField(db_column='IsBodySearchable', verbose_name='Document Content Searchable', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Document'
        verbose_name = 'Document'
        verbose_name_plural = 'Documents'
        # keyPrefix = '015'



class DocumentAttachmentMap(models.Model):
    parent = models.ForeignKey('EmailTemplate', models.DO_NOTHING, db_column='ParentId', verbose_name='Entity ID')  # Master Detail Relationship *
    document = models.ForeignKey(Document, models.DO_NOTHING, db_column='DocumentId', verbose_name='Document ID')
    document_sequence = models.IntegerField(db_column='DocumentSequence', verbose_name='Attachment Sequence')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'DocumentAttachmentMap'
        verbose_name = 'Document Entity Map'
        verbose_name_plural = 'Document Entity Map'
        # keyPrefix = '05X'



class Domain(models.Model):
    domain_type = models.CharField(db_column='DomainType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('DNS', 'Domain Name System (DNS)')])
    domain = models.CharField(db_column='Domain', max_length=765, verbose_name='Domain Name', sf_read_only=models.READ_ONLY)
    options_hsts_headers = models.BooleanField(db_column='OptionsHstsHeaders', verbose_name='Enable Strict Transport Security headers', sf_read_only=models.READ_ONLY)
    options_hsts_preload = models.BooleanField(db_column='OptionsHstsPreload', verbose_name='Allow Strict Transport Security preloading', sf_read_only=models.READ_ONLY)
    cname_target = models.CharField(db_column='CnameTarget', max_length=765, verbose_name='CNAME Target', sf_read_only=models.READ_ONLY, blank=True, null=True)
    https_option = models.CharField(db_column='HttpsOption', max_length=40, verbose_name='Current HTTPS Option', sf_read_only=models.READ_ONLY, choices=[('CdnPartner', 'Content Delivery Network (CDN) partner of Salesforce'), ('SitesRuntime', 'Salesforce Cloud'), ('ExternalHttps', 'Domain is served by an external host'), ('NoHttps', 'No HTTPS (Temporary)'), ('Community', 'Community Force.com Subdomain'), ('CommunityAlt', 'Community My Domain'), ('SitesAlt', 'Salesforce Sites My Domain'), ('Sites', 'Salesforce Sites Subdomain'), ('OrgDomain', 'My Domain')], blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='domain_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='domain_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Domain'
        verbose_name = 'Domain'
        verbose_name_plural = 'Domains'
        # keyPrefix = '0I4'



class DuplicateRecordItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Duplicate Record Item Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='duplicaterecorditem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='duplicaterecorditem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    duplicate_record_set = models.ForeignKey('DuplicateRecordSet', models.DO_NOTHING, db_column='DuplicateRecordSetId', verbose_name='Duplicate Record Set ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    record = models.ForeignKey(Account, models.DO_NOTHING, db_column='RecordId', verbose_name='Record ID')  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Contact, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, In_App_Checklist_Settings__c, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Product_Category_Info__c, Product_Category__c, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRecordItem'
        verbose_name = 'Duplicate Record Item'
        verbose_name_plural = 'Duplicate Record Items'
        # keyPrefix = '0GL'



class DuplicateRecordSet(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Duplicate Record Set Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='duplicaterecordset_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='duplicaterecordset_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    duplicate_rule = models.ForeignKey('DuplicateRule', models.DO_NOTHING, db_column='DuplicateRuleId', verbose_name='Duplicate Rule ID', blank=True, null=True)
    record_count = models.IntegerField(db_column='RecordCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRecordSet'
        verbose_name = 'Duplicate Record Set'
        verbose_name_plural = 'Duplicate Record Sets'
        # keyPrefix = '0GK'



class DuplicateRule(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Contact', None), ('Lead', None)])
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Object Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Rule Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='duplicaterule_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='duplicaterule_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    sobject_subtype = models.CharField(db_column='SobjectSubtype', max_length=255, verbose_name='Object Subtype', sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRule'
        verbose_name = 'Duplicate Rule'
        verbose_name_plural = 'Duplicate Rules'
        # keyPrefix = '0Bm'



class EmailCapture(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emailcapture_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emailcapture_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    to_pattern = models.CharField(db_column='ToPattern', max_length=255, verbose_name='To', sf_read_only=models.NOT_UPDATEABLE)
    from_pattern = models.CharField(db_column='FromPattern', max_length=255, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    sender = models.CharField(db_column='Sender', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    recipient = models.CharField(db_column='Recipient', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    capture_date = models.DateTimeField(db_column='CaptureDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    raw_message_length = models.IntegerField(db_column='RawMessageLength', sf_read_only=models.READ_ONLY, blank=True, null=True)
    raw_message = models.TextField(db_column='RawMessage', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailCapture'
        verbose_name = 'EmailCapture'
        verbose_name_plural = 'Email Captures'
        # keyPrefix = '06F'



class EmailDomainFilter(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emaildomainfilter_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emaildomainfilter_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    priority_number = models.IntegerField(db_column='PriorityNumber', verbose_name='Priority', blank=True, null=True)
    email_relay = models.ForeignKey('EmailRelay', models.DO_NOTHING, db_column='EmailRelayId', verbose_name='Email Relay ID')
    to_domain = models.TextField(db_column='ToDomain', verbose_name='Recipient Domain', blank=True, null=True)
    from_domain = models.TextField(db_column='FromDomain', verbose_name='Sender Domain', blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    class Meta(models.Model.Meta):
        db_table = 'EmailDomainFilter'
        verbose_name = 'Email Domain Filter'
        verbose_name_plural = 'Email Domain Filter'
        # keyPrefix = '0T6'



class EmailDomainKey(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emaildomainkey_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emaildomainkey_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    selector = models.CharField(db_column='Selector', max_length=63)
    domain = models.CharField(db_column='Domain', max_length=255)
    domain_match = models.CharField(db_column='DomainMatch', max_length=255, choices=[('DomainOnly', 'Exact domain only'), ('SubdomainsOnly', 'Subdomains of the domain only'), ('DomainAndSubdomains', 'Exact domain and subdomains')])
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    alternate_selector = models.CharField(db_column='AlternateSelector', max_length=63, blank=True, null=True)
    txt_record_name = models.CharField(db_column='TxtRecordName', max_length=255, verbose_name='TXT Record Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    alternate_txt_record_name = models.CharField(db_column='AlternateTxtRecordName', max_length=255, verbose_name='Alternate TXT Record Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    txt_records_publish_state = models.CharField(db_column='TxtRecordsPublishState', max_length=255, verbose_name='TXT Record Status', sf_read_only=models.READ_ONLY, choices=[('Published', None), ('Publishing in progress', None), ('Publishing failed', None)], blank=True, null=True)
    key_size = models.IntegerField(db_column='KeySize', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    public_key = models.TextField(db_column='PublicKey', blank=True, null=True)
    alternate_public_key = models.TextField(db_column='AlternatePublicKey', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailDomainKey'
        verbose_name = 'Email Domain Key'
        verbose_name_plural = 'Email Domain Keys'
        # keyPrefix = '09P'



class EmailMessage(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, db_column='ParentId', verbose_name='Case ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    activity = models.ForeignKey('Task', models.DO_NOTHING, db_column='ActivityId', verbose_name='Activity ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emailmessage_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emailmessage_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    text_body = models.TextField(db_column='TextBody', blank=True, null=True)
    html_body = models.TextField(db_column='HtmlBody', verbose_name='HTML Body', blank=True, null=True)
    headers = models.TextField(db_column='Headers', blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=3000, blank=True, null=True)
    from_name = models.CharField(db_column='FromName', max_length=1000, blank=True, null=True)
    from_address = models.EmailField(db_column='FromAddress', blank=True, null=True)
    validated_from_address = models.CharField(db_column='ValidatedFromAddress', max_length=255, verbose_name='From', choices=[('thayes@trydownstream.io', 'Tate Hayes <thayes@trydownstream.io>'), ('bugs@trydownstream.io', 'Technical Support <bugs@trydownstream.io>'), ('ap@trydownstream.io', 'ap@trydownstream.io <ap@trydownstream.io>'), ('billing@trydownstream.io', 'billing@trydownstream.io <billing@trydownstream.io>'), ('careers@trydownstream.io', 'careers@trydownstream.io <careers@trydownstream.io>'), ('info@trydownstream.io', 'info@trydownstream.io <info@trydownstream.io>'), ('support@trydownstream.io', 'support@trydownstream.io <support@trydownstream.io>')], blank=True, null=True)
    to_address = models.CharField(db_column='ToAddress', max_length=4000, blank=True, null=True)
    cc_address = models.CharField(db_column='CcAddress', max_length=4000, verbose_name='CC Address', blank=True, null=True)
    bcc_address = models.CharField(db_column='BccAddress', max_length=4000, verbose_name='BCC Address', blank=True, null=True)
    incoming = models.BooleanField(db_column='Incoming', verbose_name='Is Incoming', sf_read_only=models.NOT_UPDATEABLE, default=False)
    has_attachment = models.BooleanField(db_column='HasAttachment', sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(db_column='Status', max_length=40, choices=[('0', 'New'), ('1', 'Read'), ('2', 'Replied'), ('3', 'Sent'), ('4', 'Forwarded'), ('5', 'Draft')])
    message_date = models.DateTimeField(db_column='MessageDate', blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reply_to_email_message = models.ForeignKey('self', models.DO_NOTHING, db_column='ReplyToEmailMessageId', verbose_name='Email Message ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_private_draft = models.BooleanField(db_column='IsPrivateDraft', sf_read_only=models.NOT_UPDATEABLE, default=False)
    is_externally_visible = models.BooleanField(db_column='IsExternallyVisible', sf_read_only=models.READ_ONLY, default=False)
    message_identifier = models.CharField(db_column='MessageIdentifier', max_length=765, verbose_name='Message ID', blank=True, null=True)
    thread_identifier = models.CharField(db_column='ThreadIdentifier', max_length=765, verbose_name='Thread ID', blank=True, null=True)
    is_client_managed = models.BooleanField(db_column='IsClientManaged', sf_read_only=models.NOT_UPDATEABLE, default=False)
    related_to = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelatedToId', verbose_name='Related To ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, ChangeRequest, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Entitlement, Image, Incident, ListEmail, Opportunity, Order, Problem, ProcessException, Product2, Quote, ServiceContract, ServiceResource, Solution, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate]
    is_tracked = models.BooleanField(db_column='IsTracked', default=False)
    is_opened = models.BooleanField(db_column='IsOpened', verbose_name='Opened?', sf_read_only=models.READ_ONLY, default=False)
    first_opened_date = models.DateTimeField(db_column='FirstOpenedDate', verbose_name='First Opened', blank=True, null=True)
    last_opened_date = models.DateTimeField(db_column='LastOpenedDate', verbose_name='Last Opened', blank=True, null=True)
    is_bounced = models.BooleanField(db_column='IsBounced', verbose_name='Bounced?', default=False)
    email_template = models.ForeignKey('EmailTemplate', models.DO_NOTHING, db_column='EmailTemplateId', verbose_name='Email Template ID', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailMessage'
        verbose_name = 'Email Message'
        verbose_name_plural = 'Email Messages'
        # keyPrefix = '02s'



class EmailMessageRelation(models.Model):
    email_message = models.ForeignKey(EmailMessage, models.DO_NOTHING, db_column='EmailMessageId', verbose_name='Email Message ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    relation = models.ForeignKey(Contact, models.DO_NOTHING, db_column='RelationId', verbose_name='Relation ID', blank=True, null=True)  # Reference to tables [Contact, Lead, User] Master Detail Relationship *
    relation_type = models.CharField(db_column='RelationType', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('ToAddress', 'To Address'), ('CcAddress', 'Cc Address'), ('BccAddress', 'Bcc Address'), ('FromAddress', 'From Address'), ('OtherAddress', 'Other Address')])
    relation_address = models.CharField(db_column='RelationAddress', max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relation_object_type = models.CharField(db_column='RelationObjectType', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EmailMessageRelation'
        verbose_name = 'Email Message Relation'
        verbose_name_plural = 'Email Message Relations'
        # keyPrefix = '0CZ'



class EmailRelay(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emailrelay_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emailrelay_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    host = models.CharField(db_column='Host', max_length=255)
    port = models.CharField(db_column='Port', max_length=255, choices=[('25', None), ('587', None), ('10025', None), ('11025', None)])
    tls_setting = models.CharField(db_column='TlsSetting', max_length=255, verbose_name='TLS Setting', choices=[('Off', None), ('Preferred', None), ('Required', None), ('PreferredVerify', None), ('RequiredVerify', None)])
    is_require_auth = models.BooleanField(db_column='IsRequireAuth', verbose_name='Enable SMTP Auth', default=False)
    username = models.CharField(db_column='Username', max_length=100, blank=True, null=True)
    password = models.CharField(db_column='Password', max_length=100, blank=True, null=True)
    auth_type = models.CharField(db_column='AuthType', max_length=255, choices=[('PLAIN', None), ('LOGIN', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailRelay'
        verbose_name = 'Email Relay'
        verbose_name_plural = 'Email Relay'
        # keyPrefix = '26Z'



class EmailServicesAddress(models.Model):
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    local_part = models.CharField(db_column='LocalPart', max_length=64, verbose_name='Email address')
    email_domain_name = models.CharField(db_column='EmailDomainName', max_length=255, verbose_name='Email address domain', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authorized_senders = models.TextField(db_column='AuthorizedSenders', verbose_name='Accept Email From', blank=True, null=True)
    run_as_user = models.ForeignKey('User', models.DO_NOTHING, db_column='RunAsUserId', related_name='emailservicesaddress_runasuser_set', verbose_name='User ID')
    function = models.ForeignKey('EmailServicesFunction', models.DO_NOTHING, db_column='FunctionId', verbose_name='Service ID')
    developer_name = models.CharField(db_column='DeveloperName', max_length=25, verbose_name='Email Address Name', default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emailservicesaddress_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emailservicesaddress_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesAddress'
        verbose_name = 'Email Services Address'
        verbose_name_plural = 'Email Services Address'
        # keyPrefix = '093'



class EmailServicesFunction(models.Model):
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    function_name = models.CharField(db_column='FunctionName', max_length=64, verbose_name='Email Service Name')
    authorized_senders = models.TextField(db_column='AuthorizedSenders', verbose_name='Accept Email From', blank=True, null=True)
    is_authentication_required = models.BooleanField(db_column='IsAuthenticationRequired', verbose_name='Advanced Email Security Settings', default=False)
    is_tls_required = models.BooleanField(db_column='IsTlsRequired', verbose_name='TLS Required', default=False)
    attachment_option = models.CharField(db_column='AttachmentOption', max_length=40, verbose_name='Accept Attachments', default='All', choices=[('None', 'None'), ('TextOnly', 'Text attachments only'), ('BinaryOnly', 'Binary attachments only'), ('All', 'All'), ('NoContent', 'Attachment names only, no content')])
    over_limit_action = models.CharField(db_column='OverLimitAction', max_length=40, verbose_name='Over Email Rate Limit Action', default='UseSystemDefault', choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    function_inactive_action = models.CharField(db_column='FunctionInactiveAction', max_length=40, verbose_name='Deactivated Email Service Action', default='UseSystemDefault', choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    address_inactive_action = models.CharField(db_column='AddressInactiveAction', max_length=40, verbose_name='Deactivated Email Address Action', default='UseSystemDefault', choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    authentication_failure_action = models.CharField(db_column='AuthenticationFailureAction', max_length=40, verbose_name='Unauthenticated Sender Action', default='UseSystemDefault', choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    authorization_failure_action = models.CharField(db_column='AuthorizationFailureAction', max_length=40, verbose_name='Unauthorized Sender Action', default='UseSystemDefault', choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    is_error_routing_enabled = models.BooleanField(db_column='IsErrorRoutingEnabled', verbose_name='Enable Error Routing', default=False)
    error_routing_address = models.EmailField(db_column='ErrorRoutingAddress', verbose_name='Route Error Emails to This Email Address', blank=True, null=True)
    is_text_attachments_as_binary = models.BooleanField(db_column='IsTextAttachmentsAsBinary', verbose_name='Convert Text Attachments to Binary Attachments', default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emailservicesfunction_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emailservicesfunction_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesFunction'
        verbose_name = 'Email Service'
        verbose_name_plural = 'Email Services'
        # keyPrefix = '091'



class EmailStatus(models.Model):
    task = models.ForeignKey('Task', models.DO_NOTHING, db_column='TaskId', verbose_name='Activity ID', sf_read_only=models.READ_ONLY)
    who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='WhoId', verbose_name='Name ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emailstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emailstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    times_opened = models.IntegerField(db_column='TimesOpened', verbose_name='# Times Opened', sf_read_only=models.READ_ONLY)
    first_open_date = models.DateTimeField(db_column='FirstOpenDate', verbose_name='Date Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_open_date = models.DateTimeField(db_column='LastOpenDate', verbose_name='Last Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_template_name = models.CharField(db_column='EmailTemplateName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailStatus'
        verbose_name = 'Email Status'
        verbose_name_plural = 'Email Status'
        # keyPrefix = '018'



class EmailTemplate(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Email Template Name')
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Template Unique Name', default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='emailtemplate_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    folder = models.ForeignKey('Folder', models.DO_NOTHING, db_column='FolderId', verbose_name='Folder ID')  # Reference to tables [Folder, Organization, User]
    folder_name = models.CharField(db_column='FolderName', max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    brand_template = models.ForeignKey(BrandTemplate, models.DO_NOTHING, db_column='BrandTemplateId', verbose_name='Letterhead ID', blank=True, null=True)
    enhanced_letterhead = models.ForeignKey('EnhancedLetterhead', models.DO_NOTHING, db_column='EnhancedLetterheadId', verbose_name='Enhanced Letterhead ID', blank=True, null=True)
    template_style = models.CharField(db_column='TemplateStyle', max_length=40, verbose_name='Style', sf_read_only=models.NOT_UPDATEABLE, choices=[('none', 'No Email Layout'), ('freeForm', 'Free Form Letter'), ('formalLetter', 'Formal Letter'), ('promotionRight', 'Promotion (Right)'), ('promotionLeft', 'Promotion (Left)'), ('newsletter', 'Newsletter'), ('products', 'Products')])
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Available For Use', default=False)
    template_type = models.CharField(db_column='TemplateType', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('text', 'Text'), ('html', 'HTML'), ('custom', 'Custom'), ('visualforce', 'Visualforce')])
    encoding = models.CharField(db_column='Encoding', max_length=40, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')], blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=4000, blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=1000, blank=True, null=True)
    html_value = models.TextField(db_column='HtmlValue', verbose_name='HTML Value', blank=True, null=True)
    body = models.TextField(db_column='Body', verbose_name='Email Body', blank=True, null=True)
    times_used = models.IntegerField(db_column='TimesUsed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_used_date = models.DateTimeField(db_column='LastUsedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='emailtemplate_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='emailtemplate_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='API Version', blank=True, null=True)
    markup = models.TextField(db_column='Markup', blank=True, null=True)
    ui_type = models.CharField(db_column='UiType', max_length=40, verbose_name='UI Type', default=models.DEFAULTED_ON_CREATE, choices=[('Aloha', 'Aloha'), ('SFX', 'SFX'), ('SFX_Sample', 'SFXSample')], blank=True, null=True)
    related_entity_type = models.CharField(db_column='RelatedEntityType', max_length=40, verbose_name='Custom Object Definition ID', blank=True, null=True)  # Too long choices skipped
    is_builder_content = models.BooleanField(db_column='IsBuilderContent', verbose_name='Made in Email Template Builder', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EmailTemplate'
        verbose_name = 'Email Template'
        verbose_name_plural = 'Email Templates'
        # keyPrefix = '00X'



class EnhancedLetterhead(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='enhancedletterhead_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='enhancedletterhead_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    letterhead_header = models.TextField(db_column='LetterheadHeader', verbose_name='Header', blank=True, null=True)
    letterhead_footer = models.TextField(db_column='LetterheadFooter', verbose_name='Footer', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EnhancedLetterhead'
        verbose_name = 'Enhanced Letterhead'
        verbose_name_plural = 'Enhanced Letterheads'
        # keyPrefix = '0Rn'



class EnhancedLetterheadFeed(models.Model):
    parent = models.ForeignKey(EnhancedLetterhead, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='enhancedletterheadfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='enhancedletterheadfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EnhancedLetterheadFeed'
        verbose_name = 'Enhanced Letterhead Feed'
        verbose_name_plural = 'Enhanced Letterhead Feed'
        # keyPrefix = None



class Entitlement(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Entitlement Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='entitlement_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='entitlement_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID')  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, default='Phone Support', choices=[('Phone Support', 'Phone Support'), ('Web Support', 'Web Support')], blank=True, null=True)
    service_contract = models.ForeignKey('ServiceContract', models.DO_NOTHING, db_column='ServiceContractId', verbose_name='Service Contract ID', blank=True, null=True)
    contract_line_item = models.ForeignKey(ContractLineItem, models.DO_NOTHING, db_column='ContractLineItemId', verbose_name='Contract Line Item ID', blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', blank=True, null=True)
    sla_process = models.ForeignKey('SlaProcess', models.DO_NOTHING, db_column='SlaProcessId', verbose_name='Entitlement Process ID', blank=True, null=True)
    business_hours = models.ForeignKey(BusinessHours, models.DO_NOTHING, db_column='BusinessHoursId', verbose_name='Business Hours ID', blank=True, null=True)
    is_per_incident = models.BooleanField(db_column='IsPerIncident', verbose_name='Per Incident', default=False)
    cases_per_entitlement = models.IntegerField(db_column='CasesPerEntitlement', blank=True, null=True)
    remaining_cases = models.IntegerField(db_column='RemainingCases', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Expired', 'Expired')], blank=True, null=True)
    work_orders_per_entitlement = models.IntegerField(db_column='WorkOrdersPerEntitlement', blank=True, null=True)
    remaining_work_orders = models.IntegerField(db_column='RemainingWorkOrders', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Entitlement'
        verbose_name = 'Entitlement'
        verbose_name_plural = 'Entitlements'
        # keyPrefix = '550'



class EntitlementContact(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Entitlement Contact', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='entitlementcontact_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='entitlementcontact_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    entitlement = models.ForeignKey(Entitlement, models.DO_NOTHING, db_column='EntitlementId', verbose_name='Entitlement ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'EntitlementContact'
        verbose_name = 'Entitlement Contact'
        verbose_name_plural = 'Entitlement Contacts'
        # keyPrefix = '0E7'



class EntitlementFeed(models.Model):
    parent = models.ForeignKey(Entitlement, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='entitlementfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='entitlementfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EntitlementFeed'
        verbose_name = 'Entitlement Feed'
        verbose_name_plural = 'Entitlement Feed'
        # keyPrefix = None



class EntitlementHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    entitlement = models.ForeignKey(Entitlement, models.DO_NOTHING, db_column='EntitlementId', verbose_name='Entitlement ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('Asset', 'Asset Name'), ('BusinessHours', 'Business Hours'), ('CasesPerEntitlement', 'Cases Per Entitlement'), ('ContractLineItem', 'Contract Line Item'), ('created', 'Created.'), ('EndDate', 'End Date'), ('Name', 'Entitlement Name'), ('SlaProcess', 'Entitlement Process'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('IsPerIncident', 'Per Incident'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RemainingCases', 'Remaining Cases'), ('RemainingWorkOrders', 'Remaining Work Orders'), ('ServiceContract', 'Service Contract'), ('StartDate', 'Start Date'), ('Status', 'Status'), ('StatusIndicator', 'Status Icon'), ('Type', 'Type'), ('WorkOrdersPerEntitlement', 'Work Orders Per Entitlement')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EntitlementHistory'
        verbose_name = 'Entitlement History'
        verbose_name_plural = 'Entitlement History'
        # keyPrefix = None



class EntitlementTemplate(models.Model):
    name = models.CharField(db_column='Name', max_length=120, verbose_name='Entitlement Template Name')
    business_hours = models.ForeignKey(BusinessHours, models.DO_NOTHING, db_column='BusinessHoursId', verbose_name='Business Hours ID', blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, default='Phone Support', choices=[('Phone Support', 'Phone Support'), ('Web Support', 'Web Support')], blank=True, null=True)
    sla_process = models.ForeignKey('SlaProcess', models.DO_NOTHING, db_column='SlaProcessId', verbose_name='Entitlement Process ID', blank=True, null=True)
    is_per_incident = models.BooleanField(db_column='IsPerIncident', verbose_name='Per Incident', default=False)
    cases_per_entitlement = models.IntegerField(db_column='CasesPerEntitlement', blank=True, null=True)
    term = models.IntegerField(db_column='Term', verbose_name='Term (Days)', blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='entitlementtemplate_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='entitlementtemplate_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EntitlementTemplate'
        verbose_name = 'Entitlement Template'
        verbose_name_plural = 'Entitlement Template'
        # keyPrefix = '551'



class EntityDefinition(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    qualified_api_name = models.CharField(db_column='QualifiedApiName', max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(db_column='DeveloperName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(db_column='Label', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    plural_label = models.CharField(db_column='PluralLabel', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_compact_layout_id = models.CharField(db_column='DefaultCompactLayoutId', max_length=70, verbose_name='Compact Layout ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_customizable = models.BooleanField(db_column='IsCustomizable', verbose_name='Is Customizable?', sf_read_only=models.READ_ONLY, default=False)
    is_apex_triggerable = models.BooleanField(db_column='IsApexTriggerable', verbose_name='Is Apex Triggerable?', sf_read_only=models.READ_ONLY, default=False)
    is_workflow_enabled = models.BooleanField(db_column='IsWorkflowEnabled', verbose_name='Is Workflow Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_process_enabled = models.BooleanField(db_column='IsProcessEnabled', verbose_name='Is Approval Process Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(db_column='IsCompactLayoutable', verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    key_prefix = models.CharField(db_column='KeyPrefix', max_length=3, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_custom_setting = models.BooleanField(db_column='IsCustomSetting', verbose_name='Is Custom Setting?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(db_column='IsDeprecatedAndHidden', verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_replicateable = models.BooleanField(db_column='IsReplicateable', verbose_name='Is Replicateable?', sf_read_only=models.READ_ONLY, default=False)
    is_retrieveable = models.BooleanField(db_column='IsRetrieveable', verbose_name='Is Retrieveable?', sf_read_only=models.READ_ONLY, default=False)
    is_search_layoutable = models.BooleanField(db_column='IsSearchLayoutable', verbose_name='Is Search Layoutable?', sf_read_only=models.READ_ONLY, default=False)
    is_searchable = models.BooleanField(db_column='IsSearchable', verbose_name='Is Searchable?', sf_read_only=models.READ_ONLY, default=False)
    is_triggerable = models.BooleanField(db_column='IsTriggerable', verbose_name='Is Triggerable?', sf_read_only=models.READ_ONLY, default=False)
    is_id_enabled = models.BooleanField(db_column='IsIdEnabled', verbose_name='Is Id Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_creatable = models.BooleanField(db_column='IsEverCreatable', verbose_name='Is Ever Creatable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_updatable = models.BooleanField(db_column='IsEverUpdatable', verbose_name='Is Ever Updatable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_deletable = models.BooleanField(db_column='IsEverDeletable', verbose_name='Is Ever Deletable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_feed_enabled = models.BooleanField(db_column='IsFeedEnabled', verbose_name='Is Feed Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_queryable = models.BooleanField(db_column='IsQueryable', verbose_name='Queryable', sf_read_only=models.READ_ONLY, default=False)
    is_mru_enabled = models.BooleanField(db_column='IsMruEnabled', verbose_name='Is MRU List Functionality Enabled for This Object?', sf_read_only=models.READ_ONLY, default=False)
    detail_url = models.URLField(db_column='DetailUrl', verbose_name='Detail URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    edit_url = models.URLField(db_column='EditUrl', verbose_name='Edit URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_url = models.URLField(db_column='NewUrl', verbose_name='New URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    edit_definition_url = models.URLField(db_column='EditDefinitionUrl', verbose_name='Edit Definition URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    help_setting_page_name = models.CharField(db_column='HelpSettingPageName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    help_setting_page_url = models.URLField(db_column='HelpSettingPageUrl', verbose_name='Help Setting Page URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    running_user_entity_access_id = models.CharField(db_column='RunningUserEntityAccessId', max_length=150, verbose_name='User Entity Access ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    publisher_id = models.CharField(db_column='PublisherId', max_length=70, verbose_name='Publisher ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_layoutable = models.BooleanField(db_column='IsLayoutable', verbose_name='Is Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    record_types_supported = models.XJSONField(db_column='RecordTypesSupported', sf_read_only=models.READ_ONLY, blank=True, null=True)
    internal_sharing_model = models.CharField(db_column='InternalSharingModel', max_length=255, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')])
    external_sharing_model = models.CharField(db_column='ExternalSharingModel', max_length=255, verbose_name='External sharing Model', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')])
    has_subtypes = models.BooleanField(db_column='HasSubtypes', verbose_name='Has Subtypes?', sf_read_only=models.READ_ONLY, default=False)
    is_subtype = models.BooleanField(db_column='IsSubtype', verbose_name='Is Subtype?', sf_read_only=models.READ_ONLY, default=False)
    is_auto_activity_capture_enabled = models.BooleanField(db_column='IsAutoActivityCaptureEnabled', verbose_name='Is Einstein Activity Capture Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_interface = models.BooleanField(db_column='IsInterface', verbose_name='Is Interface?', sf_read_only=models.READ_ONLY, default=False)
    implements_interfaces = models.CharField(db_column='ImplementsInterfaces', max_length=255, verbose_name='Interfaces Implemented', sf_read_only=models.READ_ONLY, blank=True, null=True)
    implemented_by = models.CharField(db_column='ImplementedBy', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    extends_interfaces = models.CharField(db_column='ExtendsInterfaces', max_length=255, verbose_name='Interfaces Extended', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extended_by = models.CharField(db_column='ExtendedBy', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_implementation = models.CharField(db_column='DefaultImplementation', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EntityDefinition'
        verbose_name = 'Entity Definition'
        verbose_name_plural = 'Entity Definitions'
        # keyPrefix = '4ie'



class EntityMilestone(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Object Milestone Name', sf_read_only=models.NOT_CREATEABLE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='entitymilestone_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='entitymilestone_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent_entity = models.ForeignKey('Incident', models.DO_NOTHING, db_column='ParentEntityId', verbose_name=' ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Incident, WorkOrder] Master Detail Relationship *
    start_date = models.DateTimeField(db_column='StartDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    target_date = models.DateTimeField(db_column='TargetDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    completion_date = models.DateTimeField(db_column='CompletionDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    sla_process = models.ForeignKey('SlaProcess', models.DO_NOTHING, db_column='SlaProcessId', verbose_name='Entitlement Process ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    milestone_type = models.ForeignKey('MilestoneType', models.DO_NOTHING, db_column='MilestoneTypeId', verbose_name='Milestone Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_completed = models.BooleanField(db_column='IsCompleted', verbose_name='Completed', sf_read_only=models.READ_ONLY, default=False)
    is_violated = models.BooleanField(db_column='IsViolated', verbose_name='Violation', sf_read_only=models.READ_ONLY, default=False)
    target_response_in_mins = models.IntegerField(db_column='TargetResponseInMins', verbose_name='Target Response (Mins)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_response_in_hrs = models.DecimalField(db_column='TargetResponseInHrs', max_digits=6, decimal_places=2, verbose_name='Target Response (Hours)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_response_in_days = models.DecimalField(db_column='TargetResponseInDays', max_digits=6, decimal_places=2, verbose_name='Target Response (Days)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_remaining_in_mins = models.CharField(db_column='TimeRemainingInMins', max_length=10, verbose_name='Time Remaining (Min:Sec)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_remaining_in_hrs = models.CharField(db_column='TimeRemainingInHrs', max_length=10, verbose_name='Time Remaining (Hour:Min)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_remaining_in_days = models.DecimalField(db_column='TimeRemainingInDays', max_digits=6, decimal_places=2, verbose_name='Time Remaining (Days)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_mins = models.IntegerField(db_column='ElapsedTimeInMins', verbose_name='Elapsed Time (Mins)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hrs = models.DecimalField(db_column='ElapsedTimeInHrs', max_digits=6, decimal_places=2, verbose_name='Elapsed Time (Hours)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_days = models.DecimalField(db_column='ElapsedTimeInDays', max_digits=6, decimal_places=2, verbose_name='Elapsed Time (Days)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_since_target_in_mins = models.CharField(db_column='TimeSinceTargetInMins', max_length=10, verbose_name='Time Since Target (Min:Sec)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_since_target_in_hrs = models.CharField(db_column='TimeSinceTargetInHrs', max_length=10, verbose_name='Time Since Target (Hour:Min)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_since_target_in_days = models.DecimalField(db_column='TimeSinceTargetInDays', max_digits=6, decimal_places=2, verbose_name='Time Since Target (Days)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    business_hours = models.ForeignKey(BusinessHours, models.DO_NOTHING, db_column='BusinessHoursId', verbose_name='Business Hours ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EntityMilestone'
        verbose_name = 'Object Milestone'
        verbose_name_plural = 'Object Milestones'
        # keyPrefix = '1EM'



class EntityMilestoneFeed(models.Model):
    parent = models.ForeignKey(EntityMilestone, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='entitymilestonefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='entitymilestonefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EntityMilestoneFeed'
        verbose_name = 'Object Milestone Feed'
        verbose_name_plural = 'Object Milestone Feed'
        # keyPrefix = None



class EntityMilestoneHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    entity_milestone = models.ForeignKey(EntityMilestone, models.DO_NOTHING, db_column='EntityMilestoneId', verbose_name='Object Milestone ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('CompletionDate', 'Completion Date'), ('created', 'Created.'), ('ElapsedTimeInMins', 'Elapsed Time (Mins)'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Milestone', 'Milestone'), ('Name', 'Object Milestone Name'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentEntity', 'Parent Object'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('StartDate', 'Start Date'), ('TargetDate', 'Target Date'), ('TargetResponseInMins', 'Target Response (Mins)')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EntityMilestoneHistory'
        verbose_name = 'Object Milestone History'
        verbose_name_plural = 'Object Milestone History'
        # keyPrefix = None



class EntityParticle(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(db_column='QualifiedApiName', max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(db_column='EntityDefinitionId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(db_column='FieldDefinitionId', max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(db_column='DeveloperName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(db_column='Label', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    length = models.IntegerField(db_column='Length', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(db_column='DataType', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_data_type_id = models.CharField(db_column='ServiceDataTypeId', max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_type_id = models.CharField(db_column='ValueTypeId', max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extra_type_info = models.CharField(db_column='ExtraTypeInfo', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_autonumber = models.BooleanField(db_column='IsAutonumber', verbose_name='Is Field an Autonumber?', sf_read_only=models.READ_ONLY, default=False)
    byte_length = models.IntegerField(db_column='ByteLength', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_case_sensitive = models.BooleanField(db_column='IsCaseSensitive', verbose_name='Is Field Case Sensitive?', sf_read_only=models.READ_ONLY, default=False)
    is_unique = models.BooleanField(db_column='IsUnique', verbose_name='Is Field Unique?', sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(db_column='IsCreatable', verbose_name='Is Field Creatable?', sf_read_only=models.READ_ONLY, default=False)
    is_updatable = models.BooleanField(db_column='IsUpdatable', verbose_name='Is Field Updatable?', sf_read_only=models.READ_ONLY, default=False)
    is_defaulted_on_create = models.BooleanField(db_column='IsDefaultedOnCreate', verbose_name='Is Field Defaulted On Create?', sf_read_only=models.READ_ONLY, default=False)
    is_write_requires_master_read = models.BooleanField(db_column='IsWriteRequiresMasterRead', verbose_name='Does Write Require Master Read?', sf_read_only=models.READ_ONLY, default=False)
    is_calculated = models.BooleanField(db_column='IsCalculated', verbose_name='Is Field calculated?', sf_read_only=models.READ_ONLY, default=False)
    is_high_scale_number = models.BooleanField(db_column='IsHighScaleNumber', verbose_name='Is Field a high scale number?', sf_read_only=models.READ_ONLY, default=False)
    is_html_formatted = models.BooleanField(db_column='IsHtmlFormatted', verbose_name='Is Field a HTML formatted?', sf_read_only=models.READ_ONLY, default=False)
    is_name_field = models.BooleanField(db_column='IsNameField', verbose_name='Is Field a Name field?', sf_read_only=models.READ_ONLY, default=False)
    is_nillable = models.BooleanField(db_column='IsNillable', verbose_name='Is Field a nillable?', sf_read_only=models.READ_ONLY, default=False)
    is_permissionable = models.BooleanField(db_column='IsPermissionable', verbose_name='Is Field Permissionable?', sf_read_only=models.READ_ONLY, default=False)
    is_encrypted = models.BooleanField(db_column='IsEncrypted', verbose_name='Is Field Encrypted?', sf_read_only=models.READ_ONLY, default=False)
    digits = models.IntegerField(db_column='Digits', sf_read_only=models.READ_ONLY, blank=True, null=True)
    inline_help_text = models.CharField(db_column='InlineHelpText', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(db_column='RelationshipName', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_target_field = models.CharField(db_column='ReferenceTargetField', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mask = models.CharField(db_column='Mask', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mask_type = models.CharField(db_column='MaskType', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_workflow_filterable = models.BooleanField(db_column='IsWorkflowFilterable', verbose_name='Is Workflow Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(db_column='IsCompactLayoutable', verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    precision = models.IntegerField(db_column='Precision', sf_read_only=models.READ_ONLY, blank=True, null=True)
    scale = models.IntegerField(db_column='Scale', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_field_history_tracked = models.BooleanField(db_column='IsFieldHistoryTracked', sf_read_only=models.READ_ONLY, default=False)
    is_api_filterable = models.BooleanField(db_column='IsApiFilterable', verbose_name='Is Field Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_sortable = models.BooleanField(db_column='IsApiSortable', verbose_name='Is Field Sortable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_groupable = models.BooleanField(db_column='IsApiGroupable', verbose_name='Is Field Groupable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_visible = models.BooleanField(db_column='IsListVisible', verbose_name='Is Field visible in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_layoutable = models.BooleanField(db_column='IsLayoutable', verbose_name='Is Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_dependent_picklist = models.BooleanField(db_column='IsDependentPicklist', verbose_name='Is Field a Dependent Picklist?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(db_column='IsDeprecatedAndHidden', verbose_name='Is Field a Deprecated and Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_display_location_in_decimal = models.BooleanField(db_column='IsDisplayLocationInDecimal', verbose_name='Is Field Displays Location in Decimals?', sf_read_only=models.READ_ONLY, default=False)
    default_value_formula = models.CharField(db_column='DefaultValueFormula', max_length=150, verbose_name='Default Value if Formula is Not Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_id_lookup = models.BooleanField(db_column='IsIdLookup', verbose_name='Can this Field be Used to Specify a Record in Upsert?', sf_read_only=models.READ_ONLY, default=False)
    is_name_pointing = models.BooleanField(db_column='IsNamePointing', verbose_name='Does this Field Contain the Name of the Parent?', sf_read_only=models.READ_ONLY, default=False)
    relationship_order = models.IntegerField(db_column='RelationshipOrder', verbose_name='Type of Relationship for a Master-Detail Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_to = models.XJSONField(db_column='ReferenceTo', verbose_name='Entities Referenced by Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_component = models.BooleanField(db_column='IsComponent', verbose_name='Is Field a component of a compound field', sf_read_only=models.READ_ONLY, default=False)
    is_compound = models.BooleanField(db_column='IsCompound', verbose_name='Is Field a compound field', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntityParticle'
        verbose_name = 'Entity Particle'
        verbose_name_plural = 'Entity Particles'
        # keyPrefix = '0Nv'



class EntitySubscription(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, Contact, ContentDocument, Contract, ContractLineItem, Dashboard, DashboardComponent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EnhancedLetterhead, Entitlement, EntityMilestone, Event, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, OrderItem, Problem, ProblemIncident, ProblemRelatedItem, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Quote, Report, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPost, Solution, Task, Topic, User, VoiceCall, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    subscriber = models.ForeignKey('User', models.DO_NOTHING, db_column='SubscriberId', related_name='entitysubscription_subscriber_set', verbose_name='Subscriber ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='entitysubscription_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntitySubscription'
        verbose_name = 'Entity Subscription'
        verbose_name_plural = 'Entity Subscriptions'
        # keyPrefix = '0E8'



class Event(models.Model):
    who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='WhoId', verbose_name='Name ID', blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, db_column='WhatId', related_name='event_what_set', verbose_name='Related To ID', blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, ChangeRequest, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Entitlement, Image, Incident, ListEmail, Opportunity, Order, Problem, ProcessException, Product2, Quote, ServiceContract, ServiceResource, Solution, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate] Master Detail Relationship *
    who_count = models.IntegerField(db_column='WhoCount', verbose_name='Relation Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    what_count = models.IntegerField(db_column='WhatCount', verbose_name='Related To Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255, choices=[('Call', 'Call'), ('Email', 'Email'), ('Meeting', 'Meeting'), ('Send Letter/Quote', 'Send Letter/Quote'), ('Other', 'Other')], blank=True, null=True)
    location = models.CharField(db_column='Location', max_length=255, blank=True, null=True)
    is_all_day_event = models.BooleanField(db_column='IsAllDayEvent', verbose_name='All-Day Event', default=False)
    activity_date_time = models.DateTimeField(db_column='ActivityDateTime', verbose_name='Due Date Time', blank=True, null=True)
    activity_date = models.DateField(db_column='ActivityDate', verbose_name='Due Date Only', blank=True, null=True)
    duration_in_minutes = models.IntegerField(db_column='DurationInMinutes', verbose_name='Duration', blank=True, null=True)
    start_date_time = models.DateTimeField(db_column='StartDateTime', blank=True, null=True)
    end_date_time = models.DateTimeField(db_column='EndDateTime', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='event_account_set', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey(Calendar, models.DO_NOTHING, db_column='OwnerId', verbose_name='Assigned To ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Calendar, User]
    type = models.CharField(db_column='Type', max_length=255, choices=[('Email', 'Email'), ('Meeting', 'Meeting'), ('Other', 'Other'), ('Call', 'Call')], blank=True, null=True)
    is_private = models.BooleanField(db_column='IsPrivate', verbose_name='Private', default=False)
    show_as = models.CharField(db_column='ShowAs', max_length=40, verbose_name='Show Time As', default='Busy', choices=[('Busy', 'Busy'), ('OutOfOffice', 'Out of Office'), ('Free', 'Free')], blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_child = models.BooleanField(db_column='IsChild', sf_read_only=models.READ_ONLY, default=False)
    is_group_event = models.BooleanField(db_column='IsGroupEvent', sf_read_only=models.READ_ONLY, default=False)
    group_event_type = models.CharField(db_column='GroupEventType', max_length=40, sf_read_only=models.READ_ONLY, default='0', choices=[('0', 'Non-group Event'), ('1', 'Group Event'), ('2', 'Proposed Event'), ('3', 'IsRecurrence2 Series Pattern')], blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='event_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='event_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(db_column='IsArchived', verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    recurrence_activity = models.ForeignKey('self', models.DO_NOTHING, db_column='RecurrenceActivityId', verbose_name='Recurrence Activity ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(db_column='IsRecurrence', verbose_name='Create Recurring Series of Events', sf_read_only=models.NOT_UPDATEABLE, default=False)
    recurrence_start_date_time = models.DateTimeField(db_column='RecurrenceStartDateTime', verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(db_column='RecurrenceEndDateOnly', verbose_name='Recurrence End', blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(db_column='RecurrenceTimeZoneSidKey', max_length=40, verbose_name='Recurrence Time Zone', blank=True, null=True)  # Too long choices skipped
    recurrence_type = models.CharField(db_column='RecurrenceType', max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthly Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(db_column='RecurrenceInterval', blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(db_column='RecurrenceDayOfWeekMask', verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(db_column='RecurrenceDayOfMonth', verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(db_column='RecurrenceInstance', max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(db_column='RecurrenceMonthOfYear', max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    reminder_date_time = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', blank=True, null=True)
    is_reminder_set = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set', default=False)
    event_subtype = models.CharField(db_column='EventSubtype', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Event', 'Event')], blank=True, null=True)
    is_recurrence2_exclusion = models.BooleanField(db_column='IsRecurrence2Exclusion', verbose_name='Historical Event, Not Following Recurrence', sf_read_only=models.READ_ONLY, default=False)
    recurrence2_pattern_text = models.TextField(db_column='Recurrence2PatternText', verbose_name='Recurrence Pattern', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    recurrence2_pattern_version = models.CharField(db_column='Recurrence2PatternVersion', max_length=40, verbose_name='Pattern Version', sf_read_only=models.READ_ONLY, choices=[('1', 'RFC 5545 v4 RRULE')], blank=True, null=True)
    is_recurrence2 = models.BooleanField(db_column='IsRecurrence2', verbose_name='Repeat', sf_read_only=models.READ_ONLY, default=False)
    is_recurrence2_exception = models.BooleanField(db_column='IsRecurrence2Exception', verbose_name='Is Exception', sf_read_only=models.READ_ONLY, default=False)
    recurrence2_pattern_start_date = models.DateTimeField(db_column='Recurrence2PatternStartDate', verbose_name='Recurrence Pattern Start Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence2_pattern_time_zone = models.CharField(db_column='Recurrence2PatternTimeZone', max_length=255, verbose_name='Recurrence Pattern Time Zone Reference', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aircall_answered_by = models.CharField(db_column='aircall__Answered_by__c', max_length=255, verbose_name='Answered by', blank=True, null=True) 
    aircall_call_id = models.CharField(db_column='aircall__CallId__c', max_length=255, verbose_name='Call Id', blank=True, null=True) 
    aircall_call_recording = models.URLField(db_column='aircall__Call_Recording__c', verbose_name='Call Recording', blank=True, null=True) 
    aircall_country = models.CharField(db_column='aircall__Country__c', max_length=255, verbose_name='Country', blank=True, null=True) 
    aircall_detailed_call_type = models.CharField(db_column='aircall__Detailed_call_type__c', max_length=255, verbose_name='Detailed call type', choices=[('Inbound answered', 'Inbound answered'), ('Missed call', 'Missed call'), ('Outbound answered', 'Outbound answered'), ('Outbound unanswered', 'Outbound unanswered'), ('Voicemail', 'Voicemail')], blank=True, null=True) 
    aircall_external_contact_phone_number = models.CharField(db_column='aircall__External_contact_phone_number__c', max_length=40, verbose_name='External contact phone number', blank=True, null=True) 
    aircall_handle_time = models.DecimalField(db_column='aircall__Handle_Time__c', max_digits=18, decimal_places=0, verbose_name='Handle Time', blank=True, null=True) 
    aircall_hour_in_time_zone = models.CharField(db_column='aircall__Hour_in_time_zone__c', max_length=255, verbose_name='Hour in timezone', blank=True, null=True) 
    aircall_is_missed_call = models.BooleanField(db_column='aircall__Is_Missed_call__c', verbose_name='Is Missed call', sf_read_only=models.READ_ONLY) 
    aircall_is_voicemail = models.BooleanField(db_column='aircall__Is_Voicemail__c', verbose_name='Is Voicemail', sf_read_only=models.READ_ONLY) 
    aircall_made_by = models.CharField(db_column='aircall__Made_By__c', max_length=255, verbose_name='Made By', blank=True, null=True) 
    aircall_missed_call_reason = models.CharField(db_column='aircall__Missed_Call_Reason__c', max_length=255, verbose_name='Missed Call Reason', choices=[('abandoned_in_ivr', 'Abandoned in IVR'), ('agents_did_not_answer', 'Agents did not answer'), ('no_available_agent', 'No available agent'), ('out_of_opening_hours', 'Out of opening hours'), ('short_abandoned', 'Short abandoned'), ('abandoned_in_classic', 'Abandoned in Classic')], blank=True, null=True) 
    aircall_number_name = models.CharField(db_column='aircall__Number_Name__c', max_length=255, verbose_name='Number name', blank=True, null=True) 
    aircall_phone_number = models.CharField(db_column='aircall__Phone_number__c', max_length=40, verbose_name='Aircall number', blank=True, null=True) 
    aircall_time_zone = models.DecimalField(db_column='aircall__Time_zone__c', max_digits=18, decimal_places=0, verbose_name='Time zone', blank=True, null=True) 
    aircall_transferred_to = models.CharField(db_column='aircall__Transferred_to__c', max_length=255, verbose_name='Transferred to', blank=True, null=True) 
    aircall_waiting_time = models.DecimalField(db_column='aircall__Waiting_Time__c', max_digits=18, decimal_places=0, verbose_name='Waiting Time', blank=True, null=True) 
    aircall_connection_status = models.CharField(db_column='aircall__Connection_status__c', max_length=1300, verbose_name='Connection status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_has_connected = models.BooleanField(db_column='aircall__Has_connected__c', verbose_name='Has connected', sf_read_only=models.READ_ONLY) 
    class Meta(models.Model.Meta):
        db_table = 'Event'
        verbose_name = 'Event'
        verbose_name_plural = 'Events'
        # keyPrefix = '00U'



class EventBusSubscriber(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='External ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Subscriber Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    topic = models.CharField(db_column='Topic', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    position = models.IntegerField(db_column='Position', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tip = models.IntegerField(db_column='Tip', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retries = models.IntegerField(db_column='Retries', verbose_name='Retry Attempts', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_error = models.CharField(db_column='LastError', max_length=255, verbose_name='Last Error Message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Running', 'Running'), ('Suspended', 'Suspended'), ('Expired', 'Expired'), ('Error', 'Error')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventBusSubscriber'
        verbose_name = 'Platform Event Subscription'
        verbose_name_plural = 'Platform Event Subscription'
        # keyPrefix = '0Cd'



class EventFeed(models.Model):
    parent = models.ForeignKey(Event, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='eventfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='eventfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventFeed'
        verbose_name = 'Event Feed'
        verbose_name_plural = 'Event Feed'
        # keyPrefix = None



class EventRelation(models.Model):
    relation = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelationId', related_name='eventrelation_relation_set', verbose_name='Relation ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Calendar, Campaign, Case, ChangeRequest, Contact, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, Entitlement, Image, In_App_Checklist_Settings__c, Incident, Lead, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Problem, ProcessException, Product2, Product_Category_Info__c, Product_Category__c, Quote, ServiceContract, ServiceResource, Solution, User, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    event = models.ForeignKey(Event, models.DO_NOTHING, db_column='EventId', verbose_name='Event ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_what = models.BooleanField(db_column='IsWhat', sf_read_only=models.NOT_UPDATEABLE, default=False)
    is_parent = models.BooleanField(db_column='IsParent', default=False)
    is_invitee = models.BooleanField(db_column='IsInvitee', default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='eventrelation_account_set', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, choices=[('New', 'New'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('Uninvited', 'Uninvited'), ('Maybe', 'Maybe')], blank=True, null=True)
    responded_date = models.DateTimeField(db_column='RespondedDate', verbose_name='Response Date', blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='eventrelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='eventrelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EventRelation'
        verbose_name = 'Event Relation'
        verbose_name_plural = 'Event Relations'
        # keyPrefix = '0RE'



class EventWhoRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, db_column='RelationId', verbose_name='Relation ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    event = models.ForeignKey(Event, models.DO_NOTHING, db_column='EventId', verbose_name='Event ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='eventwhorelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='eventwhorelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(db_column='Type', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventWhoRelation'
        verbose_name = 'Event Who Relation'
        verbose_name_plural = 'Event Who Relations'
        # keyPrefix = None



class ExpressionFilter(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='ExpressionFilter Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='expressionfilter_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='expressionfilter_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    filter_condition_logic = models.CharField(db_column='FilterConditionLogic', max_length=255, verbose_name='FilterConditionLogic', blank=True, null=True)
    context = models.ForeignKey('MacroInstruction', models.DO_NOTHING, db_column='ContextId', verbose_name='Macro Instruction ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    filter_description = models.CharField(db_column='FilterDescription', max_length=255, verbose_name='FilterDescription', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExpressionFilter'
        verbose_name = 'ExpressionFilter'
        verbose_name_plural = 'ExpressionFilters'
        # keyPrefix = '1GS'



class ExpressionFilterCriteria(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='ExpressionFilterCriteria Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='expressionfiltercriteria_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='expressionfiltercriteria_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    filter_target = models.CharField(db_column='FilterTarget', max_length=255, verbose_name='FilterTarget', blank=True, null=True)
    filter_target_value = models.CharField(db_column='FilterTargetValue', max_length=255, verbose_name='Context', blank=True, null=True)
    operation = models.CharField(db_column='Operation', max_length=255)
    sort_order = models.IntegerField(db_column='SortOrder', verbose_name='SortOrder', blank=True, null=True)
    expression_filter = models.ForeignKey(ExpressionFilter, models.DO_NOTHING, db_column='ExpressionFilterId', verbose_name='ExpressionFilter ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ExpressionFilterCriteria'
        verbose_name = 'ExpressionFilterCriteria'
        verbose_name_plural = 'ExpressionFilterCriteria'
        # keyPrefix = '8BM'



class ExpressionSetView(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=255, verbose_name='NamespacePrefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_template = models.BooleanField(db_column='IsTemplate', verbose_name='IsTemplate', sf_read_only=models.READ_ONLY, default=False)
    last_modified_by = models.CharField(db_column='LastModifiedBy', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    expression_set_details = models.TextField(db_column='ExpressionSetDetails', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExpressionSetView'
        verbose_name = 'Expression Set View'
        verbose_name_plural = 'Expression Set Views'
        # keyPrefix = '0pz'



class ExternalDataSource(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='externaldatasource_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='externaldatasource_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('ContentHubIsotope', None), ('contentHubItem', None), ('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('SciApi', None), ('SimpleURL', None), ('Trailhead', None), ('TrailheadEditWithId', None), ('usermobileconfig', None), ('usrconnectionstatus', None), ('Wrapper', None), ('Zero', None)])
    endpoint = models.TextField(db_column='Endpoint', verbose_name='URL', sf_read_only=models.READ_ONLY, help_text='The URL for connecting to the external system.', blank=True, null=True)
    repository = models.CharField(db_column='Repository', max_length=255, verbose_name='Default External Repository', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_writable = models.BooleanField(db_column='IsWritable', verbose_name='Writable External Objects', sf_read_only=models.READ_ONLY, default=False)
    principal_type = models.CharField(db_column='PrincipalType', max_length=255, verbose_name='Identity Type', sf_read_only=models.READ_ONLY, help_text='Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', choices=[('Anonymous', 'Anonymous'), ('PerUser', 'Per User'), ('NamedUser', 'Named Principal')])
    protocol = models.CharField(db_column='Protocol', max_length=255, verbose_name='Authentication Protocol', sf_read_only=models.READ_ONLY, help_text='Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', choices=[('NoAuthentication', 'No Authentication'), ('Oauth', 'OAuth 2.0'), ('Password', 'Password Authentication'), ('AwsSv4', 'AWS Signature Version 4'), ('Jwt', 'JWT'), ('JwtExchange', 'JWT Token Exchange')])
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, db_column='AuthProviderId', verbose_name='Auth. Provider ID', sf_read_only=models.READ_ONLY, help_text='This Salesforce or third-party service provides the login process and approves access to the external system.', blank=True, null=True)
    large_icon = models.ForeignKey('StaticResource', models.DO_NOTHING, db_column='LargeIconId', related_name='externaldatasource_largeicon_set', verbose_name='Static Resource ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_icon = models.ForeignKey('StaticResource', models.DO_NOTHING, db_column='SmallIconId', related_name='externaldatasource_smallicon_set', verbose_name='Static Resource ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    custom_configuration = models.TextField(db_column='CustomConfiguration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataSource'
        verbose_name = 'External Data Source'
        verbose_name_plural = 'External Data Sources'
        # keyPrefix = '0XC'



class ExternalDataSrcDescriptor(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, db_column='ExternalDataSourceId', verbose_name='External Data Source ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Object Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='externaldatasrcdescriptor_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='externaldatasrcdescriptor_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='External Data Source Descriptor Type', sf_read_only=models.READ_ONLY, choices=[('Schema', None)])
    system_version = models.IntegerField(db_column='SystemVersion', sf_read_only=models.READ_ONLY)
    descriptor_version = models.CharField(db_column='DescriptorVersion', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    subtype = models.CharField(db_column='Subtype', max_length=255, verbose_name='External Data Source Descriptor Subtype', sf_read_only=models.READ_ONLY, choices=[('SchemaTableQualifiers', None), ('SchemaTableMetadata', None)])
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataSrcDescriptor'
        verbose_name = 'External Data Source Descriptor'
        verbose_name_plural = 'External Data Source Descriptors'
        # keyPrefix = '6Ay'



class ExternalDataUserAuth(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='externaldatauserauth_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='externaldatauserauth_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, db_column='ExternalDataSourceId', verbose_name='External Data Source ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ExternalDataSource, NamedCredential] Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='externaldatauserauth_user_set', verbose_name='User ID', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    protocol = models.CharField(db_column='Protocol', max_length=255, verbose_name='Authentication Protocol', default=models.DEFAULTED_ON_CREATE, help_text='Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', choices=[('NoAuthentication', 'No Authentication'), ('Oauth', 'OAuth 2.0'), ('Password', 'Password Authentication'), ('AwsSv4', 'AWS Signature Version 4'), ('Jwt', 'JWT'), ('JwtExchange', 'JWT Token Exchange')], blank=True, null=True)
    username = models.CharField(db_column='Username', max_length=255, blank=True, null=True)
    password = models.TextField(db_column='Password', blank=True, null=True)
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, db_column='AuthProviderId', verbose_name='Auth. Provider ID', help_text='This Salesforce or third-party service provides the login process and approves access to the external system.', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataUserAuth'
        verbose_name = 'External Data User Authentication'
        verbose_name_plural = 'External Data User Authentications'
        # keyPrefix = '0XU'



class ExternalEvent(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='externalevent_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='externalevent_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    external_id = models.CharField(db_column='ExternalId', max_length=255, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=255, blank=True, null=True)
    location = models.CharField(db_column='Location', max_length=255, blank=True, null=True)
    notes = models.TextField(db_column='Notes', blank=True, null=True)
    time = models.CharField(db_column='Time', max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalEvent'
        verbose_name = 'External Event'
        verbose_name_plural = 'External Events'
        # keyPrefix = '0AY'



class ExternalEventMapping(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='externaleventmapping_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='externaleventmapping_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    external_id = models.CharField(db_column='ExternalId', max_length=255, blank=True, null=True)
    event = models.ForeignKey(Event, models.DO_NOTHING, db_column='EventId', verbose_name='Activity ID', blank=True, null=True)  # Master Detail Relationship *
    start_date = models.DateField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', blank=True, null=True)
    is_recurring = models.BooleanField(db_column='IsRecurring', default=False)
    class Meta(models.Model.Meta):
        db_table = 'ExternalEventMapping'
        verbose_name = 'External Event Mapping'
        verbose_name_plural = 'External Event Mappings'
        # keyPrefix = '08N'



class ExternalEventMappingShare(models.Model):
    parent = models.ForeignKey(ExternalEventMapping, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ExternalEventMappingShare'
        verbose_name = 'External Event Mapping Share'
        verbose_name_plural = 'External Event Mapping Share'
        # keyPrefix = None



class ExternalSocialAccount(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='externalsocialaccount_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='externalsocialaccount_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    external_account_id = models.CharField(db_column='ExternalAccountId', max_length=255, sf_read_only=models.READ_ONLY)
    username = models.CharField(db_column='Username', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    provider = models.CharField(db_column='Provider', max_length=255, verbose_name='Social Network', sf_read_only=models.READ_ONLY, choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('InstagramBusiness', 'InstagramBusiness'), ('GoogleRtc', 'GoogleRTC'), ('Other', 'Other Media Type')])
    provider_user_id = models.CharField(db_column='ProviderUserId', max_length=255, sf_read_only=models.READ_ONLY)
    external_picture_url = models.URLField(db_column='ExternalPictureURL', verbose_name='Provider External Picture URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Is Active Account', sf_read_only=models.READ_ONLY, default=False)
    social_property_id = models.CharField(db_column='SocialPropertyId', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_authenticated = models.BooleanField(db_column='IsAuthenticated', verbose_name='Is Account Authenticated', sf_read_only=models.READ_ONLY, default=False)
    topic_id = models.CharField(db_column='TopicId', max_length=255, verbose_name='Topic Profile Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_source_id = models.CharField(db_column='DataSourceId', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    rule_id = models.CharField(db_column='RuleId', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_data_source_active = models.BooleanField(db_column='IsDataSourceActive', verbose_name='Active Data Source', sf_read_only=models.READ_ONLY, default=False)
    unique_name = models.CharField(db_column='UniqueName', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_response_account = models.ForeignKey('self', models.DO_NOTHING, db_column='DefaultResponseAccountId', verbose_name='Managed Social Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    profile_url = models.URLField(db_column='ProfileUrl', verbose_name='Profile URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authorized_by = models.CharField(db_column='AuthorizedBy', max_length=255, verbose_name='Authorized by', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_case_creation_enabled = models.BooleanField(db_column='IsCaseCreationEnabled', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ExternalSocialAccount'
        verbose_name = 'Managed Social Account'
        verbose_name_plural = 'Managed Social Accounts'
        # keyPrefix = '0AL'



class FeedAttachment(models.Model):
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedEntityId', verbose_name='Feed Entity ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedComment, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Attachment Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('Content', None), ('InlineImage', None), ('Link', None), ('FeedEntity', None), ('ChatterExtension', None), ('Record', None)])
    record = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='RecordId', verbose_name='Attachment Record ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentDocument, ContentVersion, FeedItem]
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Feed Attachment Title', blank=True, null=True)
    value = models.CharField(db_column='Value', max_length=1000, verbose_name='Feed Attachment Value', blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedAttachment'
        verbose_name = 'Feed Attachment'
        verbose_name_plural = 'Feed Attachments'
        # keyPrefix = '08M'



class FeedComment(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedItemId', verbose_name='Feed Item ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, Contact, ContentDocument, Contract, ContractLineItem, Dashboard, DashboardComponent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EnhancedLetterhead, Entitlement, EntityMilestone, Event, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, OrderItem, Problem, ProblemIncident, ProblemRelatedItem, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Quote, Report, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPost, Solution, Task, Topic, User, VoiceCall, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c]
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='feedcomment_createdby_set', verbose_name='Created By ID', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)  # Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    revision = models.IntegerField(db_column='Revision', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastEditById', related_name='feedcomment_lasteditby_set', verbose_name='Last Edit By ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_date = models.DateTimeField(db_column='LastEditDate', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    comment_body = models.TextField(db_column='CommentBody')
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='feedcomment_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    comment_type = models.CharField(db_column='CommentType', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('TextComment', None), ('ContentComment', None)], blank=True, null=True)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    is_rich_text = models.BooleanField(db_column='IsRichText', default=False)
    is_verified = models.BooleanField(db_column='IsVerified', verbose_name='Is a Verified Comment', sf_read_only=models.READ_ONLY, default=False)
    has_entity_links = models.BooleanField(db_column='HasEntityLinks', verbose_name='Has entity links', sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(db_column='Status', max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Published', 'Published'), ('PendingReview', 'PendingReview'), ('Draft', 'Draft')], blank=True, null=True)
    thread_parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ThreadParentId', verbose_name='Feed Comment ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    thread_level = models.IntegerField(db_column='ThreadLevel', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    thread_children_count = models.IntegerField(db_column='ThreadChildrenCount', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    thread_last_updated_date = models.DateTimeField(db_column='ThreadLastUpdatedDate', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedComment'
        verbose_name = 'Feed Comment'
        verbose_name_plural = 'Feed Comments'
        # keyPrefix = '0D7'



class FeedItem(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, Contact, ContentDocument, Contract, ContractLineItem, Dashboard, DashboardComponent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EnhancedLetterhead, Entitlement, EntityMilestone, Event, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, OrderItem, Problem, ProblemIncident, ProblemRelatedItem, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Quote, Report, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPost, Solution, Task, Topic, User, VoiceCall, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='feeditem_createdby_set', verbose_name='Created By ID', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)  # Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    revision = models.IntegerField(db_column='Revision', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastEditById', related_name='feeditem_lasteditby_set', verbose_name='Last Edit By ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_date = models.DateTimeField(db_column='LastEditDate', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, blank=True, null=True)
    body = models.TextField(db_column='Body', blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentVersion, ProfileSkillUser, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='feeditem_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', related_name='feeditem_bestcomment_set', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_content = models.BooleanField(db_column='HasContent', sf_read_only=models.READ_ONLY, default=False)
    has_link = models.BooleanField(db_column='HasLink', sf_read_only=models.READ_ONLY, default=False)
    has_feed_entity = models.BooleanField(db_column='HasFeedEntity', verbose_name='Has Feed Entity Attachment', sf_read_only=models.READ_ONLY, default=False)
    has_verified_comment = models.BooleanField(db_column='HasVerifiedComment', sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(db_column='IsClosed', sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(db_column='Status', max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Published', 'Published'), ('PendingReview', 'PendingReview'), ('Draft', 'Draft')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedItem'
        verbose_name = 'Feed Item'
        verbose_name_plural = 'Feed Items'
        # keyPrefix = '0D5'



class FeedLike(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedItemId', related_name='feedlike_feeditem_set', verbose_name='Feed Item ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedEntityId', related_name='feedlike_feedentity_set', verbose_name='Feed Item ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedComment, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='feedlike_createdby_set', verbose_name='Created By ID', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)  # Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='feedlike_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'FeedLike'
        verbose_name = 'Feed Like'
        verbose_name_plural = 'Feed Likes'
        # keyPrefix = '0I0'



class FeedPollChoice(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedItemId', verbose_name='Feed Item ID', sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    position = models.IntegerField(db_column='Position', sf_read_only=models.READ_ONLY)
    choice_body = models.TextField(db_column='ChoiceBody', verbose_name='ChoiceBody', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedPollChoice'
        verbose_name = 'Feed Poll Choice'
        verbose_name_plural = 'Feed Poll Choices'
        # keyPrefix = '09A'



class FeedPollVote(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedItemId', verbose_name='Feed Item ID', sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    choice = models.ForeignKey(FeedPollChoice, models.DO_NOTHING, db_column='ChoiceId', verbose_name='Feed Poll Choice ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedPollVote'
        verbose_name = 'Feed Poll Vote'
        verbose_name_plural = 'Feed Poll Votes'
        # keyPrefix = '09B'



class FeedRevision(models.Model):
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    feed_entity = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='FeedEntityId', verbose_name='Feed Entity ID', sf_read_only=models.READ_ONLY)  # Reference to tables [FeedComment, FeedItem] Master Detail Relationship *
    revision = models.IntegerField(db_column='Revision', sf_read_only=models.READ_ONLY, blank=True, null=True)
    action = models.CharField(db_column='Action', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Changed', None)], blank=True, null=True)
    edited_attribute = models.CharField(db_column='EditedAttribute', max_length=40, sf_read_only=models.READ_ONLY, choices=[('FeedCommentBody', None), ('FeedElementBody', None), ('FeedElementQuestionTitle', None), ('FeedElementVisibility', None), ('FeedElementParent', None)], blank=True, null=True)
    value = models.TextField(db_column='Value', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_value_rich_text = models.BooleanField(db_column='IsValueRichText', verbose_name='Is Value RichText', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedRevision'
        verbose_name = 'Feed Revision'
        verbose_name_plural = 'Feed Revisions'
        # keyPrefix = '08U'



class FeedSignal(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedItemId', related_name='feedsignal_feeditem_set', verbose_name='Feed Item ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedEntityId', related_name='feedsignal_feedentity_set', verbose_name='Feed Item ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedComment, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    signal_value = models.IntegerField(db_column='SignalValue', verbose_name='Signal value', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    signal_type = models.CharField(db_column='SignalType', max_length=40, verbose_name='Signal type', sf_read_only=models.NOT_UPDATEABLE, choices=[('UpDownVote', None), ('Verified', None), ('UserVerified', None)], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='feedsignal_createdby_set', verbose_name='Created By ID', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)  # Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='feedsignal_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'FeedSignal'
        verbose_name = 'Feed Signal'
        verbose_name_plural = 'Feed Signals'
        # keyPrefix = '0QJ'



class FeedTrackedChange(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, db_column='FeedItemId', verbose_name='Feed Item ID', sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CaseRelatedIssueFeed, ChangeRequestFeed, ChangeRequestRelatedIssueFeed, ChangeRequestRelatedItemFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, ContractLineItemFeed, DashboardComponentFeed, DashboardFeed, EnhancedLetterheadFeed, EntitlementFeed, EntityMilestoneFeed, EventFeed, FeedItem, ImageFeed, IncidentFeed, IncidentRelatedItemFeed, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, ProblemFeed, ProblemIncidentFeed, ProblemRelatedItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, QuoteFeed, ReportFeed, ServiceContractFeed, ServiceResourceFeed, ServiceResourceSkillFeed, SkillRequirementFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, VoiceCallFeed, WorkBadgeDefinitionFeed, WorkOrderFeed, WorkOrderLineItemFeed, WorkPlanFeed, WorkPlanTemplateEntryFeed, WorkPlanTemplateFeed, WorkStepFeed, WorkStepTemplateFeed] Master Detail Relationship *
    field_name = models.CharField(db_column='FieldName', max_length=120, verbose_name='Field', sf_read_only=models.READ_ONLY)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedTrackedChange'
        verbose_name = 'Feed Tracked Change'
        verbose_name_plural = 'Feed Tracked Changes'
        # keyPrefix = '0D6'



class FieldDefinition(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(db_column='QualifiedApiName', max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(db_column='EntityDefinitionId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(db_column='DeveloperName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(db_column='Label', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    length = models.IntegerField(db_column='Length', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(db_column='DataType', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_data_type_id = models.CharField(db_column='ServiceDataTypeId', max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_type_id = models.CharField(db_column='ValueTypeId', max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extra_type_info = models.CharField(db_column='ExtraTypeInfo', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_calculated = models.BooleanField(db_column='IsCalculated', verbose_name='Is Field calculated?', sf_read_only=models.READ_ONLY, default=False)
    is_high_scale_number = models.BooleanField(db_column='IsHighScaleNumber', verbose_name='Is Field a high scale number?', sf_read_only=models.READ_ONLY, default=False)
    is_html_formatted = models.BooleanField(db_column='IsHtmlFormatted', verbose_name='Is Field a HTML formatted?', sf_read_only=models.READ_ONLY, default=False)
    is_name_field = models.BooleanField(db_column='IsNameField', verbose_name='Is Field a Name field?', sf_read_only=models.READ_ONLY, default=False)
    is_nillable = models.BooleanField(db_column='IsNillable', verbose_name='Is Field a nillable?', sf_read_only=models.READ_ONLY, default=False)
    is_workflow_filterable = models.BooleanField(db_column='IsWorkflowFilterable', verbose_name='Is Workflow Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(db_column='IsCompactLayoutable', verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    precision = models.IntegerField(db_column='Precision', sf_read_only=models.READ_ONLY, blank=True, null=True)
    scale = models.IntegerField(db_column='Scale', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_field_history_tracked = models.BooleanField(db_column='IsFieldHistoryTracked', sf_read_only=models.READ_ONLY, default=False)
    is_indexed = models.BooleanField(db_column='IsIndexed', verbose_name='Is Field indexed?', sf_read_only=models.READ_ONLY, default=False)
    is_api_filterable = models.BooleanField(db_column='IsApiFilterable', verbose_name='Is Field Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_sortable = models.BooleanField(db_column='IsApiSortable', verbose_name='Is Field Sortable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_filterable = models.BooleanField(db_column='IsListFilterable', verbose_name='Is Field Filterable in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_list_sortable = models.BooleanField(db_column='IsListSortable', verbose_name='Is Field Sortable in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_api_groupable = models.BooleanField(db_column='IsApiGroupable', verbose_name='Is Field Groupable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_visible = models.BooleanField(db_column='IsListVisible', verbose_name='Is Field visible in Lists?', sf_read_only=models.READ_ONLY, default=False)
    controlling_field_definition_id = models.CharField(db_column='ControllingFieldDefinitionId', max_length=150, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    publisher_id = models.CharField(db_column='PublisherId', max_length=70, verbose_name='Publisher ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    running_user_field_access_id = models.CharField(db_column='RunningUserFieldAccessId', max_length=150, verbose_name='User Field Access ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(db_column='RelationshipName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_to = models.XJSONField(db_column='ReferenceTo', verbose_name='Entities Referenced by Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_target_field = models.CharField(db_column='ReferenceTargetField', max_length=80, verbose_name='Target Field on Entities to Which the Foreign Key Points', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_compound = models.BooleanField(db_column='IsCompound', verbose_name='Is Field a compound field', sf_read_only=models.READ_ONLY, default=False)
    is_search_prefilterable = models.BooleanField(db_column='IsSearchPrefilterable', verbose_name='Is Field Search Prefilterable?', sf_read_only=models.READ_ONLY, default=False)
    is_polymorphic_foreign_key = models.BooleanField(db_column='IsPolymorphicForeignKey', verbose_name='Is ForeignKey Polymorphic?', sf_read_only=models.READ_ONLY, default=False)
    business_owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='BusinessOwnerId', verbose_name='Business Owner ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    business_status = models.CharField(db_column='BusinessStatus', max_length=40, verbose_name='Field Usage', sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('DeprecateCandidate', 'DeprecateCandidate'), ('Hidden', 'Hidden')], blank=True, null=True)
    security_classification = models.CharField(db_column='SecurityClassification', max_length=40, verbose_name='Data Sensitivity Level', sf_read_only=models.READ_ONLY, choices=[('Public', 'Public'), ('Internal', 'Internal'), ('Confidential', 'Confidential'), ('Restricted', 'Restricted'), ('MissionCritical', 'MissionCritical')], blank=True, null=True)
    compliance_group = models.CharField(db_column='ComplianceGroup', max_length=4099, verbose_name='Compliance Categorization', sf_read_only=models.READ_ONLY, choices=[('PII', 'PII'), ('HIPAA', 'HIPAA'), ('GDPR', 'GDPR'), ('PCI', 'PCI'), ('COPPA', 'COPPA'), ('CCPA', 'CCPA')], blank=True, null=True)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FieldDefinition'
        verbose_name = 'Field Definition'
        verbose_name_plural = 'Field Definitions'
        # keyPrefix = '4fe'



class FieldPermissions(models.Model):
    parent = models.ForeignKey('PermissionSet', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='SObject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('AccountContactRelation', None), ('Asset', None), ('AssetRelationship', None), ('Campaign', None), ('CampaignInfluence', None), ('CampaignMember', None), ('Case', None), ('CaseRelatedIssue', None), ('ChangeRequest', None), ('ChangeRequestRelatedIssue', None), ('ChangeRequestRelatedItem', None), ('Contact', None), ('ContactRequest', None), ('Contract', None), ('ContractLineItem', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Entitlement', None), ('EntityMilestone', None), ('Event', None), ('Idea', None), ('Image', None), ('Incident', None), ('IncidentRelatedItem', None), ('Lead', None), ('Macro', None), ('Opportunity', None), ('OpportunityContactRole', None), ('OpportunityLineItem', None), ('OpportunityLineItemSchedule', None), ('Order', None), ('OrderItem', None), ('Pricebook2', None), ('PricebookEntry', None), ('Problem', None), ('ProblemIncident', None), ('ProblemRelatedItem', None), ('ProcessException', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('QuickText', None), ('Quote', None), ('QuoteLineItem', None), ('Recommendation', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('ServiceContract', None), ('ServiceResource', None), ('ServiceResourceSkill', None), ('SkillRequirement', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('Task', None), ('User', None), ('UserProvisioningRequest', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPlan', None), ('WorkPlanTemplate', None), ('WorkPlanTemplateEntry', None), ('WorkStep', None), ('WorkStepTemplate', None), ('WorkThanks', None)])
    field = models.CharField(db_column='Field', max_length=40, verbose_name='Field Name', sf_read_only=models.NOT_UPDATEABLE)  # Too long choices skipped
    permissions_edit = models.BooleanField(db_column='PermissionsEdit', verbose_name='Edit Field', default=False)
    permissions_read = models.BooleanField(db_column='PermissionsRead', verbose_name='Read Field', default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FieldPermissions'
        verbose_name = 'Field Permissions'
        verbose_name_plural = 'Field Permissions'
        # keyPrefix = '01k'



class FieldSecurityClassification(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_high_risk_level = models.BooleanField(db_column='IsHighRiskLevel', verbose_name='High-Risk Level', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='fieldsecurityclassification_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='fieldsecurityclassification_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FieldSecurityClassification'
        verbose_name = 'Field Security Classification'
        verbose_name_plural = 'Field Security Classifications'
        # keyPrefix = None



class FileSearchActivity(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Search Activity Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='filesearchactivity_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='filesearchactivity_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    search_term = models.CharField(db_column='SearchTerm', max_length=100, sf_read_only=models.READ_ONLY)
    query_date = models.DateField(db_column='QueryDate', verbose_name='Search Date', sf_read_only=models.READ_ONLY)
    count_queries = models.IntegerField(db_column='CountQueries', verbose_name='Number of Searches', sf_read_only=models.READ_ONLY)
    count_users = models.IntegerField(db_column='CountUsers', verbose_name='Number of Users', sf_read_only=models.READ_ONLY)
    avg_num_results = models.DecimalField(db_column='AvgNumResults', max_digits=18, decimal_places=1, verbose_name='Average Number of Results', sf_read_only=models.READ_ONLY)
    period = models.CharField(db_column='Period', max_length=255, verbose_name='Duration', sf_read_only=models.READ_ONLY, choices=[('DAY', 'Daily'), ('MONTH', 'Monthly'), ('YEAR', 'Yearly')])
    query_language = models.CharField(db_column='QueryLanguage', max_length=255, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    click_rank = models.DecimalField(db_column='ClickRank', max_digits=18, decimal_places=1, verbose_name='Average Click Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FileSearchActivity'
        verbose_name = 'FileSearchActivity'
        verbose_name_plural = 'File Search Activity'
        # keyPrefix = '06h'



class FiscalYearSettings(models.Model):
    period = models.ForeignKey('Period', models.DO_NOTHING, db_column='PeriodId', related_name='fiscalyearsettings_period_set', verbose_name='Period ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    start_date = models.DateField(db_column='StartDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80, sf_read_only=models.READ_ONLY)
    is_standard_year = models.BooleanField(db_column='IsStandardYear', sf_read_only=models.READ_ONLY, default=False)
    year_type = models.CharField(db_column='YearType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', None), ('Custom', None), ('Placeholder', None)], blank=True, null=True)
    quarter_label_scheme = models.CharField(db_column='QuarterLabelScheme', max_length=40, verbose_name='Quarter Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('Custom', 'Custom Quarter Names')], blank=True, null=True)
    period_label_scheme = models.CharField(db_column='PeriodLabelScheme', max_length=40, verbose_name='Period Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('NumberByQuarter', 'Numbered By Quarter'), ('StandardMonths', 'Standard Month Names'), ('Custom', 'Custom Period Names')], blank=True, null=True)
    week_label_scheme = models.CharField(db_column='WeekLabelScheme', max_length=40, verbose_name='Week Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Year'), ('NumberByQuarter', 'Quarter'), ('NumberByPeriod', 'Period')], blank=True, null=True)
    quarter_prefix = models.CharField(db_column='QuarterPrefix', max_length=255, sf_read_only=models.READ_ONLY, default='Quarter', choices=[('Quarter', 'Quarter'), ('FQ', 'FQ'), ('Q', 'Q'), ('Trimester', 'Trimester')], blank=True, null=True)
    period_prefix = models.CharField(db_column='PeriodPrefix', max_length=255, sf_read_only=models.READ_ONLY, default='Period', choices=[('Period', 'Period'), ('FP', 'FP'), ('P', 'P'), ('Month', 'Month')], blank=True, null=True)
    week_start_day = models.IntegerField(db_column='WeekStartDay', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FiscalYearSettings'
        verbose_name = 'Fiscal Year Settings'
        verbose_name_plural = 'Fiscal Year Settings'
        # keyPrefix = '022'



class FlowDefinitionView(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, verbose_name='Flow API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=255, verbose_name='Flow Label', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Flow Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    process_type = models.CharField(db_column='ProcessType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('AutoLaunchedFlow', 'Autolaunched Flow'), ('Flow', 'Screen Flow'), ('Workflow', 'Record Change Process'), ('CustomEvent', 'Platform Event Process'), ('InvocableProcess', 'Invocable Process'), ('LoginFlow', 'Login Flow'), ('ActionPlan', 'Action Plan'), ('JourneyBuilderIntegration', 'Journey Builder Integration'), ('UserProvisioningFlow', 'User Provisioning Flow'), ('Survey', 'Survey'), ('SurveyEnrich', 'Survey Enrich Flow'), ('Appointments', 'Salesforce Scheduler Flow'), ('FSCLending', 'Mortgage Flow'), ('DigitalForm', 'Digital Form Flow'), ('FieldServiceMobile', 'Field Service Mobile Flow'), ('OrchestrationFlow', 'Orchestration Flow'), ('FieldServiceWeb', 'Embedded Appointment Management Flow'), ('TransactionSecurityFlow', 'Transaction Security Flow'), ('ContactRequestFlow', 'Contact Request Flow'), ('ActionCadenceFlow', 'Sales Cadence Flow'), ('ManagedContentFlow', 'Managed Content Flow'), ('CheckoutFlow', 'Checkout Flow'), ('CartAsyncFlow', 'Cart Async Flow'), ('CustomerLifecycle', 'Customer Lifecycle Flow'), ('Journey', 'Journey OSL Flow'), ('RecommendationStrategy', 'Recommendation Strategy'), ('Orchestrator', 'Orchestrator'), ('RoutingFlow', 'Omni-Channel Flow'), ('ServiceCatalogItemFlow', 'Employee Service Catalog Item Flow'), ('EvaluationFlow', 'Evaluation Flow'), ('LoyaltyManagementFlow', 'Loyalty Management Flow'), ('CMSOrchestrator', 'Flow Orchestrator for CMS')], blank=True, null=True)
    trigger_type = models.CharField(db_column='TriggerType', max_length=255, verbose_name='Trigger', sf_read_only=models.READ_ONLY, choices=[('None', None), ('Scheduled', None), ('RecordBeforeSave', None), ('RecordBeforeDelete', None), ('ScheduledJourney', None), ('RecordAfterSave', None), ('PlatformEvent', None)], blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=255, verbose_name='Flow Namespace', sf_read_only=models.READ_ONLY, blank=True, null=True)
    active_version_id = models.CharField(db_column='ActiveVersionId', max_length=255, verbose_name='Active Flow Version API Name or ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latest_version_id = models.CharField(db_column='LatestVersionId', max_length=255, verbose_name='Latest Flow Version API Name or ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.CharField(db_column='LastModifiedBy', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    is_out_of_date = models.BooleanField(db_column='IsOutOfDate', verbose_name='Is Using an Older Version', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    is_template = models.BooleanField(db_column='IsTemplate', verbose_name='Template', sf_read_only=models.READ_ONLY, default=False)
    is_overridable = models.BooleanField(db_column='IsOverridable', verbose_name='Overridable', sf_read_only=models.READ_ONLY, default=False)
    overridden_by_id = models.CharField(db_column='OverriddenById', max_length=512, verbose_name='Flow Definition View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    source_template_id = models.CharField(db_column='SourceTemplateId', max_length=512, verbose_name='Flow Definition View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    overridden_flow_id = models.CharField(db_column='OverriddenFlowId', max_length=512, verbose_name='Flow Definition View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_swing_flow = models.BooleanField(db_column='IsSwingFlow', sf_read_only=models.READ_ONLY, default=False)
    builder = models.CharField(db_column='Builder', max_length=255, verbose_name='Built with', sf_read_only=models.READ_ONLY, blank=True, null=True)
    manageable_state = models.CharField(db_column='ManageableState', max_length=255, verbose_name='Package State', sf_read_only=models.READ_ONLY, choices=[('released', 'Managed-Released'), ('deleted', 'Managed-Proposed-Deleted'), ('deprecated', 'Managed-Proposed-Deprecated'), ('installed', 'Managed-Installed'), ('beta', 'Managed-Beta'), ('unmanaged', 'Unmanaged'), ('installedEditable', 'SecondGen-Installed-Editable'), ('deprecatedEditable', 'SecondGen-Installed-Deprecated')], blank=True, null=True)
    installed_package_name = models.CharField(db_column='InstalledPackageName', max_length=240, verbose_name='Package Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trigger_object_or_event_label = models.CharField(db_column='TriggerObjectOrEventLabel', max_length=255, verbose_name='Triggering Object or Platform Event Label', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trigger_object_or_event_id = models.CharField(db_column='TriggerObjectOrEventId', max_length=512, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_trigger_type = models.CharField(db_column='RecordTriggerType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Update', None), ('Create', None), ('CreateAndUpdate', None), ('Delete', None), ('None', None)], blank=True, null=True)
    has_async_after_commit_path = models.BooleanField(db_column='HasAsyncAfterCommitPath', verbose_name='Has Asynchronous After Commit Path', sf_read_only=models.READ_ONLY, default=False)
    version_number = models.IntegerField(db_column='VersionNumber', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trigger_order = models.IntegerField(db_column='TriggerOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    environments = models.CharField(db_column='Environments', max_length=4099, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowDefinitionView'
        verbose_name = 'Flow Definition'
        verbose_name_plural = 'Flow Definitions'
        # keyPrefix = '3dd'



class FlowInterview(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='flowinterview_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='flowinterview_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    current_element = models.CharField(db_column='CurrentElement', max_length=100, sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_label = models.CharField(db_column='InterviewLabel', max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    pause_label = models.CharField(db_column='PauseLabel', max_length=1000, verbose_name='Pause Reason', sf_read_only=models.READ_ONLY, blank=True, null=True)
    guid = models.CharField(db_column='Guid', max_length=255, verbose_name='Flow Interview Guid', sf_read_only=models.READ_ONLY, blank=True, null=True)
    was_paused_from_screen = models.BooleanField(db_column='WasPausedFromScreen', sf_read_only=models.READ_ONLY, default=False)
    flow_version_view_id = models.CharField(db_column='FlowVersionViewId', max_length=512, verbose_name='Flow Version View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_status = models.CharField(db_column='InterviewStatus', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Running', 'Running'), ('Paused', 'Paused'), ('Completed', 'Completed'), ('Error', 'Error')])
    class Meta(models.Model.Meta):
        db_table = 'FlowInterview'
        verbose_name = 'Flow Interview'
        verbose_name_plural = 'Flow Interviews'
        # keyPrefix = '0Fo'



class FlowInterviewLog(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='flowinterviewlog_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='flowinterviewlog_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    flow_developer_name = models.CharField(db_column='FlowDeveloperName', max_length=255, verbose_name='Flow API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_interview_guid = models.CharField(db_column='FlowInterviewGuid', unique=True, max_length=255, verbose_name='Flow Interview GUID', sf_read_only=models.READ_ONLY)
    flow_version_number = models.IntegerField(db_column='FlowVersionNumber', sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_start_timestamp = models.DateTimeField(db_column='InterviewStartTimestamp', sf_read_only=models.READ_ONLY)
    interview_end_timestamp = models.DateTimeField(db_column='InterviewEndTimestamp', sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_duration_in_minutes = models.DecimalField(db_column='InterviewDurationInMinutes', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_status = models.CharField(db_column='InterviewStatus', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Running', 'Running'), ('Paused', 'Paused'), ('Completed', 'Completed'), ('Error', 'Error')])
    flow_namespace = models.CharField(db_column='FlowNamespace', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_label = models.CharField(db_column='FlowLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterviewLog'
        verbose_name = 'Flow Interview Log'
        verbose_name_plural = 'Flow Interview Logs'
        # keyPrefix = '8gZ'



class FlowInterviewLogEntry(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='flowinterviewlogentry_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='flowinterviewlogentry_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    flow_interview_log = models.ForeignKey(FlowInterviewLog, models.DO_NOTHING, db_column='FlowInterviewLogId', verbose_name='Flow Interview Log ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    log_entry_type = models.CharField(db_column='LogEntryType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('FlowStart', 'Started Flow'), ('FlowPause', 'Paused Flow'), ('ScreenFinish', 'Clicked Finish'), ('Error', 'Error'), ('FlowResume', 'Resumed Flow'), ('ScreenNext', 'Clicked Next'), ('ScreenPrevious', 'Clicked Previous'), ('FlowFinish', 'Finished Flow')])
    element_api_name = models.CharField(db_column='ElementApiName', max_length=80, verbose_name='Element API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_entry_timestamp = models.DateTimeField(db_column='LogEntryTimestamp', sf_read_only=models.READ_ONLY)
    duration_since_start_in_minutes = models.DecimalField(db_column='DurationSinceStartInMinutes', max_digits=18, decimal_places=2, verbose_name='Duration In Minutes Since Flow Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    element_duration_in_minutes = models.DecimalField(db_column='ElementDurationInMinutes', max_digits=18, decimal_places=2, verbose_name='Element Duration in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    element_label = models.CharField(db_column='ElementLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterviewLogEntry'
        verbose_name = 'Flow Interview Log Entry'
        verbose_name_plural = 'Flow Interview Log Entries'
        # keyPrefix = '0f6'



class FlowInterviewLogShare(models.Model):
    parent = models.ForeignKey(FlowInterviewLog, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterviewLogShare'
        verbose_name = 'Flow Interview Log Share'
        verbose_name_plural = 'Flow Interview Log Share'
        # keyPrefix = None



class FlowInterviewShare(models.Model):
    parent = models.ForeignKey(FlowInterview, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterviewShare'
        verbose_name = 'Flow Interview Share'
        verbose_name_plural = 'Flow Interview Share'
        # keyPrefix = None



class FlowRecordRelation(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='flowrecordrelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='flowrecordrelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(FlowInterview, models.DO_NOTHING, db_column='ParentId', verbose_name='Flow Interview ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    related_record = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Record ID')  # Reference to tables [Account, AccountContactRelation, AccountContactRole, AccountPartner, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, AgentWork, AgentWorkSkill, Announcement, AppAnalyticsQueryRequest, Approval, Asset, AssetRelationship, Attachment, BackgroundOperation, BriefcaseAssignment, CalendarView, Campaign, CampaignMember, Case, CaseContactRole, CaseMilestone, CaseRelatedIssue, CaseSolution, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, CollaborationGroupMember, CollaborationGroupMemberRequest, CollaborationGroupRecord, CollaborationInvitation, ConferenceNumber, Contact, ContactRequest, ContentDistribution, ContentDocument, ContentDocumentLink, ContentDocumentSubscription, ContentFolder, ContentFolderLink, ContentFolderMember, ContentNote, ContentNotification, ContentVersion, ContentVersionComment, ContentVersionRating, ContentWorkspaceDoc, Contract, ContractContactRole, ContractLineItem, Dashboard, DashboardComponent, DataAssessmentFieldMetric, DataAssessmentMetric, DataAssessmentValueMetric, DeleteEvent, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, DialerCallUsage, Document, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, EmailMessageRelation, EnhancedLetterhead, Entitlement, EntityMilestone, EntitySubscription, Event, EventRelation, ExpressionFilter, ExpressionFilterCriteria, ExternalEvent, ExternalEventMapping, FeedAttachment, FeedComment, FeedItem, FeedPollChoice, FeedPollVote, FeedRevision, FileSearchActivity, FlowInterviewLog, FlowInterviewLogEntry, FlowStageRelation, FlowTestResult, ForecastingAdjustment, ForecastingFact, ForecastingItem, ForecastingOwnerAdjustment, ForecastingQuota, Idea, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, InstalledMobileApp, Lead, ListEmail, ListEmailIndividualRecipient, ListEmailRecipientSource, Macro, MacroInstruction, MacroUsage, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, ManagedContent, ManagedContentChannel, MatchingInformation, Note, Opportunity, OpportunityContactRole, OpportunityLineItem, OpportunityLineItemSchedule, OpportunityPartner, Order, OrderItem, OrgMetric, OrgMetricScanResult, OrgMetricScanSummary, OutOfOffice, Partner, PendingServiceRouting, PendingServiceRoutingInteractionInfo, Pricebook2, PricebookEntry, Problem, ProblemIncident, ProblemRelatedItem, ProcessException, Product2, ProductEntitlementTemplate, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, PromptAction, PromptError, PushTopic, QuickText, QuickTextUsage, Quote, QuoteDocument, QuoteLineItem, Recommendation, RecommendationResponse, RecordAction, Report, Scorecard, ScorecardAssociation, ScorecardMetric, ServiceContract, ServiceResource, ServiceResourceSkill, ServiceSetupProvisioning, SetupAssistantStep, SkillRequirement, SocialPersona, SocialPost, Solution, StreamingChannel, Task, TaskRelation, TodayGoal, Topic, TopicAssignment, UserAppInfo, UserAppMenuCustomization, UserEmailPreferredPerson, UserProvAccount, UserProvAccountStaging, UserProvMockTarget, UserProvisioningLog, UserProvisioningRequest, UserServicePresence, VoiceCall, VoiceCallList, VoiceCallListItem, VoiceCallQualityFeedback, VoiceCallRecording, VoiceCoaching, VoiceMailContent, VoiceMailGreeting, VoiceMailMessage, VoiceVendorLine, WaveAutoInstallRequest, WaveCompatibilityCheckItem, WorkAccess, WorkBadge, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, WorkThanks, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c]
    class Meta(models.Model.Meta):
        db_table = 'FlowRecordRelation'
        verbose_name = 'Flow Record Relation'
        verbose_name_plural = 'Flow Record Relations'
        # keyPrefix = '31z'



class FlowStageRelation(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='flowstagerelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='flowstagerelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(FlowInterview, models.DO_NOTHING, db_column='ParentId', verbose_name='Flow Interview ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    stage_order = models.IntegerField(db_column='StageOrder', sf_read_only=models.READ_ONLY)
    stage_type = models.CharField(db_column='StageType', max_length=255, sf_read_only=models.READ_ONLY, default='Active', choices=[('Active', None), ('Current', None)], blank=True, null=True)
    stage_label = models.CharField(db_column='StageLabel', max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    flex_index = models.CharField(db_column='FlexIndex', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowStageRelation'
        verbose_name = 'Flow Interview Stage Relation'
        verbose_name_plural = 'Flow Interview Stage Relations'
        # keyPrefix = '31y'



class FlowTestResult(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='flowtestresult_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='flowtestresult_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    flow_version_number = models.IntegerField(db_column='FlowVersionNumber', sf_read_only=models.READ_ONLY, blank=True, null=True)
    result = models.CharField(db_column='Result', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Error', 'Error')], blank=True, null=True)
    flow_test_view_id = models.CharField(db_column='FlowTestViewId', max_length=512, verbose_name='Flow Test View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_version_view_id = models.CharField(db_column='FlowVersionViewId', max_length=512, verbose_name='Flow Version View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_definition_view_id = models.CharField(db_column='FlowDefinitionViewId', max_length=512, verbose_name='Flow Definition View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    test_start_date_time = models.DateTimeField(db_column='TestStartDateTime', verbose_name='Test Start Date and Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    test_end_date_time = models.DateTimeField(db_column='TestEndDateTime', verbose_name='Test End Date and Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowTestResult'
        verbose_name = 'Flow Test Result'
        verbose_name_plural = 'Flow Test Results'
        # keyPrefix = '2hU'



class FlowTestResultShare(models.Model):
    parent = models.ForeignKey(FlowTestResult, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FlowTestResultShare'
        verbose_name = 'Flow Test Result Share'
        verbose_name_plural = 'Flow Test Result Share'
        # keyPrefix = None



class FlowTestView(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_definition_view_id = models.CharField(db_column='FlowDefinitionViewId', max_length=512, verbose_name='Flow Definition View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_test_api_name = models.CharField(db_column='FlowTestApiName', max_length=255, verbose_name='Flow Test API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_test_label = models.CharField(db_column='FlowTestLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='flowtestview_lastmodifiedby_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='flowtestview_createdby_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FlowTestView'
        verbose_name = 'Flow Test View'
        verbose_name_plural = 'Flow Test Views'
        # keyPrefix = '4YB'



class FlowVariableView(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_version_view_id = models.CharField(db_column='FlowVersionViewId', max_length=512, verbose_name='Flow Version View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, verbose_name='Variable API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Variable Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(db_column='DataType', max_length=255, verbose_name='Variable Data Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_input = models.BooleanField(db_column='IsInput', verbose_name='Variable is available for input', sf_read_only=models.READ_ONLY, default=False)
    is_output = models.BooleanField(db_column='IsOutput', verbose_name='Variable is available for output', sf_read_only=models.READ_ONLY, default=False)
    is_collection = models.BooleanField(db_column='IsCollection', verbose_name='Variable allows multiple values (collection)', sf_read_only=models.READ_ONLY, default=False)
    object_type = models.CharField(db_column='ObjectType', max_length=255, verbose_name='Record Variable Object', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowVariableView'
        verbose_name = 'Flow Variable'
        verbose_name_plural = 'Flow Variables'
        # keyPrefix = '3ad'



class FlowVersionView(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    flow_definition_view_id = models.CharField(db_column='FlowDefinitionViewId', max_length=512, verbose_name='Flow Definition View ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=255, verbose_name='Version Label', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Version Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, verbose_name='Version Status', sf_read_only=models.READ_ONLY, choices=[('Active', None), ('Draft', None), ('Obsolete', None), ('InvalidDraft', None)], blank=True, null=True)
    version_number = models.IntegerField(db_column='VersionNumber', sf_read_only=models.READ_ONLY, blank=True, null=True)
    process_type = models.CharField(db_column='ProcessType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('AutoLaunchedFlow', 'Autolaunched Flow'), ('Flow', 'Screen Flow'), ('Workflow', 'Record Change Process'), ('CustomEvent', 'Platform Event Process'), ('InvocableProcess', 'Invocable Process'), ('LoginFlow', 'Login Flow'), ('ActionPlan', 'Action Plan'), ('JourneyBuilderIntegration', 'Journey Builder Integration'), ('UserProvisioningFlow', 'User Provisioning Flow'), ('Survey', 'Survey'), ('SurveyEnrich', 'Survey Enrich Flow'), ('Appointments', 'Salesforce Scheduler Flow'), ('FSCLending', 'Mortgage Flow'), ('DigitalForm', 'Digital Form Flow'), ('FieldServiceMobile', 'Field Service Mobile Flow'), ('OrchestrationFlow', 'Orchestration Flow'), ('FieldServiceWeb', 'Embedded Appointment Management Flow'), ('TransactionSecurityFlow', 'Transaction Security Flow'), ('ContactRequestFlow', 'Contact Request Flow'), ('ActionCadenceFlow', 'Sales Cadence Flow'), ('ManagedContentFlow', 'Managed Content Flow'), ('CheckoutFlow', 'Checkout Flow'), ('CartAsyncFlow', 'Cart Async Flow'), ('CustomerLifecycle', 'Customer Lifecycle Flow'), ('Journey', 'Journey OSL Flow'), ('RecommendationStrategy', 'Recommendation Strategy'), ('Orchestrator', 'Orchestrator'), ('RoutingFlow', 'Omni-Channel Flow'), ('ServiceCatalogItemFlow', 'Employee Service Catalog Item Flow'), ('EvaluationFlow', 'Evaluation Flow'), ('LoyaltyManagementFlow', 'Loyalty Management Flow'), ('CMSOrchestrator', 'Flow Orchestrator for CMS')], blank=True, null=True)
    is_template = models.BooleanField(db_column='IsTemplate', sf_read_only=models.READ_ONLY, default=False)
    run_in_mode = models.CharField(db_column='RunInMode', max_length=255, verbose_name='Run in Mode', sf_read_only=models.READ_ONLY, choices=[('DefaultMode', 'DefaultMode'), ('SystemModeWithSharing', 'SystemModeWithSharing'), ('SystemModeWithoutSharing', 'SystemModeWithoutSharing')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    is_swing_flow = models.BooleanField(db_column='IsSwingFlow', sf_read_only=models.READ_ONLY, default=False)
    api_version = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version_runtime = models.DecimalField(db_column='ApiVersionRuntime', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowVersionView'
        verbose_name = 'Flow Version'
        verbose_name_plural = 'Flow Versions'
        # keyPrefix = '3vd'



class Folder(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', verbose_name='Folder ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=40)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Folder Unique Name', blank=True, null=True)
    access_type = models.CharField(db_column='AccessType', max_length=40, choices=[('Shared', 'Shared'), ('Public', 'Public'), ('Hidden', 'Hidden'), ('PublicInternal', 'Public Internal')])
    is_readonly = models.BooleanField(db_column='IsReadonly', verbose_name='Read Only', default=False)
    type = models.CharField(db_column='Type', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Document', 'Document'), ('Email', 'Email Template'), ('Report', 'Report'), ('Dashboard', 'Dashboard'), ('QuickText', 'Quick Text'), ('Macro', 'Macro'), ('EmailTemplate', 'Email Template'), ('ActionCadence', 'Sales Cadence'), ('AnalyticAssetCollection', 'Analytic Asset Collection')])
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='folder_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='folder_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Folder'
        verbose_name = 'Folder'
        verbose_name_plural = 'Folders'
        # keyPrefix = '00l'



class FolderedContentDocument(models.Model):
    is_folder = models.BooleanField(db_column='IsFolder', sf_read_only=models.READ_ONLY, default=False)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY)
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, db_column='ParentContentFolderId', verbose_name='Parent Content Folder ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY)
    file_type = models.CharField(db_column='FileType', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(db_column='FileExtension', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='folderedcontentdocument_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='folderedcontentdocument_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FolderedContentDocument'
        verbose_name = 'Foldered Content Document'
        verbose_name_plural = 'Foldered Content Documents'
        # keyPrefix = None



class ForecastingAdjustment(models.Model):
    forecasting_item = models.ForeignKey('ForecastingItem', models.DO_NOTHING, db_column='ForecastingItemId', verbose_name='Forecasting Item ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    period = models.ForeignKey('Period', models.DO_NOTHING, db_column='PeriodId', verbose_name='Period ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', verbose_name='Period Start Date', sf_read_only=models.NOT_UPDATEABLE)
    product_family = models.CharField(db_column='ProductFamily', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('Junk', 'Junk'), ('Business Dumpster', 'Business Dumpster'), ('Large Dumpster', 'Large Dumpster'), ('Apartment Services', 'Apartment Services')], blank=True, null=True)
    forecasting_item_category = models.CharField(db_column='ForecastingItemCategory', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'Closed Only'), ('OpenPipeline', 'Open Pipeline'), ('BestCaseForecast', 'Best Case Forecast'), ('CommitForecast', 'Commit Forecast')])
    forecast_category_name = models.CharField(db_column='ForecastCategoryName', max_length=255, verbose_name='Forecast Category', sf_read_only=models.NOT_UPDATEABLE, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    adjusted_amount = models.DecimalField(db_column='AdjustedAmount', max_digits=18, decimal_places=0)
    adjusted_quantity = models.DecimalField(db_column='AdjustedQuantity', max_digits=12, decimal_places=2)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='forecastingadjustment_owner_set', verbose_name='Owner ID', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_quantity = models.BooleanField(db_column='IsQuantity', sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(db_column='IsAmount', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingadjustment_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingadjustment_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, db_column='ForecastingTypeId', verbose_name='Forecasting Type ID', sf_read_only=models.NOT_UPDATEABLE)
    adjustment_note = models.TextField(db_column='AdjustmentNote', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingAdjustment'
        verbose_name = 'Forecasting Adjustment'
        verbose_name_plural = 'Forecasting Adjustments'
        # keyPrefix = '0G7'



class ForecastingCategoryMapping(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingcategorymapping_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingcategorymapping_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    source_category = models.CharField(db_column='SourceCategory', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')])
    forecasting_item_category = models.CharField(db_column='ForecastingItemCategory', max_length=40, sf_read_only=models.READ_ONLY, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'Closed Only'), ('OpenPipeline', 'Open Pipeline'), ('BestCaseForecast', 'Best Case Forecast'), ('CommitForecast', 'Commit Forecast')])
    class Meta(models.Model.Meta):
        db_table = 'ForecastingCategoryMapping'
        verbose_name = 'Forecasting Category Mapping'
        verbose_name_plural = 'Forecasting Category Mappings'
        # keyPrefix = '0Jd'



class ForecastingDisplayedFamily(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingdisplayedfamily_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingdisplayedfamily_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    product_family = models.CharField(db_column='ProductFamily', unique=True, max_length=40, sf_read_only=models.READ_ONLY, choices=[('Junk', 'Junk'), ('Business Dumpster', 'Business Dumpster'), ('Large Dumpster', 'Large Dumpster'), ('Apartment Services', 'Apartment Services')])
    display_position = models.IntegerField(db_column='DisplayPosition', unique=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingDisplayedFamily'
        verbose_name = 'Forecasting Displayed Family'
        verbose_name_plural = 'Forecasting Displayed Families'
        # keyPrefix = '0Zx'



class ForecastingFact(models.Model):
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)
    period = models.ForeignKey('Period', models.DO_NOTHING, db_column='PeriodId', verbose_name='Period ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_category_name = models.CharField(db_column='ForecastCategoryName', max_length=255, verbose_name='Forecast Category', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')])
    opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.READ_ONLY)
    forecasted_object = models.ForeignKey('OpportunityLineItem', models.DO_NOTHING, db_column='ForecastedObjectId', verbose_name='ForecastedObject ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecasting_item = models.ForeignKey('ForecastingItem', models.DO_NOTHING, db_column='ForecastingItemId', verbose_name='Forecasting Item ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, db_column='ForecastingTypeId', verbose_name='Forecasting Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingFact'
        verbose_name = 'Forecasting Fact'
        verbose_name_plural = 'Forecasting Facts'
        # keyPrefix = '0G6'



class ForecastingFilter(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingfilter_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingfilter_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_type_source = models.ForeignKey('ForecastingTypeSource', models.DO_NOTHING, db_column='ForecastingTypeSourceId', verbose_name='Forecasting Type Source ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, db_column='ForecastingTypeId', verbose_name='Forecasting Type ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    filter_logic = models.CharField(db_column='FilterLogic', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingFilter'
        verbose_name = 'Forecasting Filter'
        verbose_name_plural = 'Forecasting Filters'
        # keyPrefix = '0r0'



class ForecastingFilterCondition(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingfiltercondition_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingfiltercondition_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_filter = models.ForeignKey(ForecastingFilter, models.DO_NOTHING, db_column='ForecastingFilterId', verbose_name='Forecasting Filter ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    field_name = models.CharField(db_column='FieldName', max_length=255)
    operation = models.CharField(db_column='Operation', max_length=255, choices=[('equals', 'equals'), ('notEqual', 'not equal to'), ('lessThan', 'less than'), ('greaterThan', 'greater than'), ('lessOrEqual', 'less or equal'), ('greaterOrEqual', 'greater or equal'), ('contains', 'contains'), ('notContain', 'does not contain'), ('startsWith', 'starts with'), ('includes', 'includes'), ('excludes', 'excludes'), ('within', 'within')])
    value = models.CharField(db_column='Value', max_length=255, blank=True, null=True)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.NOT_UPDATEABLE)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingFilterCondition'
        verbose_name = 'Forecasting Filter Condition'
        verbose_name_plural = 'Forecasting Filter Conditions'
        # keyPrefix = '1ZK'



class ForecastingItem(models.Model):
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)
    period = models.ForeignKey('Period', models.DO_NOTHING, db_column='PeriodId', verbose_name='Period ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecasting_item_category = models.CharField(db_column='ForecastingItemCategory', max_length=255, sf_read_only=models.READ_ONLY, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'Closed Only'), ('OpenPipeline', 'Open Pipeline'), ('BestCaseForecast', 'Best Case Forecast'), ('CommitForecast', 'Commit Forecast')])
    forecast_category_name = models.CharField(db_column='ForecastCategoryName', max_length=255, verbose_name='Forecast Category', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    parent_forecasting_item = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentForecastingItemId', verbose_name='Forecasting Item ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product_family = models.CharField(db_column='ProductFamily', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Junk', 'Junk'), ('Business Dumpster', 'Business Dumpster'), ('Large Dumpster', 'Large Dumpster'), ('Apartment Services', 'Apartment Services')], blank=True, null=True)
    owner_only_amount = models.DecimalField(db_column='OwnerOnlyAmount', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_without_adjustments = models.DecimalField(db_column='AmountWithoutAdjustments', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_without_manager_adjustment = models.DecimalField(db_column='AmountWithoutManagerAdjustment', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_amount = models.DecimalField(db_column='ForecastAmount', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner_only_quantity = models.DecimalField(db_column='OwnerOnlyQuantity', max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity_without_adjustments = models.DecimalField(db_column='QuantityWithoutAdjustments', max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity_without_manager_adjustment = models.DecimalField(db_column='QuantityWithoutManagerAdjustment', max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_quantity = models.DecimalField(db_column='ForecastQuantity', max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_quantity = models.BooleanField(db_column='IsQuantity', sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(db_column='IsAmount', sf_read_only=models.READ_ONLY, default=False)
    has_adjustment = models.BooleanField(db_column='HasAdjustment', sf_read_only=models.READ_ONLY, default=False)
    has_owner_adjustment = models.BooleanField(db_column='HasOwnerAdjustment', sf_read_only=models.READ_ONLY, default=False)
    is_up_to_date = models.BooleanField(db_column='IsUpToDate', verbose_name='Is up to date', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, db_column='ForecastingTypeId', verbose_name='Forecasting Type ID', sf_read_only=models.READ_ONLY)
    amount_without_owner_adjustment = models.DecimalField(db_column='AmountWithoutOwnerAdjustment', max_digits=18, decimal_places=0, verbose_name='Amount Without Owner Adjustments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity_without_owner_adjustment = models.DecimalField(db_column='QuantityWithoutOwnerAdjustment', max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    subordinate_overrides = models.IntegerField(db_column='SubordinateOverrides', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingItem'
        verbose_name = 'Forecasting Item'
        verbose_name_plural = 'Forecasting Items'
        # keyPrefix = '0G3'



class ForecastingOwnerAdjustment(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingowneradjustment_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingowneradjustment_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_item = models.OneToOneField(ForecastingItem, models.DO_NOTHING, db_column='ForecastingItemId', verbose_name='Forecasting Item ID', sf_read_only=models.READ_ONLY)
    owner_adjusted_amount = models.DecimalField(db_column='OwnerAdjustedAmount', max_digits=18, decimal_places=0, blank=True, null=True)
    owner_adjusted_quantity = models.DecimalField(db_column='OwnerAdjustedQuantity', max_digits=12, decimal_places=2, blank=True, null=True)
    owner_adjustment_note = models.TextField(db_column='OwnerAdjustmentNote', blank=True, null=True)
    period = models.ForeignKey('Period', models.DO_NOTHING, db_column='PeriodId', verbose_name='Period ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_owner = models.ForeignKey('User', models.DO_NOTHING, db_column='ForecastOwnerId', related_name='forecastingowneradjustment_forecastowner_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', verbose_name='Period Start Date', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product_family = models.CharField(db_column='ProductFamily', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Junk', 'Junk'), ('Business Dumpster', 'Business Dumpster'), ('Large Dumpster', 'Large Dumpster'), ('Apartment Services', 'Apartment Services')], blank=True, null=True)
    forecasting_item_category = models.CharField(db_column='ForecastingItemCategory', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'Closed Only'), ('OpenPipeline', 'Open Pipeline'), ('BestCaseForecast', 'Best Case Forecast'), ('CommitForecast', 'Commit Forecast')])
    forecast_category_name = models.CharField(db_column='ForecastCategoryName', max_length=40, verbose_name='Forecast Category', sf_read_only=models.NOT_UPDATEABLE, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    is_quantity = models.BooleanField(db_column='IsQuantity', sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(db_column='IsAmount', sf_read_only=models.READ_ONLY, default=False)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, db_column='ForecastingTypeId', verbose_name='Forecasting Type ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingOwnerAdjustment'
        verbose_name = 'Forecasting Owner Adjustment'
        verbose_name_plural = 'Forecasting Owner Adjustments'
        # keyPrefix = '08Q'



class ForecastingQuota(models.Model):
    period = models.ForeignKey('Period', models.DO_NOTHING, db_column='PeriodId', verbose_name='Period ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', verbose_name='Quota Month')
    product_family = models.CharField(db_column='ProductFamily', max_length=255, choices=[('Junk', 'Junk'), ('Business Dumpster', 'Business Dumpster'), ('Large Dumpster', 'Large Dumpster'), ('Apartment Services', 'Apartment Services')], blank=True, null=True)
    quota_amount = models.DecimalField(db_column='QuotaAmount', max_digits=18, decimal_places=0)
    quota_quantity = models.DecimalField(db_column='QuotaQuantity', max_digits=12, decimal_places=2)
    quota_owner = models.ForeignKey('User', models.DO_NOTHING, db_column='QuotaOwnerId', related_name='forecastingquota_quotaowner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    is_quantity = models.BooleanField(db_column='IsQuantity', sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(db_column='IsAmount', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingquota_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingquota_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, db_column='ForecastingTypeId', verbose_name='Forecasting Type ID', sf_read_only=models.NOT_UPDATEABLE)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingQuota'
        verbose_name = 'Forecasting Quota'
        verbose_name_plural = 'Forecasting Quotas'
        # keyPrefix = '0J9'



class ForecastingShare(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingshare_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingshare_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user_or_group = models.ForeignKey('User', models.DO_NOTHING, db_column='UserOrGroupId', related_name='forecastingshare_userorgroup_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    shared_forecast_manager_role = models.ForeignKey('UserRole', models.DO_NOTHING, db_column='SharedForecastManagerRoleId', verbose_name='SharedForecastManagerRole ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=255, verbose_name='Forecasting Share Access Level', choices=[('ViewOnly', '0'), ('ViewAndEdit', '1')])
    role_type = models.CharField(db_column='RoleType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('R', None), ('T', None), ('Y', None)])
    class Meta(models.Model.Meta):
        db_table = 'ForecastingShare'
        verbose_name = 'Forecasting Share'
        verbose_name_plural = 'Forecasting Shares'
        # keyPrefix = '0Jc'



class ForecastingSourceDefinition(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingsourcedefinition_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingsourcedefinition_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    source_object = models.CharField(db_column='SourceObject', max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Opportunity', None), ('OpportunityLineItem', None), ('OpportunityLineItemSchedule', None), ('Product2', None)])
    measure_field = models.CharField(db_column='MeasureField', max_length=255, verbose_name='Custom Field Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Opportunity.Amount', None), ('Opportunity.TotalOpportunityQuantity', None), ('OpportunityLineItem.Quantity', None), ('OpportunityLineItem.TotalPrice', None), ('OpportunityLineItemSchedule.Quantity', None), ('OpportunityLineItemSchedule.Revenue', None)], blank=True, null=True)
    date_field = models.CharField(db_column='DateField', max_length=255, verbose_name='Custom Field Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Opportunity.CloseDate', None), ('OpportunityLineItem.ServiceDate', None), ('OpportunityLineItemSchedule.ScheduleDate', None)], blank=True, null=True)
    user_field = models.CharField(db_column='UserField', max_length=255, verbose_name='Custom Field Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Opportunity.OwnerId', None)], blank=True, null=True)
    territory2_field = models.CharField(db_column='Territory2Field', max_length=255, verbose_name='Custom Field Definition ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    category_field = models.CharField(db_column='CategoryField', max_length=255, verbose_name='Custom Field Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Opportunity.ForecastCategoryName', None)], blank=True, null=True)
    family_field = models.CharField(db_column='FamilyField', max_length=255, verbose_name='Custom Field Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Product2.Family', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingSourceDefinition'
        verbose_name = 'Forecasting Source Definition'
        verbose_name_plural = 'Forecasting Source Definitions'
        # keyPrefix = '7sy'



class ForecastingType(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='API Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingtype_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingtype_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', default=False)
    is_quantity = models.BooleanField(db_column='IsQuantity', sf_read_only=models.NOT_UPDATEABLE, default=False)
    is_amount = models.BooleanField(db_column='IsAmount', sf_read_only=models.NOT_UPDATEABLE, default=False)
    can_display_quotas = models.BooleanField(db_column='CanDisplayQuotas', sf_read_only=models.NOT_UPDATEABLE, default=False)
    has_product_family = models.BooleanField(db_column='HasProductFamily', sf_read_only=models.NOT_UPDATEABLE, default=False)
    role_type = models.CharField(db_column='RoleType', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('R', None), ('T', None), ('Y', None)])
    date_type = models.CharField(db_column='DateType', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('OpportunityCloseDate', '0'), ('ProductDate', '1'), ('ScheduleDate', '2'), ('OLIMeasureCloseDateOnly', '3'), ('ProductDateOnly', '4'), ('ScheduleDateOnly', '5')])
    is_platform_type = models.BooleanField(db_column='IsPlatformType', sf_read_only=models.READ_ONLY, default=False)
    last_activated_date = models.DateTimeField(db_column='LastActivatedDate', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingType'
        verbose_name = 'Forecasting Type'
        verbose_name_plural = 'Forecasting Types'
        # keyPrefix = '0Db'



class ForecastingTypeSource(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingtypesource_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingtypesource_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey(ForecastingType, models.DO_NOTHING, db_column='ForecastingTypeId', verbose_name='Forecasting Type ID', sf_read_only=models.NOT_UPDATEABLE)
    forecasting_source_definition = models.ForeignKey(ForecastingSourceDefinition, models.DO_NOTHING, db_column='ForecastingSourceDefinitionId', related_name='forecastingtypesource_forecastingsourcedefinition_set', verbose_name='Forecasting Source Definition ID', sf_read_only=models.NOT_UPDATEABLE)
    source_group = models.IntegerField(db_column='SourceGroup', sf_read_only=models.NOT_UPDATEABLE)
    parent_source_definition = models.ForeignKey(ForecastingSourceDefinition, models.DO_NOTHING, db_column='ParentSourceDefinitionId', related_name='forecastingtypesource_parentsourcedefinition_set', verbose_name='Forecasting Source Definition ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relation_field = models.CharField(db_column='RelationField', max_length=255, verbose_name='Custom Field Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('OpportunityLineItem.OpportunityId', None), ('OpportunityLineItem.Product2Id', None), ('OpportunityLineItemSchedule.OpportunityLineItemId', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingTypeSource'
        verbose_name = 'Forecasting Type Source'
        verbose_name_plural = 'Forecasting Type Sources'
        # keyPrefix = '0hl'



class ForecastingTypeToCategory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='forecastingtypetocategory_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='forecastingtypetocategory_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey(ForecastingType, models.DO_NOTHING, db_column='ForecastingTypeId', verbose_name='Forecasting Type ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    forecasting_item_category = models.CharField(db_column='ForecastingItemCategory', max_length=40, sf_read_only=models.READ_ONLY, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'Closed Only'), ('OpenPipeline', 'Open Pipeline'), ('BestCaseForecast', 'Best Case Forecast'), ('CommitForecast', 'Commit Forecast')])
    display_position = models.IntegerField(db_column='DisplayPosition', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_adjustable = models.BooleanField(db_column='IsAdjustable', sf_read_only=models.READ_ONLY, default=False)
    is_owner_adjustable = models.BooleanField(db_column='IsOwnerAdjustable', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingTypeToCategory'
        verbose_name = 'Forecasting Type To Category Mapping'
        verbose_name_plural = 'Forecasting Type To Category Mappings'
        # keyPrefix = '0Jg'



class ForecastingUserPreference(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='External ID', blank=True, null=True)
    forecasting_start_period = models.IntegerField(db_column='ForecastingStartPeriod', verbose_name='Period Start', blank=True, null=True)
    forecasting_period_duration = models.IntegerField(db_column='ForecastingPeriodDuration', verbose_name='Period Duration', blank=True, null=True)
    forecasting_period_type = models.CharField(db_column='ForecastingPeriodType', max_length=255, verbose_name='Period Type', choices=[('Month', None), ('Quarter', None), ('Week', None), ('Year', None)], blank=True, null=True)
    forecasting_displayed_type = models.ForeignKey(ForecastingType, models.DO_NOTHING, db_column='ForecastingDisplayedTypeId', verbose_name='Forecasting Type ID')
    forecasting_view_currency = models.CharField(db_column='ForecastingViewCurrency', max_length=40, verbose_name='Viewing Currency', blank=True, null=True)
    is_hide_forecasting_guided_tour = models.BooleanField(db_column='IsHideForecastingGuidedTour', verbose_name='Hide Guided Tour', default=False)
    is_show_forecasting_quota_attainment = models.BooleanField(db_column='IsShowForecastingQuotaAttainment', verbose_name='Show Quota Attainment', default=False)
    is_hide_forecasting_quota_column = models.BooleanField(db_column='IsHideForecastingQuotaColumn', verbose_name='Hide Quota Column', default=False)
    is_forecasting_show_quantity = models.BooleanField(db_column='IsForecastingShowQuantity', verbose_name='Show Quantity', default=False)
    is_forecasting_hide_zero_rows = models.BooleanField(db_column='IsForecastingHideZeroRows', verbose_name='Hide Zero Rows', default=False)
    is_show_forecasting_change_signals = models.BooleanField(db_column='IsShowForecastingChangeSignals', verbose_name='Show Change Signals', default=False)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingUserPreference'
        verbose_name = 'Forecasting User Preference'
        verbose_name_plural = 'Forecasting User Preferences'
        # keyPrefix = '0Cl'



class FormulaFunction(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Formula Function Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    category_id = models.CharField(db_column='CategoryId', max_length=80, verbose_name='Formula Function Category ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    example_string = models.CharField(db_column='ExampleString', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FormulaFunction'
        verbose_name = 'Formula Function'
        verbose_name_plural = 'Formula Functions'
        # keyPrefix = '0Kn'



class FormulaFunctionAllowedType(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Formula Function Allowed Type Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    function_id = models.CharField(db_column='FunctionId', max_length=80, verbose_name='Formula Function ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, sf_read_only=models.READ_ONLY, choices=[('VALIDATION', None), ('VISUALFORCE', None), ('FLOW', None), ('CONVERSATION_MESSAGE', None), ('LOYALTYFORMULA', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FormulaFunctionAllowedType'
        verbose_name = 'Formula Context Function'
        verbose_name_plural = 'Formula Context Functions'
        # keyPrefix = '0fE'



class FormulaFunctionCategory(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Formula Function Category Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FormulaFunctionCategory'
        verbose_name = 'Formula Function Category'
        verbose_name_plural = 'Formula Function Categories'
        # keyPrefix = '0Kh'



class GrantedByLicense(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='grantedbylicense_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='grantedbylicense_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, db_column='PermissionSetLicenseId', verbose_name='Permission Set License ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, db_column='CustomPermissionId', verbose_name='Custom Permission ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'GrantedByLicense'
        verbose_name = 'Setting Granted By License'
        verbose_name_plural = 'Settings Granted By Licenses'
        # keyPrefix = '06d'



class Group(models.Model):
    name = models.CharField(db_column='Name', max_length=40)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, blank=True, null=True)
    related = models.ForeignKey('User', models.DO_NOTHING, db_column='RelatedId', related_name='group_related_set', verbose_name='Related ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [User, UserRole]
    type = models.CharField(db_column='Type', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('AllCustomerPortal', None), ('ChannelProgramGroup', None), ('CollaborationGroup', None), ('Manager', None), ('ManagerAndSubordinatesInternal', None), ('Organization', None), ('Participant', None), ('PRMOrganization', None), ('Queue', None), ('Regular', None), ('Role', None), ('RoleAndSubordinates', None), ('RoleAndSubordinatesInternal', None), ('SharingRecordCollGroup', None), ('Territory', None), ('TerritoryAndSubordinates', None)])
    email = models.EmailField(db_column='Email', blank=True, null=True)
    queue_routing_config = models.ForeignKey('QueueRoutingConfig', models.DO_NOTHING, db_column='QueueRoutingConfigId', verbose_name='Routing Configuration ID', blank=True, null=True)
    owner = models.ForeignKey('Organization', models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Organization, User]
    does_send_email_to_members = models.BooleanField(db_column='DoesSendEmailToMembers', verbose_name='Send Email to Members', default=False)
    does_include_bosses = models.BooleanField(db_column='DoesIncludeBosses', verbose_name='Include Bosses', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='group_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='group_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Group'
        verbose_name = 'Group'
        verbose_name_plural = 'Group'
        # keyPrefix = '00G'



class GroupMember(models.Model):
    group = models.ForeignKey(Group, models.DO_NOTHING, db_column='GroupId', related_name='groupmember_group_set', verbose_name='Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', related_name='groupmember_userorgroup_set', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'GroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Member'
        # keyPrefix = '011'



class Holiday(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Holiday Name')
    description = models.CharField(db_column='Description', max_length=100, blank=True, null=True)
    is_all_day = models.BooleanField(db_column='IsAllDay', verbose_name='All Day', default=False)
    activity_date = models.DateField(db_column='ActivityDate', verbose_name='Holiday Date', blank=True, null=True)
    start_time_in_minutes = models.IntegerField(db_column='StartTimeInMinutes', verbose_name='Start Time In Minutes From Midnight', blank=True, null=True)
    end_time_in_minutes = models.IntegerField(db_column='EndTimeInMinutes', verbose_name='End Time In Minutes From Midnight', blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='holiday_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='holiday_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_recurrence = models.BooleanField(db_column='IsRecurrence', verbose_name='Recurring Holiday', default=False)
    recurrence_start_date = models.DateField(db_column='RecurrenceStartDate', verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(db_column='RecurrenceEndDateOnly', verbose_name='Recurrence End', blank=True, null=True)
    recurrence_type = models.CharField(db_column='RecurrenceType', max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthly Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(db_column='RecurrenceInterval', blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(db_column='RecurrenceDayOfWeekMask', verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(db_column='RecurrenceDayOfMonth', verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(db_column='RecurrenceInstance', max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(db_column='RecurrenceMonthOfYear', max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Holiday'
        verbose_name = 'Holiday'
        verbose_name_plural = 'Holidays'
        # keyPrefix = '0C0'



class IpaddressRange(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='ipaddressrange_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='ipaddressrange_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    ip_address_feature = models.CharField(db_column='IpAddressFeature', max_length=255, verbose_name='IP Address Feature', default='EmailIpFiltering', choices=[('EmailIpFiltering', 'Email IP Filtering')])
    ip_address_usage_scope = models.CharField(db_column='IpAddressUsageScope', max_length=255, verbose_name='Usage Scope', default='Exclusion', choices=[('Exclusion', 'Exclusion'), ('Inclusion', 'Inclusion')])
    start_address = models.CharField(db_column='StartAddress', max_length=39)
    end_address = models.CharField(db_column='EndAddress', max_length=39)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IPAddressRange'
        verbose_name = 'IP Address Range'
        verbose_name_plural = 'IP Address Ranges'
        # keyPrefix = '9s4'



class IconDefinition(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Icon Definition Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tab_definition_id = models.CharField(db_column='TabDefinitionId', max_length=512, verbose_name='Tab Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    url = models.CharField(db_column='Url', max_length=255, verbose_name='URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_type = models.CharField(db_column='ContentType', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    theme = models.CharField(db_column='Theme', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    height = models.IntegerField(db_column='Height', sf_read_only=models.READ_ONLY, blank=True, null=True)
    width = models.IntegerField(db_column='Width', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IconDefinition'
        verbose_name = 'Icon Definition'
        verbose_name_plural = 'Icon Definitions'
        # keyPrefix = '09k'



class Idea(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    title = models.CharField(db_column='Title', max_length=255)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, db_column='RecordTypeId', verbose_name='Record Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='idea_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='idea_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    community = models.ForeignKey(Community, models.DO_NOTHING, db_column='CommunityId', verbose_name='Zone ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    body = models.TextField(db_column='Body', verbose_name='Idea Body', blank=True, null=True)
    num_comments = models.IntegerField(db_column='NumComments', verbose_name='Number of Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    vote_score = models.DecimalField(db_column='VoteScore', max_digits=18, decimal_places=4, sf_read_only=models.READ_ONLY, blank=True, null=True)
    vote_total = models.DecimalField(db_column='VoteTotal', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    categories = models.CharField(db_column='Categories', max_length=4099, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, blank=True, null=True)
    last_comment_date = models.DateTimeField(db_column='LastCommentDate', verbose_name='Last Idea Comment Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_comment = models.ForeignKey('IdeaComment', models.DO_NOTHING, db_column='LastCommentId', related_name='idea_lastcomment_set', verbose_name='Idea Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_idea = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentIdeaId', verbose_name='Idea ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    is_html = models.BooleanField(db_column='IsHtml', verbose_name='IsHtml', sf_read_only=models.READ_ONLY, default=False)
    is_merged = models.BooleanField(db_column='IsMerged', sf_read_only=models.READ_ONLY, default=False)
    creator_full_photo_url = models.CharField(db_column='CreatorFullPhotoUrl', max_length=255, verbose_name="Url of Creator's Profile Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_small_photo_url = models.CharField(db_column='CreatorSmallPhotoUrl', max_length=255, verbose_name="Url of Creator's Thumbnail Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_name = models.CharField(db_column='CreatorName', max_length=121, verbose_name='Name of Creator', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Idea'
        verbose_name = 'Idea'
        verbose_name_plural = 'Ideas'
        # keyPrefix = '087'



class IdeaComment(models.Model):
    idea = models.ForeignKey(Idea, models.DO_NOTHING, db_column='IdeaId', verbose_name='Idea ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    community = models.ForeignKey(Community, models.DO_NOTHING, db_column='CommunityId', verbose_name='Zone ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    comment_body = models.TextField(db_column='CommentBody', blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_html = models.BooleanField(db_column='IsHtml', verbose_name='IsHtml', sf_read_only=models.READ_ONLY, default=False)
    creator_full_photo_url = models.CharField(db_column='CreatorFullPhotoUrl', max_length=255, verbose_name="Url of Creator's Profile Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_small_photo_url = models.CharField(db_column='CreatorSmallPhotoUrl', max_length=255, verbose_name="Url of Creator's Thumbnail Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_name = models.CharField(db_column='CreatorName', max_length=121, verbose_name='Name of Creator', sf_read_only=models.READ_ONLY, blank=True, null=True)
    up_votes = models.IntegerField(db_column='UpVotes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IdeaComment'
        verbose_name = 'Idea Comment'
        verbose_name_plural = 'Idea Comments'
        # keyPrefix = '00a'



class IdpEventLog(models.Model):
    initiated_by = models.CharField(db_column='InitiatedBy', max_length=40, verbose_name='Usage Type', sf_read_only=models.READ_ONLY, choices=[('IdP', 'IdP-Initiated SAML'), ('SP', 'SP-Initiated SAML'), ('OauthAuthorize', 'OAuth Authorization'), ('OauthTokenExchange', 'OAuth Token Exchange'), ('Unused', None)])
    timestamp = models.DateTimeField(db_column='Timestamp', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_code = models.CharField(db_column='ErrorCode', max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Success', 'Success'), ('NoSubdomain', 'Error: Org has not configured My Domains yet'), ('InvalidIdpEndpoint', 'Error: Invalid Identity Provider Endpoint URL'), ('InvalidAuthnRequest', 'Error: Unable to parse AuthnRequest from service provider'), ('InvalidSp', 'Error: Misconfigured or invalid service provider'), ('NoUserFedId', 'Error: User does not have a Federation Identifier selected'), ('NoAccess', 'Error: User does not have access to this service provider'), ('InvalidSettings', 'Error: IdP certificate is invalid or does not exist'), ('NoSpokeId', 'Error: No Spoke ID found'), ('InvalidSpokeSp', 'Error: Invalid spoke SP settings'), ('NoCustomAttrValue', 'Error: User does not have a value for the subject custom attribute'), ('NoCustomField', 'Error: Custom field not found'), ('ForceAuthNLogout', 'User logged out due to forced authentication request'), ('InvalidIssuer', 'Error: Invalid Issuer'), ('InvalidSignature', 'Error: Invalid Signature'), ('UnableToResolve', 'Error: Unable to resolve request into a Service Provider'), ('InvalidSessionLevel', 'Error: Invalid session level'), ('InternalError', 'Error: Internal Error'), ('OauthError', 'OAuth Error'), ('AppAccessDenied', 'Error: App access denied'), ('AppBlocked', 'Error: App blocked'), ('ClientUnapproved', 'Error: Invalid grant'), ('CodeExpired', 'Error: Expired authorization code'), ('InvalidClientCredentials', 'Error: Invalid client credentials'), ('InvalidCode', 'Error: Invalid authorization code'), ('InvalidScope', 'Error: Invalid scope(s)'), ('InvalidUserCredentials', 'Error: Invalid user credentials'), ('InvalidDeviceId', 'Error: Invalid device ID'), ('UnknownError', 'Unknown Error')])
    saml_entity_url = models.CharField(db_column='SamlEntityUrl', max_length=1500, verbose_name='Entity ID', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    auth_session = models.ForeignKey(AuthSession, models.DO_NOTHING, db_column='AuthSessionId', verbose_name='Auth Session ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_type = models.CharField(db_column='SsoType', max_length=40, verbose_name='SSO Type', sf_read_only=models.READ_ONLY, choices=[('Saml', None), ('Oidc', None)], blank=True, null=True)
    app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='AppId', verbose_name='Connected App ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    identity_used = models.CharField(db_column='IdentityUsed', max_length=765, sf_read_only=models.READ_ONLY, blank=True, null=True)
    options_has_logout_url = models.BooleanField(db_column='OptionsHasLogoutUrl', verbose_name='Has Logout URL', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'IdpEventLog'
        verbose_name = 'Identity Provider Event Log'
        verbose_name_plural = 'Identity Event Logs'
        # keyPrefix = '0Yu'



class IframeWhiteListUrl(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='iframewhitelisturl_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='iframewhitelisturl_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    url = models.CharField(db_column='Url', max_length=255, verbose_name='Domain', help_text='Accepts these formats: example.com, *.example.com, and http://example.com', blank=True, null=True)
    context = models.CharField(db_column='Context', max_length=255, verbose_name='IFrame Type', default='VisualforcePages', choices=[('VisualforcePages', 'Visualforce Pages'), ('Surveys', 'Surveys'), ('EmbeddedService', 'Embedded Service')])
    class Meta(models.Model.Meta):
        db_table = 'IframeWhiteListUrl'
        verbose_name = 'Trusted Domain for Inline Frames'
        verbose_name_plural = 'Trusted Domains for Inline Frames'
        # keyPrefix = '6TS'



class Image(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='image_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='image_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    image_view_type = models.CharField(db_column='ImageViewType', max_length=80, verbose_name='Image Orientation', blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    image_class = models.CharField(db_column='ImageClass', max_length=255, verbose_name='Category', default='SCENES', choices=[('SCENES', 'Scenes'), ('FOOD', 'Food'), ('OBJECTS', 'Objects'), ('LOGOS', 'Logos')], blank=True, null=True)
    image_class_object_type = models.CharField(db_column='ImageClassObjectType', max_length=255, verbose_name='Image Type', default='TRAINING', choices=[('TRAINING', 'Training'), ('DETECTION', 'Actual Image'), ('FEEDBACK', 'Feedback')], blank=True, null=True)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', blank=True, null=True)  # Master Detail Relationship *
    captured_angle = models.CharField(db_column='CapturedAngle', max_length=8, verbose_name='Camera Angle', blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=255, blank=True, null=True)
    alternate_text = models.CharField(db_column='AlternateText', max_length=255, verbose_name='Accessibility Text', blank=True, null=True)
    url = models.URLField(db_column='Url', verbose_name='URL', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Image'
        verbose_name = 'Image'
        verbose_name_plural = 'Images'
        # keyPrefix = '4YL'



class ImageFeed(models.Model):
    parent = models.ForeignKey(Image, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='imagefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='imagefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ImageFeed'
        verbose_name = 'Image Feed'
        verbose_name_plural = 'Image Feed'
        # keyPrefix = None



class ImageHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    image = models.ForeignKey(Image, models.DO_NOTHING, db_column='ImageId', verbose_name='Image ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AlternateText', 'Accessibility Text'), ('ImageAlternateText', 'Accessibility Text'), ('IsActive', 'Active'), ('CapturedAngle', 'Camera Angle'), ('ImageClass', 'Category'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('ContentDocument', 'File'), ('ImageViewType', 'Image Orientation'), ('ImageTitle', 'Image Title'), ('ImageClassObjectType', 'Image Type'), ('ImageUrl', 'Image URL'), ('individualMerged', 'Individual Merged'), ('Name', 'Name'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Owner', 'Owner Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title'), ('Url', 'URL')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ImageHistory'
        verbose_name = 'Image History'
        verbose_name_plural = 'Image History'
        # keyPrefix = None



class ImageShare(models.Model):
    parent = models.ForeignKey(Image, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ImageShare'
        verbose_name = 'Image Share'
        verbose_name_plural = 'Image Share'
        # keyPrefix = None



class InAppChecklistSettingsShare(models.Model):
    parent = models.ForeignKey('InAppChecklistSettings', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User]
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'In_App_Checklist_Settings__Share'
        verbose_name = 'Share: In App Checklist Settings'
        verbose_name_plural = 'Share: In App Checklist Settings'
        # keyPrefix = None



class InAppChecklistSettings(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey('Organization', models.DO_NOTHING, db_column='SetupOwnerId', verbose_name='Location', blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='inappchecklistsettings_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='inappchecklistsettings_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    profile_key = models.CharField(db_column='ProfileKey__c', max_length=255, verbose_name='ProfileKey', blank=True, null=True)
    sales_cloud_in_app_page = models.URLField(db_column='Sales_Cloud_In_App_Page__c', verbose_name='Sales Cloud In App Page', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'In_App_Checklist_Settings__c'
        verbose_name = 'In App Checklist Settings'
        verbose_name_plural = 'In App Checklist Settings'
        # keyPrefix = 'a00'



class Incident(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    incident_number = models.CharField(db_column='IncidentNumber', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='incident_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='incident_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255)
    description = models.TextField(db_column='Description', blank=True, null=True)
    parent_incident = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentIncidentId', verbose_name='Parent Incident ID', blank=True, null=True)
    detected_date_time = models.DateTimeField(db_column='DetectedDateTime', blank=True, null=True)
    start_date_time = models.DateTimeField(db_column='StartDateTime', blank=True, null=True)
    end_date_time = models.DateTimeField(db_column='EndDateTime', blank=True, null=True)
    resolution_summary = models.TextField(db_column='ResolutionSummary', blank=True, null=True)
    resolved_by = models.ForeignKey('User', models.DO_NOTHING, db_column='ResolvedById', related_name='incident_resolvedby_set', verbose_name='User ID', blank=True, null=True)
    resolution_date_time = models.DateTimeField(db_column='ResolutionDateTime', blank=True, null=True)
    status_code = models.CharField(db_column='StatusCode', max_length=255, sf_read_only=models.READ_ONLY, default='New', choices=[('New', 'New'), ('Open', 'Open'), ('InProgress', 'In Progress'), ('Resolved', 'Resolved'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('ProblemCreated', 'Problem Created')], blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, default='New', choices=[('New', 'New'), ('Open', 'Open'), ('In Progress', 'In Progress'), ('Resolved', 'Resolved'), ('Completed', 'Completed'), ('Problem Created', 'Problem Created'), ('Closed', 'Closed')])
    impact = models.CharField(db_column='Impact', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')])
    urgency = models.CharField(db_column='Urgency', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')])
    priority = models.CharField(db_column='Priority', max_length=40, default='Critical', choices=[('Critical', 'Critical'), ('High', 'High'), ('Moderate', 'Moderate'), ('Low', 'Low')])
    reported_method = models.CharField(db_column='ReportedMethod', max_length=40, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, blank=True, null=True)
    category = models.CharField(db_column='Category', max_length=40, blank=True, null=True)
    sub_category = models.CharField(db_column='SubCategory', max_length=40, blank=True, null=True)
    priority_override_reason = models.CharField(db_column='PriorityOverrideReason', max_length=255, blank=True, null=True)
    is_major_incident = models.BooleanField(db_column='IsMajorIncident', verbose_name='Major Incident', default=False)
    is_stopped = models.BooleanField(db_column='IsStopped', verbose_name='Incident Paused', default=False)
    stop_start_date = models.DateTimeField(db_column='StopStartDate', verbose_name='Incident Paused Since', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sla_start_date = models.DateTimeField(db_column='SlaStartDate', verbose_name='Entitlement Process Start Time', blank=True, null=True)
    sla_exit_date = models.DateTimeField(db_column='SlaExitDate', verbose_name='Entitlement Process End Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    business_hours = models.ForeignKey(BusinessHours, models.DO_NOTHING, db_column='BusinessHoursId', verbose_name='Business Hours ID', blank=True, null=True)
    milestone_status = models.CharField(db_column='MilestoneStatus', max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', verbose_name='Incident Closed', sf_read_only=models.READ_ONLY, default=False)
    entitlement = models.ForeignKey(Entitlement, models.DO_NOTHING, db_column='EntitlementId', verbose_name='Entitlement ID', blank=True, null=True)
    app_effected = models.CharField(db_column='App_Effected__c', max_length=255, verbose_name='App Effected', choices=[('Customer', 'Customer'), ('Merchant', 'Merchant'), ('Dispatch', 'Dispatch'), ('Gig', 'Gig')], blank=True, null=True)
    app_type = models.CharField(db_column='App_Type__c', max_length=255, verbose_name='App Type', choices=[('Mobile - iOS', 'Mobile - iOS'), ('Mobile - Android', 'Mobile - Android'), ('Web', 'Web')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Incident'
        verbose_name = 'Incident'
        verbose_name_plural = 'Incidents'
        # keyPrefix = '0ny'



class IncidentFeed(models.Model):
    parent = models.ForeignKey(Incident, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='incidentfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='incidentfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IncidentFeed'
        verbose_name = 'Incident Feed'
        verbose_name_plural = 'Incident Feed'
        # keyPrefix = None



class IncidentHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    incident = models.ForeignKey(Incident, models.DO_NOTHING, db_column='IncidentId', verbose_name='Incident ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('App_Effected__c', 'App Effected'), ('App_Type__c', 'App Type'), ('BusinessHours', 'Business Hours'), ('Category', 'Category'), ('created', 'Created.'), ('Description', 'Description'), ('DetectedDateTime', 'Detected Date Time'), ('EndDateTime', 'End Date Time'), ('Entitlement', 'Entitlement'), ('SlaExitDate', 'Entitlement Process End Time'), ('SlaStartDate', 'Entitlement Process Start Time'), ('feedEvent', 'Feed event'), ('Impact', 'Impact'), ('IsClosed', 'Incident Closed'), ('Owner', 'Incident Owner'), ('IsStopped', 'Incident Paused'), ('StopStartDate', 'Incident Paused Since'), ('individualMerged', 'Individual Merged'), ('IsMajorIncident', 'Major Incident'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentIncident', 'Parent Incident'), ('Priority', 'Priority'), ('PriorityOverrideReason', 'Priority Override Reason'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedItemAutonumberMaster', 'Related Item Autonumber Master'), ('ReportedMethod', 'Reported Method'), ('ResolutionDateTime', 'Resolution Date Time'), ('ResolutionSummary', 'Resolution Summary'), ('ResolvedBy', 'Resolved By'), ('StartDateTime', 'Start Date Time'), ('Status', 'Status'), ('SubCategory', 'Sub Category'), ('Subject', 'Subject'), ('Type', 'Type'), ('Urgency', 'Urgency')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IncidentHistory'
        verbose_name = 'Incident History'
        verbose_name_plural = 'Incident History'
        # keyPrefix = None



class IncidentRelatedItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Incident Related Item Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='incidentrelateditem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='incidentrelateditem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    incident = models.ForeignKey(Incident, models.DO_NOTHING, db_column='IncidentId', verbose_name='Incident ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    impact_type = models.CharField(db_column='ImpactType', max_length=40, default='Business-Blocking', choices=[('Business-Blocking', 'Business-Blocking'), ('Partially Business-Blocking', 'Partially Business-Blocking'), ('Not Business-Blocking', 'Not Business-Blocking')])
    impact_level = models.CharField(db_column='ImpactLevel', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True)
    comment = models.TextField(db_column='Comment', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IncidentRelatedItem'
        verbose_name = 'Incident Related Item'
        verbose_name_plural = 'Incident Related Items'
        # keyPrefix = '0tA'



class IncidentRelatedItemFeed(models.Model):
    parent = models.ForeignKey(IncidentRelatedItem, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='incidentrelateditemfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='incidentrelateditemfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IncidentRelatedItemFeed'
        verbose_name = 'Incident Related Item Feed'
        verbose_name_plural = 'Incident Related Item Feed'
        # keyPrefix = None



class IncidentRelatedItemHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    incident_related_item = models.ForeignKey(IncidentRelatedItem, models.DO_NOTHING, db_column='IncidentRelatedItemId', verbose_name='Incident Related Item ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Asset', 'Asset'), ('Comment', 'Comment'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('ImpactLevel', 'Impact Level'), ('ImpactType', 'Impact Type'), ('Incident', 'Incident'), ('Name', 'Incident Related Item Number'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IncidentRelatedItemHistory'
        verbose_name = 'Incident Related Item History'
        verbose_name_plural = 'Incident Related Item History'
        # keyPrefix = None



class IncidentShare(models.Model):
    parent = models.ForeignKey(Incident, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'IncidentShare'
        verbose_name = 'Incident Share'
        verbose_name_plural = 'Incident Share'
        # keyPrefix = None



class InstalledMobileApp(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Installed Mobile App Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='installedmobileapp_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='installedmobileapp_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('downloaded', 'Downloaded'), ('installed', 'Installed')])
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='installedmobileapp_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    connected_application = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='ConnectedApplicationId', verbose_name='Connected Application ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    version = models.CharField(db_column='Version', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'InstalledMobileApp'
        verbose_name = 'Installed Mobile App'
        verbose_name_plural = 'Installed Mobile Apps'
        # keyPrefix = '0El'



class KnowledgeableUser(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    topic = models.ForeignKey('Topic', models.DO_NOTHING, db_column='TopicId', verbose_name='Topic ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    raw_rank = models.IntegerField(db_column='RawRank', verbose_name='Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'KnowledgeableUser'
        verbose_name = 'Knowledgeable User'
        verbose_name_plural = 'Knowledgeable Users'
        # keyPrefix = '0in'



class Lead(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, db_column='MasterRecordId', verbose_name='Master Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(db_column='LastName', max_length=80)
    first_name = models.CharField(db_column='FirstName', max_length=40, blank=True, null=True)
    salutation = models.CharField(db_column='Salutation', max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(db_column='MiddleName', max_length=40, blank=True, null=True)
    suffix = models.CharField(db_column='Suffix', max_length=40, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=128, blank=True, null=True)
    company = models.CharField(db_column='Company', max_length=255)
    street = models.TextField(db_column='Street', blank=True, null=True)
    city = models.CharField(db_column='City', max_length=40, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=80, blank=True, null=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(db_column='GeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(db_column='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(db_column='Phone', max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(db_column='MobilePhone', max_length=40, blank=True, null=True)
    email = models.EmailField(db_column='Email', blank=True, null=True)
    website = models.URLField(db_column='Website', blank=True, null=True)
    photo_url = models.URLField(db_column='PhotoUrl', verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_source = models.CharField(db_column='LeadSource', max_length=255, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, default='New', choices=[('Unqualified', 'Unqualified'), ('New', 'New'), ('Working', 'Working'), ('Nurturing', 'Nurturing'), ('Qualified', 'Qualified')])
    industry = models.CharField(db_column='Industry', max_length=255, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Waste management', 'Waste management'), ('Property management', 'Property management')], blank=True, null=True)
    rating = models.CharField(db_column='Rating', max_length=255, choices=[('Hot', 'Hot'), ('Warm', 'Warm'), ('Cold', 'Cold')], blank=True, null=True)
    number_of_employees = models.IntegerField(db_column='NumberOfEmployees', verbose_name='Employees', blank=True, null=True)
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_converted = models.BooleanField(db_column='IsConverted', verbose_name='Converted', sf_read_only=models.NOT_UPDATEABLE, default=False)
    converted_date = models.DateField(db_column='ConvertedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='ConvertedAccountId', verbose_name='Converted Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ConvertedContactId', verbose_name='Converted Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, db_column='ConvertedOpportunityId', verbose_name='Converted Opportunity ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_unread_by_owner = models.BooleanField(db_column='IsUnreadByOwner', verbose_name='Unread By Owner', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='lead_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='lead_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(db_column='Jigsaw', max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_contact_id = models.CharField(db_column='JigsawContactId', max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(db_column='EmailBouncedReason', max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    email_bounced_date = models.DateTimeField(db_column='EmailBouncedDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    merchant_type = models.CharField(db_column='Merchant_Type__c', max_length=255, verbose_name='Merchant Type', choices=[('Waste hauler', 'Waste hauler'), ('Landfill', 'Landfill'), ('Recycling facility', 'Recycling facility'), ('Transfer station', 'Transfer station'), ('Scrap yard', 'Scrap yard'), ('Retailer', 'Retailer'), ('Scrapper', 'Scrapper'), ('Equipment manufacturer', 'Equipment manufacturer'), ('Reseller', 'Reseller'), ('Community drop spot', 'Community drop spot')], blank=True, null=True)
    unbounce_page_id = models.CharField(db_column='UnbouncePageID__c', max_length=250, verbose_name='Unbounce Page ID', blank=True, null=True)
    source = models.CharField(db_column='Source__c', max_length=250, blank=True, null=True)
    submitter_ip = models.CharField(db_column='SubmitterIP__c', max_length=250, verbose_name='Submitter IP', blank=True, null=True)
    unbounce_submission_time = models.CharField(db_column='UnbounceSubmissionTime__c', max_length=250, blank=True, null=True)
    unbounce_page_variant = models.CharField(db_column='UnbouncePageVariant__c', max_length=250, blank=True, null=True)
    unbounce_submission_date = models.DateField(db_column='UnbounceSubmissionDate__c', blank=True, null=True)
    active_camp_active_campaign_sync_status = models.CharField(db_column='ActiveCamp__ActiveCampaign_Sync_Status__c', max_length=255, verbose_name='ActiveCampaign Sync Status', choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Duplicate Email Found Do Not Sync', 'Duplicate Email Found Do Not Sync')], blank=True, null=True) 
    active_camp_active_campaign_id = models.CharField(db_column='ActiveCamp__Active_Campaign_Id__c', unique=True, max_length=255, verbose_name='ActiveCampaign Id', blank=True, null=True) 
    active_camp_last_synced = models.DateTimeField(db_column='ActiveCamp__Last_Synced__c', verbose_name='ActiveCampaign Last Synced', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Lead'
        verbose_name = 'Lead'
        verbose_name_plural = 'Leads'
        # keyPrefix = '00Q'



class LeadFeed(models.Model):
    parent = models.ForeignKey(Lead, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='leadfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='leadfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadFeed'
        verbose_name = 'Lead Feed'
        verbose_name_plural = 'Lead Feed'
        # keyPrefix = None



class LeadHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    lead = models.ForeignKey(Lead, models.DO_NOTHING, db_column='LeadId', verbose_name='Lead ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ActiveCamp__Active_Campaign_Id__c', 'ActiveCampaign Id'), ('ActiveCamp__Last_Synced__c', 'ActiveCampaign Last Synced'), ('ActiveCamp__ActiveCampaign_Sync_Status__c', 'ActiveCampaign Sync Status'), ('Address', 'Address'), ('AnnualRevenue', 'Annual Revenue'), ('City', 'City'), ('Company', 'Company'), ('Country', 'Country'), ('created', 'Created.'), ('Jigsaw', 'Data.com Key'), ('Description', 'Description'), ('DoNotCall', 'Do Not Call'), ('Email', 'Email'), ('EmailBouncedDate', 'Email Bounced Date'), ('EmailBouncedReason', 'Email Bounced Reason'), ('HasOptedOutOfEmail', 'Email Opt Out'), ('Fax', 'Fax'), ('HasOptedOutOfFax', 'Fax Opt Out'), ('feedEvent', 'Feed event'), ('FirstName', 'First Name'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('individualMerged', 'Individual Merged'), ('Industry', 'Industry'), ('LastName', 'Last Name'), ('Latitude', 'Latitude'), ('leadConverted', 'Lead Converted.'), ('leadMerged', 'Lead Merged'), ('Owner', 'Lead Owner'), ('LeadSource', 'Lead Source'), ('Status', 'Lead Status'), ('Longitude', 'Longitude'), ('Merchant_Type__c', 'Merchant Type'), ('MiddleName', 'Middle Name'), ('MobilePhone', 'Mobile'), ('Name', 'Name'), ('NumberOfEmployees', 'No. of Employees'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Phone', 'Phone'), ('Rating', 'Rating'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Salutation', 'Salutation'), ('Source__c', 'Source'), ('State', 'State/Province'), ('Street', 'Street'), ('SubmitterIP__c', 'Submitter IP'), ('Suffix', 'Suffix'), ('Title', 'Title'), ('UnbouncePageID__c', 'Unbounce Page ID'), ('UnbouncePageVariant__c', 'Unbounce Page Variant'), ('UnbounceSubmissionDate__c', 'Unbounce Submission Date'), ('UnbounceSubmissionTime__c', 'Unbounce Submission Time'), ('IsUnreadByOwner', 'Unread By Owner'), ('Website', 'Website'), ('PostalCode', 'Zip/Postal Code')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadHistory'
        verbose_name = 'Lead History'
        verbose_name_plural = 'Lead History'
        # keyPrefix = None



class LeadStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    is_converted = models.BooleanField(db_column='IsConverted', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='leadstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='leadstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'LeadStatus'
        verbose_name = 'Lead Status Value'
        verbose_name_plural = 'Lead Status Value'
        # keyPrefix = '01J'



class LightningExitByPageMetrics(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    page_name = models.CharField(db_column='PageName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    record_count = models.IntegerField(db_column='RecordCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LightningExitByPageMetrics'
        verbose_name = 'Lightning Exit By Page Metrics'
        verbose_name_plural = 'Lightning Exit By Page Metrics'
        # keyPrefix = '0V9'



class LightningExperienceTheme(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=70, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=70, verbose_name='Name')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='lightningexperiencetheme_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='lightningexperiencetheme_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    default_branding_set = models.ForeignKey(BrandingSet, models.DO_NOTHING, db_column='DefaultBrandingSetId', verbose_name='Branding Set ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    should_override_loading_image = models.BooleanField(db_column='ShouldOverrideLoadingImage', default=False)
    description = models.TextField(db_column='Description', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LightningExperienceTheme'
        verbose_name = 'Lightning Experience Theme'
        verbose_name_plural = 'Lightning Experience Themes'
        # keyPrefix = '0S1'



class LightningOnboardingConfig(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', blank=True, null=True)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='lightningonboardingconfig_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='lightningonboardingconfig_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    custom_question = models.TextField(db_column='CustomQuestion', blank=True, null=True)
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, db_column='CollaborationGroupId', verbose_name='Collaboration Group ID', blank=True, null=True)
    feedback_form_days_frequency = models.IntegerField(db_column='FeedbackFormDaysFrequency', blank=True, null=True)
    send_feedback_to_salesforce = models.BooleanField(db_column='SendFeedbackToSalesforce', default=False)
    is_custom = models.BooleanField(db_column='IsCustom', default=False)
    prompt_delay_time = models.IntegerField(db_column='PromptDelayTime', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LightningOnboardingConfig'
        verbose_name = 'LightningOnboardingConfig'
        verbose_name_plural = 'LightningOnboardingConfigs'
        # keyPrefix = '7MM'



class LightningToggleMetrics(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    action = models.CharField(db_column='Action', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    record_count = models.IntegerField(db_column='RecordCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LightningToggleMetrics'
        verbose_name = 'Lightning Toggle Metrics'
        verbose_name_plural = 'Lightning Toggle Metrics'
        # keyPrefix = '1o1'



class LightningUsageByAppTypeMetrics(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    app_experience = models.CharField(db_column='AppExperience', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'LightningUsageByAppTypeMetrics'
        verbose_name = 'Lightning Usage By App Type Metrics'
        verbose_name_plural = 'Lightning Usage By App Type Metrics'
        # keyPrefix = '62C'



class LightningUsageByBrowserMetrics(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    page_name = models.CharField(db_column='PageName', max_length=40, sf_read_only=models.READ_ONLY)
    browser = models.CharField(db_column='Browser', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    record_count_ept = models.IntegerField(db_column='RecordCountEPT', verbose_name='Record Count EPT', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_count = models.IntegerField(db_column='TotalCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sum_ept = models.IntegerField(db_column='SumEPT', verbose_name='Sum EPT', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin_under3 = models.IntegerField(db_column='EptBinUnder3', verbose_name='EptBinUnder3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin3_to5 = models.IntegerField(db_column='EptBin3To5', verbose_name='EptBin3To5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin5_to8 = models.IntegerField(db_column='EptBin5To8', verbose_name='EptBin5To8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin8_to10 = models.IntegerField(db_column='EptBin8To10', verbose_name='EptBin8To10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin_over10 = models.IntegerField(db_column='EptBinOver10', verbose_name='EptBinOver10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LightningUsageByBrowserMetrics'
        verbose_name = 'Lightning Usage By Browser Metrics'
        verbose_name_plural = 'Lightning Usage By Browser Metrics'
        # keyPrefix = '3mK'



class LightningUsageByFlexiPageMetrics(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    flexi_page_type = models.CharField(db_column='FlexiPageType', max_length=40, verbose_name='FlexiPage Type', sf_read_only=models.READ_ONLY)
    flexi_page_name_or_id = models.CharField(db_column='FlexiPageNameOrId', max_length=40, verbose_name='FlexiPage Name Or Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    record_count_ept = models.IntegerField(db_column='RecordCountEPT', verbose_name='Record Count EPT', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_count = models.IntegerField(db_column='TotalCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    median_ept = models.IntegerField(db_column='MedianEPT', verbose_name='Median EPT', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sum_ept = models.IntegerField(db_column='SumEPT', verbose_name='Sum EPT', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin_under3 = models.IntegerField(db_column='EptBinUnder3', verbose_name='EptBinUnder3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin3_to5 = models.IntegerField(db_column='EptBin3To5', verbose_name='EptBin3To5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin5_to8 = models.IntegerField(db_column='EptBin5To8', verbose_name='EptBin5To8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin8_to10 = models.IntegerField(db_column='EptBin8To10', verbose_name='EptBin8To10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin_over10 = models.IntegerField(db_column='EptBinOver10', verbose_name='EptBinOver10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cores_bin_under2 = models.IntegerField(db_column='CoresBinUnder2', verbose_name='CoresBinUnder2', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cores_bin2_to4 = models.IntegerField(db_column='CoresBin2To4', verbose_name='CoresBin2To4', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cores_bin4_to8 = models.IntegerField(db_column='CoresBin4To8', verbose_name='CoresBin4To8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cores_bin_over8 = models.IntegerField(db_column='CoresBinOver8', verbose_name='CoresBinOver8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin_under3 = models.IntegerField(db_column='DownlinkBinUnder3', verbose_name='DownlinkBinUnder3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin3_to5 = models.IntegerField(db_column='DownlinkBin3To5', verbose_name='DownlinkBin3To5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin5_to8 = models.IntegerField(db_column='DownlinkBin5To8', verbose_name='DownlinkBin5To8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin8_to10 = models.IntegerField(db_column='DownlinkBin8To10', verbose_name='DownlinkBin8To10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin_over10 = models.IntegerField(db_column='DownlinkBinOver10', verbose_name='DownlinkBinOver10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    rtt_bin_under50 = models.IntegerField(db_column='RttBinUnder50', verbose_name='RttBinUnder50', sf_read_only=models.READ_ONLY, blank=True, null=True)
    rtt_bin50_to150 = models.IntegerField(db_column='RttBin50To150', verbose_name='RttBin50To150', sf_read_only=models.READ_ONLY, blank=True, null=True)
    rtt_bin_over150 = models.IntegerField(db_column='RttBinOver150', verbose_name='RttBinOver150', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LightningUsageByFlexiPageMetrics'
        verbose_name = 'Lightning Usage By FlexiPage Metrics'
        verbose_name_plural = 'Lightning Usage By FlexiPage Metrics'
        # keyPrefix = '7pV'



class LightningUsageByPageMetrics(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    page_name = models.CharField(db_column='PageName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    record_count_ept = models.IntegerField(db_column='RecordCountEPT', verbose_name='Record Count EPT', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_count = models.IntegerField(db_column='TotalCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sum_ept = models.IntegerField(db_column='SumEPT', verbose_name='Sum EPT', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin_under3 = models.IntegerField(db_column='EptBinUnder3', verbose_name='EptBinUnder3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin3_to5 = models.IntegerField(db_column='EptBin3To5', verbose_name='EptBin3To5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin5_to8 = models.IntegerField(db_column='EptBin5To8', verbose_name='EptBin5To8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin8_to10 = models.IntegerField(db_column='EptBin8To10', verbose_name='EptBin8To10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ept_bin_over10 = models.IntegerField(db_column='EptBinOver10', verbose_name='EptBinOver10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cores_bin_under2 = models.IntegerField(db_column='CoresBinUnder2', verbose_name='CoresBinUnder2', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cores_bin2_to4 = models.IntegerField(db_column='CoresBin2To4', verbose_name='CoresBin2To4', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cores_bin4_to8 = models.IntegerField(db_column='CoresBin4To8', verbose_name='CoresBin4To8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cores_bin_over8 = models.IntegerField(db_column='CoresBinOver8', verbose_name='CoresBinOver8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin_under3 = models.IntegerField(db_column='DownlinkBinUnder3', verbose_name='DownlinkBinUnder3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin3_to5 = models.IntegerField(db_column='DownlinkBin3To5', verbose_name='DownlinkBin3To5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin5_to8 = models.IntegerField(db_column='DownlinkBin5To8', verbose_name='DownlinkBin5To8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin8_to10 = models.IntegerField(db_column='DownlinkBin8To10', verbose_name='DownlinkBin8To10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    downlink_bin_over10 = models.IntegerField(db_column='DownlinkBinOver10', verbose_name='DownlinkBinOver10', sf_read_only=models.READ_ONLY, blank=True, null=True)
    rtt_bin_under50 = models.IntegerField(db_column='RttBinUnder50', verbose_name='RttBinUnder50', sf_read_only=models.READ_ONLY, blank=True, null=True)
    rtt_bin50_to150 = models.IntegerField(db_column='RttBin50To150', verbose_name='RttBin50To150', sf_read_only=models.READ_ONLY, blank=True, null=True)
    rtt_bin_over150 = models.IntegerField(db_column='RttBinOver150', verbose_name='RttBinOver150', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LightningUsageByPageMetrics'
        verbose_name = 'Lightning Usage By Page Metrics'
        verbose_name_plural = 'Lightning Usage By Page Metrics'
        # keyPrefix = '0U5'



class ListEmail(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='listemail_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='listemail_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.TextField(db_column='Subject', blank=True, null=True)
    html_body = models.TextField(db_column='HtmlBody', blank=True, null=True)
    text_body = models.TextField(db_column='TextBody', blank=True, null=True)
    from_name = models.CharField(db_column='FromName', max_length=121, blank=True, null=True)
    from_address = models.TextField(db_column='FromAddress')
    status = models.CharField(db_column='Status', max_length=255, choices=[('Draft', 'Draft'), ('Scheduled', 'Scheduled'), ('Sent', 'Sent'), ('LimitError', 'Limit Error'), ('Cancelled', 'Canceled')])
    has_attachment = models.BooleanField(db_column='HasAttachment', sf_read_only=models.READ_ONLY, default=False)
    scheduled_date = models.DateTimeField(db_column='ScheduledDate', blank=True, null=True)
    total_sent = models.IntegerField(db_column='TotalSent', sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='CampaignId', verbose_name='Campaign ID', blank=True, null=True)
    is_tracked = models.BooleanField(db_column='IsTracked', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ListEmail'
        verbose_name = 'List Email'
        verbose_name_plural = 'List Emails'
        # keyPrefix = '0XB'



class ListEmailIndividualRecipient(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='listemailindividualrecipient_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='listemailindividualrecipient_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    list_email = models.ForeignKey(ListEmail, models.DO_NOTHING, db_column='ListEmailId', verbose_name='List Email ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    recipient = models.ForeignKey(CampaignMember, models.DO_NOTHING, db_column='RecipientId', verbose_name='Recipient ID')  # Reference to tables [CampaignMember, Contact, Lead] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ListEmailIndividualRecipient'
        verbose_name = 'List Email Individual Recipient'
        verbose_name_plural = 'List Email Individual Recipients'
        # keyPrefix = '0XF'



class ListEmailRecipientSource(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='listemailrecipientsource_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='listemailrecipientsource_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    list_email = models.ForeignKey(ListEmail, models.DO_NOTHING, db_column='ListEmailId', verbose_name='List Email ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    source_list = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='SourceListId', verbose_name='SourceList ID')  # Reference to tables [Campaign, ListView, Topic] Master Detail Relationship *
    source_type = models.CharField(db_column='SourceType', max_length=255, verbose_name='Type', choices=[('IncludeList', 'Include')])
    class Meta(models.Model.Meta):
        db_table = 'ListEmailRecipientSource'
        verbose_name = 'List Email Recipient Source'
        verbose_name_plural = 'List Email Recipient Sources'
        # keyPrefix = '0XD'



class ListEmailShare(models.Model):
    parent = models.ForeignKey(ListEmail, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ListEmailShare'
        verbose_name = 'List Email Share'
        verbose_name_plural = 'List Email Share'
        # keyPrefix = None



class ListView(models.Model):
    name = models.CharField(db_column='Name', max_length=40, verbose_name='View Name', sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='View Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Too long choices skipped
    is_soql_compatible = models.BooleanField(db_column='IsSoqlCompatible', verbose_name='Is SOQL Compatible', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='listview_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='listview_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ListView'
        verbose_name = 'List View'
        verbose_name_plural = 'List Views'
        # keyPrefix = '00B'



class ListViewChart(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.NOT_UPDATEABLE)  # Too long choices skipped
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='API Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='listviewchart_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='listviewchart_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='listviewchart_owner_set', verbose_name='User ID')  # Master Detail Relationship *
    chart_type = models.CharField(db_column='ChartType', max_length=255, choices=[('vbar', 'Vertical Bar Chart'), ('hbar', 'Horizontal Bar Chart'), ('pie', 'Donut Chart')])
    grouping_field = models.CharField(db_column='GroupingField', max_length=255, verbose_name='Custom Field Definition ID', blank=True, null=True)  # Too long choices skipped
    aggregate_field = models.CharField(db_column='AggregateField', max_length=255, verbose_name='Custom Field Definition ID', blank=True, null=True)  # Too long choices skipped
    aggregate_type = models.CharField(db_column='AggregateType', max_length=255, choices=[('Sum', 'Sum'), ('Count', 'Count'), ('Avg', 'Average')])
    class Meta(models.Model.Meta):
        db_table = 'ListViewChart'
        verbose_name = 'List View Chart'
        verbose_name_plural = 'List View Charts'
        # keyPrefix = '0Dd'



class ListViewChartInstance(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='ListView Chart Instance ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    list_view_chart = models.ForeignKey(ListViewChart, models.DO_NOTHING, db_column='ListViewChartId', verbose_name='List View Chart ID', sf_read_only=models.READ_ONLY)
    label = models.CharField(db_column='Label', max_length=255, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='API Name', sf_read_only=models.READ_ONLY)
    source_entity = models.CharField(db_column='SourceEntity', max_length=255, verbose_name='Entity', sf_read_only=models.READ_ONLY)
    list_view_context = models.ForeignKey(ListView, models.DO_NOTHING, db_column='ListViewContextId', verbose_name='List View ID', sf_read_only=models.READ_ONLY)
    chart_type = models.CharField(db_column='ChartType', max_length=255, verbose_name='TODO, use alias', sf_read_only=models.READ_ONLY, choices=[('vbar', 'Vertical Bar Chart'), ('hbar', 'Horizontal Bar Chart'), ('pie', 'Donut Chart')])
    is_last_viewed = models.BooleanField(db_column='IsLastViewed', verbose_name='Last Viewed', sf_read_only=models.READ_ONLY, default=False)
    data_query = models.TextField(db_column='DataQuery', verbose_name='SOQL Query for Chart Data', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_query_without_user_filters = models.TextField(db_column='DataQueryWithoutUserFilters', verbose_name='SOQL Query for Desktop Chart Data without S1 User Filters', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_editable = models.BooleanField(db_column='IsEditable', verbose_name='Editable', sf_read_only=models.READ_ONLY, default=False)
    is_deletable = models.BooleanField(db_column='IsDeletable', verbose_name='Deletable', sf_read_only=models.READ_ONLY, default=False)
    grouping_field = models.CharField(db_column='GroupingField', max_length=255, sf_read_only=models.READ_ONLY)
    aggregate_field = models.CharField(db_column='AggregateField', max_length=255, sf_read_only=models.READ_ONLY)
    aggregate_type = models.CharField(db_column='AggregateType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Sum', 'Sum'), ('Count', 'Count'), ('Avg', 'Average')])
    class Meta(models.Model.Meta):
        db_table = 'ListViewChartInstance'
        verbose_name = 'List View Chart Instance'
        verbose_name_plural = 'List View Chart Instances'
        # keyPrefix = '0De'



class LoginGeo(models.Model):
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='logingeo_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='logingeo_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    login_time = models.DateTimeField(db_column='LoginTime', sf_read_only=models.READ_ONLY)
    country_iso = models.CharField(db_column='CountryIso', max_length=3, verbose_name='Country Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(db_column='City', max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, verbose_name='PostalCode', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subdivision = models.CharField(db_column='Subdivision', max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginGeo'
        verbose_name = 'Login Geo Data'
        verbose_name_plural = 'Login Geo Data'
        # keyPrefix = '04F'



class LoginHistory(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    login_time = models.DateTimeField(db_column='LoginTime', sf_read_only=models.READ_ONLY)
    login_type = models.CharField(db_column='LoginType', max_length=40, sf_read_only=models.READ_ONLY)
    source_ip = models.CharField(db_column='SourceIp', max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_url = models.CharField(db_column='LoginUrl', max_length=255, verbose_name='Login URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authentication_service = models.ForeignKey(AuthProvider, models.DO_NOTHING, db_column='AuthenticationServiceId', verbose_name='Authentication Service ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [AuthProvider, SamlSsoConfig]
    login_geo = models.ForeignKey(LoginGeo, models.DO_NOTHING, db_column='LoginGeoId', verbose_name='Login Geo Data ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tls_protocol = models.CharField(db_column='TlsProtocol', max_length=40, verbose_name='TLS Protocol', sf_read_only=models.READ_ONLY, choices=[('TLS 1.0', 'TLS 1.0'), ('TLS 1.1', 'TLS 1.1'), ('TLS 1.2', 'TLS 1.2'), ('TLS 1.3', 'TLS 1.3'), ('Unknown', 'Unknown')], blank=True, null=True)
    cipher_suite = models.CharField(db_column='CipherSuite', max_length=40, verbose_name='TLS Cipher Suite', sf_read_only=models.READ_ONLY, choices=[('AES128-GCM-SHA256', 'AES128-GCM-SHA256'), ('AES128-SHA', 'AES128-SHA'), ('AES128-SHA256', 'AES128-SHA256'), ('AES256-GCM-SHA384', 'AES256-GCM-SHA384'), ('AES256-SHA', 'AES256-SHA'), ('AES256-SHA256', 'AES256-SHA256'), ('DES-CBC3-SHA', 'DES-CBC3-SHA'), ('DHE-RSA-AES128-GCM-SHA256', 'DHE-RSA-AES128-GCM-SHA256'), ('DHE-RSA-AES128-SHA', 'DHE-RSA-AES128-SHA'), ('DHE-RSA-AES256-GCM-SHA384', 'DHE-RSA-AES256-GCM-SHA384'), ('DHE-RSA-AES256-SHA', 'DHE-RSA-AES256-SHA'), ('DHE-RSA-DES-CBC3-SHA', 'DHE-RSA-DES-CBC3-SHA'), ('ECDH-ECDSA-AES128-GCM-SHA256', 'ECDH-ECDSA-AES128-GCM-SHA256'), ('ECDH-ECDSA-AES128-SHA256', 'ECDH-ECDSA-AES128-SHA256'), ('ECDH-ECDSA-AES256-GCM-SHA384', 'ECDH-ECDSA-AES256-GCM-SHA384'), ('ECDH-ECDSA-AES256-SHA384', 'ECDH-ECDSA-AES256-SHA384'), ('ECDH-RSA-AES128-GCM-SHA256', 'ECDH-RSA-AES128-GCM-SHA256'), ('ECDH-RSA-AES128-SHA256', 'ECDH-RSA-AES128-SHA256'), ('ECDH-RSA-AES256-GCM-SHA384', 'ECDH-RSA-AES256-GCM-SHA384'), ('ECDH-RSA-AES256-SHA384', 'ECDH-RSA-AES256-SHA384'), ('ECDHE-ECDSA-AES128-GCM-SHA256', 'ECDHE-ECDSA-AES128-GCM-SHA256'), ('ECDHE-ECDSA-AES128-SHA256', 'ECDHE-ECDSA-AES128-SHA256'), ('ECDHE-ECDSA-AES256-GCM-SHA384', 'ECDHE-ECDSA-AES256-GCM-SHA384'), ('ECDHE-ECDSA-AES256-SHA384', 'ECDHE-ECDSA-AES256-SHA384'), ('ECDHE-RSA-AES128-CBC-SHA', 'ECDHE-RSA-AES128-CBC-SHA'), ('ECDHE-RSA-AES128-GCM-SHA256', 'ECDHE-RSA-AES128-GCM-SHA256'), ('ECDHE-RSA-AES128-SHA', 'ECDHE-RSA-AES128-SHA'), ('ECDHE-RSA-AES128-SHA256', 'ECDHE-RSA-AES128-SHA256'), ('ECDHE-RSA-AES256-CBC-SHA', 'ECDHE-RSA-AES256-CBC-SHA'), ('ECDHE-RSA-AES256-GCM-SHA384', 'ECDHE-RSA-AES256-GCM-SHA384'), ('ECDHE-RSA-AES256-SHA', 'ECDHE-RSA-AES256-SHA'), ('ECDHE-RSA-AES256-SHA384', 'ECDHE-RSA-AES256-SHA384'), ('ECDHE-RSA-DES-CBC3-SHA', 'ECDHE-RSA-DES-CBC3-SHA'), ('TLS_AES_128_GCM_SHA256', 'TLS_AES_128_GCM_SHA256'), ('TLS_AES_256_GCM_SHA384', 'TLS_AES_256_GCM_SHA384'), ('TLS_CHACHA20_POLY1305_SHA256', 'TLS_CHACHA20_POLY1305_SHA256'), ('Unknown', 'Unknown')], blank=True, null=True)
    options_is_get = models.BooleanField(db_column='OptionsIsGet', verbose_name='Login via GET', sf_read_only=models.READ_ONLY)
    options_is_post = models.BooleanField(db_column='OptionsIsPost', verbose_name='Login via POST', sf_read_only=models.READ_ONLY)
    browser = models.CharField(db_column='Browser', max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    platform = models.CharField(db_column='Platform', max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    application = models.CharField(db_column='Application', max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    client_version = models.CharField(db_column='ClientVersion', max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_type = models.CharField(db_column='ApiType', max_length=64, verbose_name='API Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version = models.CharField(db_column='ApiVersion', max_length=32, verbose_name='API Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_iso = models.CharField(db_column='CountryIso', max_length=3, verbose_name='Country Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    auth_method_reference = models.CharField(db_column='AuthMethodReference', max_length=128, verbose_name='Authentication Method Reference', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginHistory'
        verbose_name = 'Login History'
        verbose_name_plural = 'Login History'
        # keyPrefix = '0Ya'



class LoginIp(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, db_column='UsersId', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    source_ip = models.CharField(db_column='SourceIp', max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_authenticated = models.BooleanField(db_column='IsAuthenticated', verbose_name='IsAuthenticated', sf_read_only=models.READ_ONLY, default=False)
    challenge_sent_date = models.DateTimeField(db_column='ChallengeSentDate', verbose_name='Challenge SentDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    challenge_method = models.CharField(db_column='ChallengeMethod', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Email', None), ('SMS', None), ('TOTP_CHOICE', None), ('TOTP_ONLY', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginIp'
        verbose_name = 'Login IP'
        verbose_name_plural = 'Login IP'
        # keyPrefix = '710'



class LookedUpFromActivity(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='lookedupfromactivity_account_set', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='WhoId', related_name='lookedupfromactivity_who_set', verbose_name='Name ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    what = models.ForeignKey(Account, models.DO_NOTHING, db_column='WhatId', related_name='lookedupfromactivity_what_set', verbose_name='Related To ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, ChangeRequest, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, Entitlement, Image, In_App_Checklist_Settings__c, Incident, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Problem, ProcessException, Product2, Product_Category_Info__c, Product_Category__c, Quote, ServiceContract, ServiceResource, Solution, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c]
    subject = models.CharField(db_column='Subject', max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter of Authorization'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(db_column='IsTask', verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(db_column='ActivityDate', verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_date_time = models.DateTimeField(db_column='ActivityDateTime', verbose_name='Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey(Calendar, models.DO_NOTHING, db_column='OwnerId', verbose_name='Assigned To ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Group, User]
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, default='Open', choices=[('Open', 'Open'), ('Completed', 'Completed'), ('Not Started', 'Not Started')], blank=True, null=True)
    priority = models.CharField(db_column='Priority', max_length=20, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal')], blank=True, null=True)
    is_high_priority = models.BooleanField(db_column='IsHighPriority', verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(db_column='ActivityType', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(db_column='IsAllDayEvent', verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(db_column='IsVisibleInSelfService', verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(db_column='DurationInMinutes', verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(db_column='Location', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='lookedupfromactivity_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='lookedupfromactivity_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(db_column='CallDurationInSeconds', verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(db_column='CallType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(db_column='CallDisposition', max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(db_column='CallObject', max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(db_column='EndDateTime', verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(db_column='StartDateTime', verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='PrimaryWhoId', related_name='lookedupfromactivity_primarywho_set', verbose_name='Primary Name ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    primary_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='PrimaryAccountId', related_name='lookedupfromactivity_primaryaccount_set', verbose_name='Primary Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(db_column='ActivitySubtype', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Cadence', 'Cadence'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    completed_date_time = models.DateTimeField(db_column='CompletedDateTime', verbose_name='Completed Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aircall_answered_by = models.CharField(db_column='aircall__Answered_by__c', max_length=255, verbose_name='Answered by', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_call_id = models.CharField(db_column='aircall__CallId__c', max_length=255, verbose_name='Call Id', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_call_recording = models.URLField(db_column='aircall__Call_Recording__c', verbose_name='Call Recording', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_country = models.CharField(db_column='aircall__Country__c', max_length=255, verbose_name='Country', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_detailed_call_type = models.CharField(db_column='aircall__Detailed_call_type__c', max_length=255, verbose_name='Detailed call type', sf_read_only=models.READ_ONLY, choices=[('Inbound answered', 'Inbound answered'), ('Missed call', 'Missed call'), ('Outbound answered', 'Outbound answered'), ('Outbound unanswered', 'Outbound unanswered'), ('Voicemail', 'Voicemail')], blank=True, null=True) 
    aircall_external_contact_phone_number = models.CharField(db_column='aircall__External_contact_phone_number__c', max_length=40, verbose_name='External contact phone number', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_handle_time = models.DecimalField(db_column='aircall__Handle_Time__c', max_digits=18, decimal_places=0, verbose_name='Handle Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_hour_in_time_zone = models.CharField(db_column='aircall__Hour_in_time_zone__c', max_length=255, verbose_name='Hour in timezone', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_is_missed_call = models.BooleanField(db_column='aircall__Is_Missed_call__c', verbose_name='Is Missed call', sf_read_only=models.READ_ONLY) 
    aircall_is_voicemail = models.BooleanField(db_column='aircall__Is_Voicemail__c', verbose_name='Is Voicemail', sf_read_only=models.READ_ONLY) 
    aircall_made_by = models.CharField(db_column='aircall__Made_By__c', max_length=255, verbose_name='Made By', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_missed_call_reason = models.CharField(db_column='aircall__Missed_Call_Reason__c', max_length=255, verbose_name='Missed Call Reason', sf_read_only=models.READ_ONLY, choices=[('abandoned_in_ivr', 'Abandoned in IVR'), ('agents_did_not_answer', 'Agents did not answer'), ('no_available_agent', 'No available agent'), ('out_of_opening_hours', 'Out of opening hours'), ('short_abandoned', 'Short abandoned'), ('abandoned_in_classic', 'Abandoned in Classic')], blank=True, null=True) 
    aircall_number_name = models.CharField(db_column='aircall__Number_Name__c', max_length=255, verbose_name='Number name', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_phone_number = models.CharField(db_column='aircall__Phone_number__c', max_length=40, verbose_name='Aircall number', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_time_zone = models.DecimalField(db_column='aircall__Time_zone__c', max_digits=18, decimal_places=0, verbose_name='Time zone', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_transferred_to = models.CharField(db_column='aircall__Transferred_to__c', max_length=255, verbose_name='Transferred to', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_waiting_time = models.DecimalField(db_column='aircall__Waiting_Time__c', max_digits=18, decimal_places=0, verbose_name='Waiting Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_connection_status = models.CharField(db_column='aircall__Connection_status__c', max_length=1300, verbose_name='Connection status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_has_connected = models.BooleanField(db_column='aircall__Has_connected__c', verbose_name='Has connected', sf_read_only=models.READ_ONLY) 
    class Meta(models.Model.Meta):
        db_table = 'LookedUpFromActivity'
        verbose_name = 'Lookups from Activity'
        verbose_name_plural = 'Lookups from Activities'
        # keyPrefix = None



class Macro(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Macro Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='macro_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='macro_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    is_aloha_supported = models.BooleanField(db_column='IsAlohaSupported', verbose_name='Supports Classic', sf_read_only=models.READ_ONLY, default=False)
    is_lightning_supported = models.BooleanField(db_column='IsLightningSupported', verbose_name='Supports Lightning', sf_read_only=models.READ_ONLY, default=False)
    starting_context = models.CharField(db_column='StartingContext', max_length=255, verbose_name='Apply To', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', 'Account'), ('AccountContactRelation', 'Account Contact Relationship'), ('Asset', 'Asset'), ('AssetRelationship', 'Asset Relationship'), ('Case', 'Case'), ('CaseRelatedIssue', 'Case Related Issue'), ('ChangeRequest', 'Change Request'), ('ChangeRequestRelatedIssue', 'Change Request Related Issue'), ('ChangeRequestRelatedItem', 'Change Request Related Item'), ('Contact', 'Contact'), ('Contract', 'Contract'), ('ContractLineItem', 'Contract Line Item'), ('ActiveCamp__CXA_Usage__c', 'CXA Usage'), ('ActiveCamp__Dashboard_Log__c', 'Dashboard Log'), ('pandadoc__DocStatus__c', 'Doc Status'), ('ActiveCamp__Error_Log__c', 'Error Log'), ('Event', 'Event'), ('FeedItem', 'Feed Item'), ('CollaborationGroup', 'Group'), ('Image', 'Image'), ('Incident', 'Incident'), ('IncidentRelatedItem', 'Incident Related Item'), ('Lead', 'Lead'), ('Main_Product__c', 'Main Product'), ('Main_Product_Frequency__c', 'Main Product Frequency'), ('Main_Product_Info__c', 'Main Product Info'), ('Dhruvsoft__O2O_Logs__c', 'O2O Log'), ('EntityMilestone', 'Object Milestone'), ('pandadoc__Object_Tokens__c', 'Object Tokens'), ('Opportunity', 'Opportunity'), ('OpportunityContactRole', 'Opportunity Contact Role'), ('Order', 'Order'), ('pandadoc__PandaDocDocument__c', 'PandaDoc Document'), ('pandadoc__PandaDocLog__c', 'PandaDoc Log'), ('pandadoc__Pricing_Item_Mapping__c', 'Pricing Item Map'), ('Problem', 'Problem'), ('ProblemRelatedItem', 'Problem Related Item'), ('Product2', 'Product'), ('Product_Category__c', 'Product Category'), ('Product_Category_Info__c', 'Product Category Info'), ('ContentDocumentListViewMapping', 'Quip Document from List View'), ('Quote', 'Quote'), ('pandadoc__Recipient_Map__c', 'Recipient Map'), ('ProblemIncident', 'Related Problem and Incident'), ('ServiceContract', 'Service Contract'), ('ServiceResource', 'Service Resource'), ('ActiveCamp__Setup_Data__c', 'Setup Data'), ('SocialPost', 'Social Post'), ('Task', 'Task'), ('pandadoc__TriggerSetting__c', 'Trigger Setting'), ('User', 'User'), ('VoiceCall', 'Voice Call'), ('WorkOrder', 'Work Order'), ('WorkOrderLineItem', 'Work Order Line Item'), ('WorkPlan', 'Work Plan'), ('WorkPlanTemplate', 'Work Plan Template'), ('WorkPlanTemplateEntry', 'Work Plan Template Entry'), ('WorkStep', 'Work Step'), ('WorkStepTemplate', 'Work Step Template')], blank=True, null=True)
    folder = models.ForeignKey(Folder, models.DO_NOTHING, db_column='FolderId', verbose_name='Folder ID', blank=True, null=True)
    folder_name = models.CharField(db_column='FolderName', max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Macro'
        verbose_name = 'Macro'
        verbose_name_plural = 'Macros'
        # keyPrefix = '0JZ'



class MacroHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, db_column='MacroId', verbose_name='Macro ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('Folder', 'Folder'), ('individualMerged', 'Individual Merged'), ('Name', 'Macro Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MacroHistory'
        verbose_name = 'Macro History'
        verbose_name_plural = 'Macro History'
        # keyPrefix = None



class MacroInstruction(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Macro Instruction Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='macroinstruction_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='macroinstruction_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, db_column='MacroId', verbose_name='Macro ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    operation = models.CharField(db_column='Operation', max_length=255, choices=[('Select', 'select'), ('Set', 'set'), ('Insert', 'insert'), ('Submit', 'submit'), ('Close', 'close'), ('If', 'if'), ('ElseIf', 'elseif'), ('Else', 'else'), ('EndIf', 'endif')])
    target = models.CharField(db_column='Target', max_length=255, blank=True, null=True)  # Too long choices skipped
    value = models.TextField(db_column='Value', blank=True, null=True)
    value_record = models.CharField(db_column='ValueRecord', max_length=15, verbose_name='Value Record ID', blank=True, null=True)
    sort_order = models.IntegerField(db_column='SortOrder')
    class Meta(models.Model.Meta):
        db_table = 'MacroInstruction'
        verbose_name = 'Macro Instruction'
        verbose_name_plural = 'Macro Instructions'
        # keyPrefix = '0Ji'



class MacroShare(models.Model):
    parent = models.ForeignKey(Macro, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'MacroShare'
        verbose_name = 'Macro Share'
        verbose_name_plural = 'Macro Share'
        # keyPrefix = None



class MacroUsage(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Macro Usage Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='macrousage_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='macrousage_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, db_column='MacroId', verbose_name='Macro ID', sf_read_only=models.READ_ONLY)
    folder = models.ForeignKey(Folder, models.DO_NOTHING, db_column='FolderId', verbose_name='Folder ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    context_record = models.CharField(db_column='ContextRecord', max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    executed_instruction_count = models.IntegerField(db_column='ExecutedInstructionCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    instruction_count = models.IntegerField(db_column='InstructionCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    execution_end_time = models.DateTimeField(db_column='ExecutionEndTime', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='macrousage_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_from_bulk = models.BooleanField(db_column='IsFromBulk', verbose_name='From Bulk Execution', sf_read_only=models.READ_ONLY, default=False)
    app_context = models.CharField(db_column='AppContext', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Aloha', None), ('Lightning', None), ('Unknown', None)], blank=True, null=True)
    condition_count = models.IntegerField(db_column='ConditionCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    execution_state = models.CharField(db_column='ExecutionState', max_length=255, sf_read_only=models.READ_ONLY, choices=[('SUCCESS', None), ('CANCELED', None), ('FAILURE', None)], blank=True, null=True)
    duration_in_ms = models.IntegerField(db_column='DurationInMs', verbose_name='Duration In Milliseconds', sf_read_only=models.READ_ONLY, blank=True, null=True)
    failure_reason = models.CharField(db_column='FailureReason', max_length=255, sf_read_only=models.READ_ONLY, choices=[('GENERIC', None), ('UNSUPPORTED', None), ('ACCESS', None), ('TIMEOUT', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MacroUsage'
        verbose_name = 'Macro Usage'
        verbose_name_plural = 'Macro Usages'
        # keyPrefix = '5ML'



class MacroUsageShare(models.Model):
    parent = models.ForeignKey(MacroUsage, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'MacroUsageShare'
        verbose_name = 'Macro Usage Share'
        verbose_name_plural = 'Macro Usage Share'
        # keyPrefix = None



class MailmergeTemplate(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    filename = models.CharField(db_column='Filename', max_length=255, verbose_name='File', sf_read_only=models.NOT_UPDATEABLE)
    body_length = models.IntegerField(db_column='BodyLength', sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.NOT_UPDATEABLE)
    last_used_date = models.DateTimeField(db_column='LastUsedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='mailmergetemplate_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='mailmergetemplate_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    security_options_attachment_scanned_for_xss = models.BooleanField(db_column='SecurityOptionsAttachmentScannedForXSS', verbose_name='Attachment has been scanned for XSS')
    security_options_attachment_has_xssthreat = models.BooleanField(db_column='SecurityOptionsAttachmentHasXSSThreat', verbose_name='XSS threat was detected in the attachment')
    security_options_attachment_scannedfor_flash = models.BooleanField(db_column='SecurityOptionsAttachmentScannedforFlash', verbose_name='Attachment has been scanned for Flash Injection')
    security_options_attachment_has_flash = models.BooleanField(db_column='SecurityOptionsAttachmentHasFlash', verbose_name='Flash Injection was detected in the attachment')
    class Meta(models.Model.Meta):
        db_table = 'MailmergeTemplate'
        verbose_name = 'Mail Merge Template'
        verbose_name_plural = 'Mail Merge Template'
        # keyPrefix = '01H'



class MainProductFrequencyShare(models.Model):
    parent = models.ForeignKey('MainProductFrequency', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Main_Product_Frequency__Share'
        verbose_name = 'Share: Main Product Frequency'
        verbose_name_plural = 'Share: Main Product Frequency'
        # keyPrefix = None



class MainProductFrequency(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Main Product Frequencies Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='mainproductfrequency_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='mainproductfrequency_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    frequency_type = models.CharField(db_column='Frequency_Type__c', max_length=255, verbose_name='Frequency Type', choices=[('One-time', 'One-time'), ('Recurring', 'Recurring')], blank=True, null=True)
    main_product = models.ForeignKey('MainProduct', models.DO_NOTHING, db_column='Main_Product__c', verbose_name='Main Product', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Main_Product_Frequency__c'
        verbose_name = 'Main Product Frequency'
        verbose_name_plural = 'Main Product Frequencies'
        # keyPrefix = 'a0P'



class MainProductInfoShare(models.Model):
    parent = models.ForeignKey('MainProductInfo', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Main_Product_Info__Share'
        verbose_name = 'Share: Main Product Info'
        verbose_name_plural = 'Share: Main Product Info'
        # keyPrefix = None



class MainProductInfo(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Main Product Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='mainproductinfo_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='mainproductinfo_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    main_product = models.ForeignKey('MainProduct', models.DO_NOTHING, db_column='Main_Product__c', verbose_name='Main Product', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Main_Product_Info__c'
        verbose_name = 'Main Product Info'
        verbose_name_plural = 'Main Product Infos'
        # keyPrefix = 'a0O'



class MainProductShare(models.Model):
    parent = models.ForeignKey('MainProduct', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Main_Product__Share'
        verbose_name = 'Share: Main Product'
        verbose_name_plural = 'Share: Main Product'
        # keyPrefix = None



class MainProduct(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Main Products Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='mainproduct_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='mainproduct_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ar_url = models.URLField(db_column='AR_Url__c', verbose_name='AR Url', blank=True, null=True)
    description = models.CharField(db_column='Description__c', max_length=100, blank=True, null=True)
    image = models.URLField(db_column='Image__c', blank=True, null=True)
    product_category = models.ForeignKey('ProductCategory', models.DO_NOTHING, db_column='Product_Category__c', verbose_name='Product Category', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Main_Product__c'
        verbose_name = 'Main Product'
        verbose_name_plural = 'Main Products'
        # keyPrefix = 'a0L'



class ManagedContent(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='managedcontent_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='managedcontent_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    primary_language = models.CharField(db_column='PrimaryLanguage', max_length=255, sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    content_key = models.CharField(db_column='ContentKey', max_length=80, verbose_name='Global Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ManagedContent'
        verbose_name = 'Managed Content'
        verbose_name_plural = 'Managed Contents'
        # keyPrefix = '20Y'



class ManagedContentChannel(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Managed Content Channel Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='managedcontentchannel_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='managedcontentchannel_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Managed Content Channel Type', sf_read_only=models.READ_ONLY, choices=[('COMMUNITY', None), ('CloudToCloud', None), ('ConnectedApp', None), ('Record', None), ('PublicUnauthenticated', None)])
    options_is_searchable = models.BooleanField(db_column='OptionsIsSearchable', verbose_name='Content Is Searchable in this Channel', sf_read_only=models.READ_ONLY)
    options_is_cache_control_public = models.BooleanField(db_column='OptionsIsCacheControlPublic', verbose_name='CacheControl header for this Channel should be set to Public', sf_read_only=models.READ_ONLY)
    options_is_domain_locked = models.BooleanField(db_column='OptionsIsDomainLocked', verbose_name='The Domain field is editable or read only for this Channel', sf_read_only=models.READ_ONLY)
    domain = models.CharField(db_column='Domain', max_length=255, verbose_name='Domain ID', sf_read_only=models.READ_ONLY, choices=[('CMS', 'trydownstream.cdn.salesforce-experience.com')], blank=True, null=True)
    domain_host_name = models.CharField(db_column='DomainHostName', max_length=765, verbose_name='Host name of the Domain', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cache_control_max_age = models.TextField(db_column='CacheControlMaxAge', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'ManagedContentChannel'
        verbose_name = 'Managed Content Channel'
        verbose_name_plural = 'Managed Content Channels'
        # keyPrefix = '0ap'



class MatchingInformation(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='matchinginformation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='matchinginformation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    email_address = models.EmailField(db_column='EmailAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_id = models.CharField(db_column='ExternalId', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sfdcid = models.ForeignKey(Contact, models.DO_NOTHING, db_column='SFDCIdId', verbose_name='Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    is_picked_as_preferred = models.BooleanField(db_column='IsPickedAsPreferred', verbose_name='Preferred', sf_read_only=models.READ_ONLY, default=False)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='matchinginformation_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    preference_used = models.CharField(db_column='PreferenceUsed', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MatchingInformation'
        verbose_name = 'Matching Information'
        verbose_name_plural = 'Matching Information'
        # keyPrefix = '0Ib'



class MatchingRule(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Contact', None), ('Lead', None)])
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Rule Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='matchingrule_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='matchingrule_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    match_engine = models.CharField(db_column='MatchEngine', max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('ExactMatchEngine', 'Exact Match Engine'), ('FuzzyMatchEngine', 'Fuzzy Match Engine')], blank=True, null=True)
    boolean_filter = models.CharField(db_column='BooleanFilter', max_length=255, verbose_name='Advanced Logic', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    rule_status = models.CharField(db_column='RuleStatus', max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, default='Inactive', choices=[('Inactive', 'Inactive'), ('DeactivationFailed', 'Deactivation Failed'), ('Activating', 'Activating'), ('Deactivating', 'Deactivating'), ('Active', 'Active'), ('ActivationFailed', 'Activation Failed')])
    sobject_subtype = models.CharField(db_column='SobjectSubtype', max_length=255, verbose_name='Object Subtype', sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MatchingRule'
        verbose_name = 'Matching Rule'
        verbose_name_plural = 'Matching Rules'
        # keyPrefix = '0JD'



class MatchingRuleItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='matchingruleitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='matchingruleitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    matching_rule = models.ForeignKey(MatchingRule, models.DO_NOTHING, db_column='MatchingRuleId', verbose_name='Matching Rule ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Too long choices skipped
    matching_method = models.CharField(db_column='MatchingMethod', max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Exact', 'Exact'), ('FirstName', 'Fuzzy: First Name'), ('LastName', 'Fuzzy: Last Name'), ('CompanyName', 'Fuzzy: Company Name'), ('Phone', 'Fuzzy: Phone'), ('City', 'Fuzzy: City'), ('Street', 'Fuzzy: Street'), ('Zip', 'Fuzzy: ZIP'), ('Title', 'Fuzzy: Title')], blank=True, null=True)
    blank_value_behavior = models.CharField(db_column='BlankValueBehavior', max_length=255, sf_read_only=models.READ_ONLY, default='MatchBlanks', choices=[('MatchBlanks', 'Match When Both Blank'), ('NullNotAllowed', 'Does Not Match If Null')])
    class Meta(models.Model.Meta):
        db_table = 'MatchingRuleItem'
        verbose_name = 'Matching Rule Item'
        verbose_name_plural = 'Matching Rule Items'
        # keyPrefix = '0JE'



class MilestoneType(models.Model):
    name = models.CharField(db_column='Name', max_length=80)
    description = models.TextField(db_column='Description', blank=True, null=True)
    recurrence_type = models.CharField(db_column='RecurrenceType', max_length=40, choices=[('none', 'No Recurrence'), ('recursIndependently', 'Independent'), ('recursChained', 'Sequential')], blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='milestonetype_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='milestonetype_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'MilestoneType'
        verbose_name = 'Milestone'
        verbose_name_plural = 'Milestones'
        # keyPrefix = '557'



class MobileApplicationDetail(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='mobileapplicationdetail_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='mobileapplicationdetail_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    version = models.CharField(db_column='Version', max_length=255)
    device_platform = models.CharField(db_column='DevicePlatform', max_length=255, choices=[('ios', 'iOS'), ('android', 'Android')])
    minimum_os_version = models.CharField(db_column='MinimumOsVersion', max_length=255, verbose_name='Minimum OS Version', blank=True, null=True)
    device_type = models.CharField(db_column='DeviceType', max_length=255, choices=[('phone', 'Phone'), ('tablet', 'Tablet'), ('minitablet', 'Mini-Tablet')], blank=True, null=True)
    application_file_length = models.IntegerField(db_column='ApplicationFileLength', sf_read_only=models.READ_ONLY, blank=True, null=True)
    application_icon = models.TextField(db_column='ApplicationIcon', blank=True, null=True)
    is_enterprise_app = models.BooleanField(db_column='IsEnterpriseApp', verbose_name='Enterprise Application', default=False)
    app_install_url = models.URLField(db_column='AppInstallUrl', verbose_name='Installation URL', blank=True, null=True)
    application_bundle_identifier = models.CharField(db_column='ApplicationBundleIdentifier', max_length=255, blank=True, null=True)
    application_binary_file_name = models.CharField(db_column='ApplicationBinaryFileName', max_length=255, blank=True, null=True)
    application_icon_file_name = models.CharField(db_column='ApplicationIconFileName', max_length=255, blank=True, null=True)
    application_binary = models.TextField(db_column='ApplicationBinary', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MobileApplicationDetail'
        verbose_name = 'Mobile Application Detail'
        verbose_name_plural = 'Mobile Application Details'
        # keyPrefix = '0IW'



class MutingPermissionSet(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Muting Permission Set Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Muting Permission Set Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='mutingpermissionset_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='mutingpermissionset_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    permissions_email_single = models.BooleanField(db_column='PermissionsEmailSingle', verbose_name='Send Email')
    permissions_email_mass = models.BooleanField(db_column='PermissionsEmailMass', verbose_name='Mass Email')
    permissions_edit_task = models.BooleanField(db_column='PermissionsEditTask', verbose_name='Edit Tasks')
    permissions_edit_event = models.BooleanField(db_column='PermissionsEditEvent', verbose_name='Edit Events')
    permissions_export_report = models.BooleanField(db_column='PermissionsExportReport', verbose_name='Export Reports')
    permissions_import_personal = models.BooleanField(db_column='PermissionsImportPersonal', verbose_name='Import Personal Contacts')
    permissions_data_export = models.BooleanField(db_column='PermissionsDataExport', verbose_name='Weekly Data Export')
    permissions_manage_users = models.BooleanField(db_column='PermissionsManageUsers', verbose_name='Manage Users')
    permissions_edit_public_filters = models.BooleanField(db_column='PermissionsEditPublicFilters', verbose_name='Manage Public List Views')
    permissions_edit_public_templates = models.BooleanField(db_column='PermissionsEditPublicTemplates', verbose_name='Manage Public Classic Email Templates')
    permissions_modify_all_data = models.BooleanField(db_column='PermissionsModifyAllData', verbose_name='Modify All Data')
    permissions_manage_cases = models.BooleanField(db_column='PermissionsManageCases', verbose_name='Manage Cases')
    permissions_mass_inline_edit = models.BooleanField(db_column='PermissionsMassInlineEdit', verbose_name='Mass Edits from Lists')
    permissions_manage_solutions = models.BooleanField(db_column='PermissionsManageSolutions', verbose_name='Manage Published Solutions')
    permissions_customize_application = models.BooleanField(db_column='PermissionsCustomizeApplication', verbose_name='Customize Application')
    permissions_edit_readonly_fields = models.BooleanField(db_column='PermissionsEditReadonlyFields', verbose_name='Edit Read Only Fields')
    permissions_run_reports = models.BooleanField(db_column='PermissionsRunReports', verbose_name='Run Reports')
    permissions_view_setup = models.BooleanField(db_column='PermissionsViewSetup', verbose_name='View Setup and Configuration')
    permissions_transfer_any_entity = models.BooleanField(db_column='PermissionsTransferAnyEntity', verbose_name='Transfer Record')
    permissions_new_report_builder = models.BooleanField(db_column='PermissionsNewReportBuilder', verbose_name='Report Builder')
    permissions_activate_contract = models.BooleanField(db_column='PermissionsActivateContract', verbose_name='Activate Contracts')
    permissions_activate_order = models.BooleanField(db_column='PermissionsActivateOrder', verbose_name='Activate Orders')
    permissions_import_leads = models.BooleanField(db_column='PermissionsImportLeads', verbose_name='Import Leads')
    permissions_manage_leads = models.BooleanField(db_column='PermissionsManageLeads', verbose_name='Manage Leads')
    permissions_transfer_any_lead = models.BooleanField(db_column='PermissionsTransferAnyLead', verbose_name='Transfer Leads')
    permissions_view_all_data = models.BooleanField(db_column='PermissionsViewAllData', verbose_name='View All Data')
    permissions_edit_public_documents = models.BooleanField(db_column='PermissionsEditPublicDocuments', verbose_name='Manage Public Documents')
    permissions_view_encrypted_data = models.BooleanField(db_column='PermissionsViewEncryptedData', verbose_name='View Encrypted Data')
    permissions_edit_brand_templates = models.BooleanField(db_column='PermissionsEditBrandTemplates', verbose_name='Manage Letterheads')
    permissions_edit_html_templates = models.BooleanField(db_column='PermissionsEditHtmlTemplates', verbose_name='Edit HTML Templates')
    permissions_chatter_internal_user = models.BooleanField(db_column='PermissionsChatterInternalUser', verbose_name='Chatter Internal User')
    permissions_delete_activated_contract = models.BooleanField(db_column='PermissionsDeleteActivatedContract', verbose_name='Delete Activated Contracts')
    permissions_chatter_invite_external_users = models.BooleanField(db_column='PermissionsChatterInviteExternalUsers', verbose_name='Invite Customers To Chatter')
    permissions_send_sit_requests = models.BooleanField(db_column='PermissionsSendSitRequests', verbose_name='Send Stay-in-Touch Requests')
    permissions_override_forecasts = models.BooleanField(db_column='PermissionsOverrideForecasts', verbose_name='Override Forecasts')
    permissions_view_all_forecasts = models.BooleanField(db_column='PermissionsViewAllForecasts', verbose_name='View All Forecasts')
    permissions_manage_remote_access = models.BooleanField(db_column='PermissionsManageRemoteAccess', verbose_name='Manage Connected Apps')
    permissions_can_use_new_dashboard_builder = models.BooleanField(db_column='PermissionsCanUseNewDashboardBuilder', verbose_name='Drag-and-Drop Dashboard Builder')
    permissions_manage_categories = models.BooleanField(db_column='PermissionsManageCategories', verbose_name='Manage Categories')
    permissions_convert_leads = models.BooleanField(db_column='PermissionsConvertLeads', verbose_name='Convert Leads')
    permissions_password_never_expires = models.BooleanField(db_column='PermissionsPasswordNeverExpires', verbose_name='Password Never Expires')
    permissions_edit_activated_orders = models.BooleanField(db_column='PermissionsEditActivatedOrders', verbose_name='Edit Activated Orders')
    permissions_install_packaging = models.BooleanField(db_column='PermissionsInstallPackaging', verbose_name='Download AppExchange Packages')
    permissions_publish_packaging = models.BooleanField(db_column='PermissionsPublishPackaging', verbose_name='Upload AppExchange Packages')
    permissions_chatter_own_groups = models.BooleanField(db_column='PermissionsChatterOwnGroups', verbose_name='Create and Own New Chatter Groups')
    permissions_edit_opp_line_item_unit_price = models.BooleanField(db_column='PermissionsEditOppLineItemUnitPrice', verbose_name='Edit Opportunity Product Sales Price')
    permissions_create_packaging = models.BooleanField(db_column='PermissionsCreatePackaging', verbose_name='Create AppExchange Packages')
    permissions_bulk_api_hard_delete = models.BooleanField(db_column='PermissionsBulkApiHardDelete', verbose_name='Bulk API Hard Delete')
    permissions_inbound_migration_tools_user = models.BooleanField(db_column='PermissionsInboundMigrationToolsUser', verbose_name='Deploy Change Sets')
    permissions_solution_import = models.BooleanField(db_column='PermissionsSolutionImport', verbose_name='Import Solutions')
    permissions_manage_call_centers = models.BooleanField(db_column='PermissionsManageCallCenters', verbose_name='Manage Call Centers')
    permissions_manage_synonyms = models.BooleanField(db_column='PermissionsManageSynonyms', verbose_name='Manage Synonyms')
    permissions_outbound_migration_tools_user = models.BooleanField(db_column='PermissionsOutboundMigrationToolsUser', verbose_name='Create and Upload Change Sets')
    permissions_view_content = models.BooleanField(db_column='PermissionsViewContent', verbose_name='View Content in Portals')
    permissions_manage_email_client_config = models.BooleanField(db_column='PermissionsManageEmailClientConfig', verbose_name='Manage Email Client Configurations')
    permissions_enable_notifications = models.BooleanField(db_column='PermissionsEnableNotifications', verbose_name='Send Outbound Messages')
    permissions_manage_data_integrations = models.BooleanField(db_column='PermissionsManageDataIntegrations', verbose_name='Manage Data Integrations')
    permissions_distribute_from_pers_wksp = models.BooleanField(db_column='PermissionsDistributeFromPersWksp', verbose_name='Create Content Deliveries')
    permissions_manage_mobile = models.BooleanField(db_column='PermissionsManageMobile', verbose_name='Manage Mobile Configurations')
    permissions_api_enabled = models.BooleanField(db_column='PermissionsApiEnabled', verbose_name='API Enabled')
    permissions_manage_custom_report_types = models.BooleanField(db_column='PermissionsManageCustomReportTypes', verbose_name='Manage Custom Report Types')
    permissions_edit_case_comments = models.BooleanField(db_column='PermissionsEditCaseComments', verbose_name='Edit Case Comments')
    permissions_transfer_any_case = models.BooleanField(db_column='PermissionsTransferAnyCase', verbose_name='Transfer Cases')
    permissions_content_administrator = models.BooleanField(db_column='PermissionsContentAdministrator', verbose_name='Manage Salesforce CRM Content')
    permissions_create_workspaces = models.BooleanField(db_column='PermissionsCreateWorkspaces', verbose_name='Create Libraries')
    permissions_manage_content_permissions = models.BooleanField(db_column='PermissionsManageContentPermissions', verbose_name='Manage Content Permissions')
    permissions_manage_content_properties = models.BooleanField(db_column='PermissionsManageContentProperties', verbose_name='Manage Content Properties')
    permissions_manage_content_types = models.BooleanField(db_column='PermissionsManageContentTypes', verbose_name='Manage record types and layouts for Files')
    permissions_manage_exchange_config = models.BooleanField(db_column='PermissionsManageExchangeConfig', verbose_name='Manage Lightning Sync')
    permissions_manage_analytic_snapshots = models.BooleanField(db_column='PermissionsManageAnalyticSnapshots', verbose_name='Manage Reporting Snapshots')
    permissions_schedule_reports = models.BooleanField(db_column='PermissionsScheduleReports', verbose_name='Schedule Reports')
    permissions_manage_business_hour_holidays = models.BooleanField(db_column='PermissionsManageBusinessHourHolidays', verbose_name='Manage Business Hours Holidays')
    permissions_manage_entitlements = models.BooleanField(db_column='PermissionsManageEntitlements', verbose_name='Manage Entitlements')
    permissions_custom_sidebar_on_all_pages = models.BooleanField(db_column='PermissionsCustomSidebarOnAllPages', verbose_name='Show Custom Sidebar On All Pages')
    permissions_manage_interaction = models.BooleanField(db_column='PermissionsManageInteraction', verbose_name='Manage Flow')
    permissions_view_my_teams_dashboards = models.BooleanField(db_column='PermissionsViewMyTeamsDashboards', verbose_name="View My Team's Dashboards")
    permissions_moderate_chatter = models.BooleanField(db_column='PermissionsModerateChatter', verbose_name='Moderate Chatter')
    permissions_reset_passwords = models.BooleanField(db_column='PermissionsResetPasswords', verbose_name='Reset User Passwords and Unlock Users')
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License')
    permissions_can_insert_feed_system_fields = models.BooleanField(db_column='PermissionsCanInsertFeedSystemFields', verbose_name='Insert System Field Values for Chatter Feeds')
    permissions_activities_access = models.BooleanField(db_column='PermissionsActivitiesAccess', verbose_name='Access Activities')
    permissions_email_template_management = models.BooleanField(db_column='PermissionsEmailTemplateManagement', verbose_name='Manage Email Templates')
    permissions_email_administration = models.BooleanField(db_column='PermissionsEmailAdministration', verbose_name='Email Administration')
    permissions_manage_chatter_messages = models.BooleanField(db_column='PermissionsManageChatterMessages', verbose_name='Manage Chatter Messages and Direct Messages')
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option')
    permissions_chatter_file_link = models.BooleanField(db_column='PermissionsChatterFileLink', verbose_name='Create Public Links')
    permissions_force_two_factor = models.BooleanField(db_column='PermissionsForceTwoFactor', verbose_name='Multi-Factor Authentication for User Interface Logins')
    permissions_view_case_interaction = models.BooleanField(db_column='PermissionsViewCaseInteraction', verbose_name='Use Case Feed')
    permissions_manage_auth_providers = models.BooleanField(db_column='PermissionsManageAuthProviders', verbose_name='Manage Auth. Providers')
    permissions_run_flow = models.BooleanField(db_column='PermissionsRunFlow', verbose_name='Run Flows')
    permissions_manage_quotas = models.BooleanField(db_column='PermissionsManageQuotas', verbose_name='Manage Quotas')
    permissions_create_customize_dashboards = models.BooleanField(db_column='PermissionsCreateCustomizeDashboards', verbose_name='Create and Customize Dashboards')
    permissions_create_dashboard_folders = models.BooleanField(db_column='PermissionsCreateDashboardFolders', verbose_name='Create Dashboard Folders')
    permissions_view_public_dashboards = models.BooleanField(db_column='PermissionsViewPublicDashboards', verbose_name='View Dashboards in Public Folders')
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(db_column='PermissionsManageDashbdsInPubFolders', verbose_name='Manage Dashboards in Public Folders')
    permissions_create_customize_reports = models.BooleanField(db_column='PermissionsCreateCustomizeReports', verbose_name='Create and Customize Reports')
    permissions_create_report_folders = models.BooleanField(db_column='PermissionsCreateReportFolders', verbose_name='Create Report Folders')
    permissions_view_public_reports = models.BooleanField(db_column='PermissionsViewPublicReports', verbose_name='View Reports in Public Folders')
    permissions_manage_reports_in_pub_folders = models.BooleanField(db_column='PermissionsManageReportsInPubFolders', verbose_name='Manage Reports in Public Folders')
    permissions_edit_my_dashboards = models.BooleanField(db_column='PermissionsEditMyDashboards', verbose_name='Edit My Dashboards')
    permissions_edit_my_reports = models.BooleanField(db_column='PermissionsEditMyReports', verbose_name='Edit My Reports')
    permissions_view_all_users = models.BooleanField(db_column='PermissionsViewAllUsers', verbose_name='View All Users')
    permissions_bypass_email_approval = models.BooleanField(db_column='PermissionsBypassEmailApproval', verbose_name='Bypass Email Approval')
    permissions_connect_org_to_environment_hub = models.BooleanField(db_column='PermissionsConnectOrgToEnvironmentHub', verbose_name='Connect Organization to Environment Hub')
    permissions_create_customize_filters = models.BooleanField(db_column='PermissionsCreateCustomizeFilters', verbose_name='Create and Customize List Views')
    permissions_content_hub_user = models.BooleanField(db_column='PermissionsContentHubUser', verbose_name='Files Connect Cloud')
    permissions_sales_console = models.BooleanField(db_column='PermissionsSalesConsole', verbose_name='Sales Console')
    permissions_two_factor_api = models.BooleanField(db_column='PermissionsTwoFactorApi', verbose_name='Multi-Factor Authentication for API Logins')
    permissions_delete_topics = models.BooleanField(db_column='PermissionsDeleteTopics', verbose_name='Delete Topics')
    permissions_edit_topics = models.BooleanField(db_column='PermissionsEditTopics', verbose_name='Edit Topics')
    permissions_create_topics = models.BooleanField(db_column='PermissionsCreateTopics', verbose_name='Create Topics')
    permissions_assign_topics = models.BooleanField(db_column='PermissionsAssignTopics', verbose_name='Assign Topics')
    permissions_identity_enabled = models.BooleanField(db_column='PermissionsIdentityEnabled', verbose_name='Use Identity Features')
    permissions_identity_connect = models.BooleanField(db_column='PermissionsIdentityConnect', verbose_name='Use Identity Connect')
    permissions_content_workspaces = models.BooleanField(db_column='PermissionsContentWorkspaces', verbose_name='Access Libraries')
    permissions_create_work_badge_definition = models.BooleanField(db_column='PermissionsCreateWorkBadgeDefinition', verbose_name='Create custom Badge Definitions')
    permissions_custom_mobile_apps_access = models.BooleanField(db_column='PermissionsCustomMobileAppsAccess', verbose_name='Access Custom Mobile Apps')
    permissions_view_help_link = models.BooleanField(db_column='PermissionsViewHelpLink', verbose_name='View Help Link')
    permissions_manage_profiles_permissionsets = models.BooleanField(db_column='PermissionsManageProfilesPermissionsets', verbose_name='Manage Profiles and Permission Sets')
    permissions_assign_permission_sets = models.BooleanField(db_column='PermissionsAssignPermissionSets', verbose_name='Assign Permission Sets')
    permissions_manage_roles = models.BooleanField(db_column='PermissionsManageRoles', verbose_name='Manage Roles')
    permissions_manage_ip_addresses = models.BooleanField(db_column='PermissionsManageIpAddresses', verbose_name='Manage IP Addresses')
    permissions_manage_sharing = models.BooleanField(db_column='PermissionsManageSharing', verbose_name='Manage Sharing')
    permissions_manage_internal_users = models.BooleanField(db_column='PermissionsManageInternalUsers', verbose_name='Manage Internal Users')
    permissions_manage_password_policies = models.BooleanField(db_column='PermissionsManagePasswordPolicies', verbose_name='Manage Password Policies')
    permissions_manage_login_access_policies = models.BooleanField(db_column='PermissionsManageLoginAccessPolicies', verbose_name='Manage Login Access Policies')
    permissions_can_verify_comment = models.BooleanField(db_column='PermissionsCanVerifyComment', verbose_name='Verify Answers to Chatter Questions')
    permissions_manage_unlisted_groups = models.BooleanField(db_column='PermissionsManageUnlistedGroups', verbose_name='Manage Unlisted Groups')
    permissions_std_automatic_activity_capture = models.BooleanField(db_column='PermissionsStdAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture Standard')
    permissions_insights_app_dashboard_editor = models.BooleanField(db_column='PermissionsInsightsAppDashboardEditor', verbose_name='Create and Edit CRM Analytics Dashboards')
    permissions_manage_two_factor = models.BooleanField(db_column='PermissionsManageTwoFactor', verbose_name='Manage Multi-Factor Authentication in API')
    permissions_insights_app_user = models.BooleanField(db_column='PermissionsInsightsAppUser', verbose_name='Use CRM Analytics')
    permissions_insights_app_admin = models.BooleanField(db_column='PermissionsInsightsAppAdmin', verbose_name='Manage CRM Analytics')
    permissions_insights_app_elt_editor = models.BooleanField(db_column='PermissionsInsightsAppEltEditor', verbose_name='Edit CRM Analytics Dataflows')
    permissions_insights_app_upload_user = models.BooleanField(db_column='PermissionsInsightsAppUploadUser', verbose_name='Upload External Data to CRM Analytics')
    permissions_insights_create_application = models.BooleanField(db_column='PermissionsInsightsCreateApplication', verbose_name='Create CRM Analytics Apps')
    permissions_lightning_experience_user = models.BooleanField(db_column='PermissionsLightningExperienceUser', verbose_name='Lightning Experience User')
    permissions_config_custom_recs = models.BooleanField(db_column='PermissionsConfigCustomRecs', verbose_name='Configure Custom Recommendations')
    permissions_submit_macros_allowed = models.BooleanField(db_column='PermissionsSubmitMacrosAllowed', verbose_name="Manage Macros Users Can't Undo")
    permissions_bulk_macros_allowed = models.BooleanField(db_column='PermissionsBulkMacrosAllowed', verbose_name='Run Macros on Multiple Records')
    permissions_public_twitter_response = models.BooleanField(db_column='PermissionsPublicTwitterResponse', verbose_name='Public Twitter Response')
    permissions_manage_session_permission_sets = models.BooleanField(db_column='PermissionsManageSessionPermissionSets', verbose_name='Manage Session Permission Set Activations')
    permissions_manage_templated_app = models.BooleanField(db_column='PermissionsManageTemplatedApp', verbose_name='Manage CRM Analytics Templated Apps')
    permissions_use_templated_app = models.BooleanField(db_column='PermissionsUseTemplatedApp', verbose_name='Use CRM Analytics Templated Apps')
    permissions_send_announcement_emails = models.BooleanField(db_column='PermissionsSendAnnouncementEmails', verbose_name='Send announcement emails')
    permissions_chatter_edit_own_post = models.BooleanField(db_column='PermissionsChatterEditOwnPost', verbose_name='Edit My Own Posts')
    permissions_chatter_edit_own_record_post = models.BooleanField(db_column='PermissionsChatterEditOwnRecordPost', verbose_name='Edit Posts on Records I Own')
    permissions_wave_tabular_download = models.BooleanField(db_column='PermissionsWaveTabularDownload', verbose_name='Download CRM Analytics Data')
    permissions_manage_sandboxes = models.BooleanField(db_column='PermissionsManageSandboxes', verbose_name='Manage Sandboxes')
    permissions_automatic_activity_capture = models.BooleanField(db_column='PermissionsAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture')
    permissions_import_custom_objects = models.BooleanField(db_column='PermissionsImportCustomObjects', verbose_name='Import Custom Objects')
    permissions_delegated_two_factor = models.BooleanField(db_column='PermissionsDelegatedTwoFactor', verbose_name='Manage Multi-Factor Authentication in User Interface')
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(db_column='PermissionsChatterComposeUiCodesnippet', verbose_name='Allow Inclusion of Code Snippets from UI')
    permissions_select_files_from_salesforce = models.BooleanField(db_column='PermissionsSelectFilesFromSalesforce', verbose_name='Select Files from Salesforce')
    permissions_voice_outbound = models.BooleanField(db_column='PermissionsVoiceOutbound', verbose_name='Access Dialer Outbound Calls')
    permissions_voice_inbound = models.BooleanField(db_column='PermissionsVoiceInbound', verbose_name='Access Dialer Inbound Calls')
    permissions_voice_minutes = models.BooleanField(db_column='PermissionsVoiceMinutes', verbose_name='Access Dialer Minutes')
    permissions_voice_coach = models.BooleanField(db_column='PermissionsVoiceCoach', verbose_name='Access Dialer Monitoring')
    permissions_merge_topics = models.BooleanField(db_column='PermissionsMergeTopics', verbose_name='Merge Topics')
    permissions_edit_iqfields = models.BooleanField(db_column='PermissionsEditIQFields', verbose_name='Update Activity Metrics Data')
    permissions_subscribe_to_lightning_reports = models.BooleanField(db_column='PermissionsSubscribeToLightningReports', verbose_name='Subscribe to Reports')
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(db_column='PermissionsManagePvtRptsAndDashbds', verbose_name='Manage All Private Reports and Dashboards')
    permissions_allow_lightning_login = models.BooleanField(db_column='PermissionsAllowLightningLogin', verbose_name='Lightning Login User')
    permissions_campaign_influence2 = models.BooleanField(db_column='PermissionsCampaignInfluence2', verbose_name='Campaign Influence')
    permissions_view_data_assessment = models.BooleanField(db_column='PermissionsViewDataAssessment', verbose_name='Access to view Data Assessment')
    permissions_remove_direct_message_members = models.BooleanField(db_column='PermissionsRemoveDirectMessageMembers', verbose_name='Remove People from Direct Messages')
    permissions_can_approve_feed_post = models.BooleanField(db_column='PermissionsCanApproveFeedPost', verbose_name='Can Approve Feed Post and Comment')
    permissions_add_direct_message_members = models.BooleanField(db_column='PermissionsAddDirectMessageMembers', verbose_name='Add People to Direct Messages')
    permissions_allow_view_edit_converted_leads = models.BooleanField(db_column='PermissionsAllowViewEditConvertedLeads', verbose_name='View and Edit Converted Leads')
    permissions_social_insights_logo_admin = models.BooleanField(db_column='PermissionsSocialInsightsLogoAdmin', verbose_name='Remove Logos from Accounts')
    permissions_show_company_name_as_user_badge = models.BooleanField(db_column='PermissionsShowCompanyNameAsUserBadge', verbose_name='Show Company Name as Site Role')
    permissions_view_health_check = models.BooleanField(db_column='PermissionsViewHealthCheck', verbose_name='View Health Check')
    permissions_manage_health_check = models.BooleanField(db_column='PermissionsManageHealthCheck', verbose_name='Manage Health Check')
    permissions_packaging2 = models.BooleanField(db_column='PermissionsPackaging2', verbose_name='Create and Update Second-Generation Packages')
    permissions_manage_certificates = models.BooleanField(db_column='PermissionsManageCertificates', verbose_name='Manage Certificates')
    permissions_create_report_in_lightning = models.BooleanField(db_column='PermissionsCreateReportInLightning', verbose_name='Report Builder (Lightning Experience)')
    permissions_prevent_classic_experience = models.BooleanField(db_column='PermissionsPreventClassicExperience', verbose_name='Hide Option to Switch to Salesforce Classic')
    permissions_hide_read_by_list = models.BooleanField(db_column='PermissionsHideReadByList', verbose_name='Hide the Seen By List')
    permissions_list_email_send = models.BooleanField(db_column='PermissionsListEmailSend', verbose_name='Allow sending of List Emails')
    permissions_feed_pinning = models.BooleanField(db_column='PermissionsFeedPinning', verbose_name='Pin Posts in Feeds')
    permissions_change_dashboard_colors = models.BooleanField(db_column='PermissionsChangeDashboardColors', verbose_name='Change Dashboard Colors')
    permissions_manage_recommendation_strategies = models.BooleanField(db_column='PermissionsManageRecommendationStrategies', verbose_name='Manage Next Best Action Strategies')
    permissions_manage_propositions = models.BooleanField(db_column='PermissionsManagePropositions', verbose_name='Manage Next Best Action Recommendations')
    permissions_close_conversations = models.BooleanField(db_column='PermissionsCloseConversations', verbose_name='Close Conversation Threads')
    permissions_subscribe_report_roles_grps = models.BooleanField(db_column='PermissionsSubscribeReportRolesGrps', verbose_name='Subscribe to Reports: Send to Groups and Roles')
    permissions_subscribe_dashboard_roles_grps = models.BooleanField(db_column='PermissionsSubscribeDashboardRolesGrps', verbose_name='Subscribe to Dashboards: Send to Groups and Roles')
    permissions_use_web_link = models.BooleanField(db_column='PermissionsUseWebLink', verbose_name='Allow Access to Customized Actions')
    permissions_edit_asefields = models.BooleanField(db_column='PermissionsEditASEFields', verbose_name='Update One Sync Engine Data')
    permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='PermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions')
    permissions_view_only_embedded_app_user = models.BooleanField(db_column='PermissionsViewOnlyEmbeddedAppUser', verbose_name='Access to View-Only Licensed Templates and Apps')
    permissions_send_external_email_available = models.BooleanField(db_column='PermissionsSendExternalEmailAvailable', verbose_name='Send Email through External Email Service')
    permissions_view_all_activities = models.BooleanField(db_column='PermissionsViewAllActivities', verbose_name='View All Activities')
    permissions_subscribe_report_to_other_users = models.BooleanField(db_column='PermissionsSubscribeReportToOtherUsers', verbose_name='Subscribe to Reports: Add Recipients')
    permissions_lightning_console_allowed_for_user = models.BooleanField(db_column='PermissionsLightningConsoleAllowedForUser', verbose_name='Lightning Console User')
    permissions_subscribe_reports_run_as_user = models.BooleanField(db_column='PermissionsSubscribeReportsRunAsUser', verbose_name='Subscribe to Reports: Set Running User')
    permissions_subscribe_to_lightning_dashboards = models.BooleanField(db_column='PermissionsSubscribeToLightningDashboards', verbose_name='Subscribe to Dashboards')
    permissions_subscribe_dashboard_to_other_users = models.BooleanField(db_column='PermissionsSubscribeDashboardToOtherUsers', verbose_name='Subscribe to Dashboards: Add Recipients')
    permissions_create_ltng_temp_in_pub = models.BooleanField(db_column='PermissionsCreateLtngTempInPub', verbose_name='Manage Public Lightning Email Templates')
    permissions_transactional_email_send = models.BooleanField(db_column='PermissionsTransactionalEmailSend', verbose_name='Send Non-Commercial Email')
    permissions_view_private_static_resources = models.BooleanField(db_column='PermissionsViewPrivateStaticResources', verbose_name='View Private Static Resources')
    permissions_create_ltng_temp_folder = models.BooleanField(db_column='PermissionsCreateLtngTempFolder', verbose_name='Create Folders for Lightning Email Templates')
    permissions_apex_rest_services = models.BooleanField(db_column='PermissionsApexRestServices', verbose_name='Apex REST Services')
    permissions_give_recognition_badge = models.BooleanField(db_column='PermissionsGiveRecognitionBadge', verbose_name='Give Recognition Badges in Experience Builder Sites')
    permissions_use_my_search = models.BooleanField(db_column='PermissionsUseMySearch', verbose_name='Einstein Search')
    permissions_ltng_promo_reserved01_user_perm = models.BooleanField(db_column='PermissionsLtngPromoReserved01UserPerm', verbose_name='Remain in Salesforce Classic')
    permissions_manage_subscriptions = models.BooleanField(db_column='PermissionsManageSubscriptions', verbose_name='Manage CRM Analytics Subscriptions')
    permissions_wave_manage_private_assets_user = models.BooleanField(db_column='PermissionsWaveManagePrivateAssetsUser', verbose_name='Manage CRM Analytics Private Assets')
    permissions_can_edit_data_prep_recipe = models.BooleanField(db_column='PermissionsCanEditDataPrepRecipe', verbose_name='Edit Dataset Recipes')
    permissions_add_analytics_remote_connections = models.BooleanField(db_column='PermissionsAddAnalyticsRemoteConnections', verbose_name='Add CRM Analytics Remote Connections')
    permissions_use_assistant_dialog = models.BooleanField(db_column='PermissionsUseAssistantDialog', verbose_name='Instant Actionable Results')
    permissions_use_query_suggestions = models.BooleanField(db_column='PermissionsUseQuerySuggestions', verbose_name='Natural Language Search')
    permissions_view_roles = models.BooleanField(db_column='PermissionsViewRoles', verbose_name='View Roles and Role Hierarchy')
    permissions_can_manage_maps = models.BooleanField(db_column='PermissionsCanManageMaps', verbose_name='Manage CRM Analytics Custom Maps')
    permissions_lmoutbound_messaging_user_perm = models.BooleanField(db_column='PermissionsLMOutboundMessagingUserPerm', verbose_name='Agent Initiated Outbound Messaging')
    permissions_modify_data_classification = models.BooleanField(db_column='PermissionsModifyDataClassification', verbose_name='Modify Data Classification')
    permissions_privacy_data_access = models.BooleanField(db_column='PermissionsPrivacyDataAccess', verbose_name='Allow user to access privacy data')
    permissions_query_all_files = models.BooleanField(db_column='PermissionsQueryAllFiles', verbose_name='Query All Files')
    permissions_modify_metadata = models.BooleanField(db_column='PermissionsModifyMetadata', verbose_name='Modify Metadata Through Metadata API Functions')
    permissions_manage_cms = models.BooleanField(db_column='PermissionsManageCMS', verbose_name='Create CMS Workspaces and Channels')
    permissions_sandbox_testing_in_community_app = models.BooleanField(db_column='PermissionsSandboxTestingInCommunityApp', verbose_name='Test Sandboxes in Mobile Publisher for Experience Cloud')
    permissions_can_edit_prompts = models.BooleanField(db_column='PermissionsCanEditPrompts', verbose_name='Manage Prompts')
    permissions_view_user_pii = models.BooleanField(db_column='PermissionsViewUserPII', verbose_name='View Concealed Field Data')
    permissions_manage_hub_connections = models.BooleanField(db_column='PermissionsManageHubConnections', verbose_name='Connect Org to Customer 360 Data Manager')
    permissions_b2_bmarketing_analytics_user = models.BooleanField(db_column='PermissionsB2BMarketingAnalyticsUser', verbose_name='Create B2B Marketing Analytics Apps')
    permissions_trace_xds_queries = models.BooleanField(db_column='PermissionsTraceXdsQueries', verbose_name='Access Tracer for External Data Sources')
    permissions_view_all_custom_settings = models.BooleanField(db_column='PermissionsViewAllCustomSettings', verbose_name='View All Custom Settings')
    permissions_view_all_foreign_key_names = models.BooleanField(db_column='PermissionsViewAllForeignKeyNames', verbose_name='View All Lookup Record Names')
    permissions_add_wave_notification_recipients = models.BooleanField(db_column='PermissionsAddWaveNotificationRecipients', verbose_name='Add Recipients to CRM Analytics Notifications')
    permissions_headless_cmsaccess = models.BooleanField(db_column='PermissionsHeadlessCMSAccess', verbose_name='Enable Salesforce CMS Integration')
    permissions_lmend_messaging_session_user_perm = models.BooleanField(db_column='PermissionsLMEndMessagingSessionUserPerm', verbose_name='End Messaging Session')
    permissions_consent_api_update = models.BooleanField(db_column='PermissionsConsentApiUpdate', verbose_name='Update Consent Preferences Using REST API')
    permissions_access_content_builder = models.BooleanField(db_column='PermissionsAccessContentBuilder', verbose_name='Access drag-and-drop content builder')
    permissions_manage_c360_aconnections = models.BooleanField(db_column='PermissionsManageC360AConnections', verbose_name='Connect Org to Salesforce CDP')
    permissions_manage_release_updates = models.BooleanField(db_column='PermissionsManageReleaseUpdates', verbose_name='Manage Release Updates')
    permissions_view_all_profiles = models.BooleanField(db_column='PermissionsViewAllProfiles', verbose_name='View All Profiles')
    permissions_skip_identity_confirmation = models.BooleanField(db_column='PermissionsSkipIdentityConfirmation', verbose_name='Skip Device Activation at Login')
    permissions_learning_manager = models.BooleanField(db_column='PermissionsLearningManager', verbose_name='Manage Learning')
    permissions_send_custom_notifications = models.BooleanField(db_column='PermissionsSendCustomNotifications', verbose_name='Send Custom Notifications')
    permissions_packaging2_delete = models.BooleanField(db_column='PermissionsPackaging2Delete', verbose_name='Delete Second-Generation Packages')
    permissions_manage_learning_reporting = models.BooleanField(db_column='PermissionsManageLearningReporting', verbose_name='Manage Learning Reporting')
    permissions_isotope_cto_cuser = models.BooleanField(db_column='PermissionsIsotopeCToCUser', verbose_name='Salesforce Anywhere Integration Access')
    permissions_isotope_access = models.BooleanField(db_column='PermissionsIsotopeAccess', verbose_name='Salesforce Anywhere on Mobile')
    permissions_isotope_lex = models.BooleanField(db_column='PermissionsIsotopeLEX', verbose_name='Salesforce Anywhere in Lightning Experience')
    permissions_quip_metrics_access = models.BooleanField(db_column='PermissionsQuipMetricsAccess', verbose_name='Quip Metrics')
    permissions_quip_user_engagement_metrics = models.BooleanField(db_column='PermissionsQuipUserEngagementMetrics', verbose_name='Quip User Engagement Metrics')
    permissions_manage_external_connections = models.BooleanField(db_column='PermissionsManageExternalConnections', verbose_name='Allow user to modify Private Connections', sf_read_only=models.READ_ONLY)
    permissions_use_subscription_emails = models.BooleanField(db_column='PermissionsUseSubscriptionEmails', verbose_name='Subscribe to CRM Analytics Assets')
    permissions_native_webview_scrolling = models.BooleanField(db_column='PermissionsNativeWebviewScrolling', verbose_name='Salesforce Mobile App: Native scrolling on webviews')
    permissions_view_developer_name = models.BooleanField(db_column='PermissionsViewDeveloperName', verbose_name='View DeveloperName')
    permissions_bypass_mfafor_ui_logins = models.BooleanField(db_column='PermissionsBypassMFAForUiLogins', verbose_name='Waive Multi-Factor Authentication for Exempt Users')
    permissions_client_secret_rotation = models.BooleanField(db_column='PermissionsClientSecretRotation', verbose_name='Allow consumer key and secret rotation')
    permissions_enable_ipfsupload = models.BooleanField(db_column='PermissionsEnableIPFSUpload', verbose_name='Allow blockchain data upload')
    permissions_enable_bctransaction_polling = models.BooleanField(db_column='PermissionsEnableBCTransactionPolling', verbose_name='Enable blockchain transaction polling API')
    permissions_fscarc_graph_community_user = models.BooleanField(db_column='PermissionsFSCArcGraphCommunityUser', verbose_name='Access Actionable Relationship Center for partner users')
    class Meta(models.Model.Meta):
        db_table = 'MutingPermissionSet'
        verbose_name = 'Muting Permission Set'
        verbose_name_plural = 'Muting Permission Set'
        # keyPrefix = '0QM'



class MyDomainDiscoverableLogin(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='mydomaindiscoverablelogin_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='mydomaindiscoverablelogin_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    execute_apex_handler_as = models.ForeignKey('User', models.DO_NOTHING, db_column='ExecuteApexHandlerAsId', related_name='mydomaindiscoverablelogin_executeapexhandleras_set', verbose_name='User ID', blank=True, null=True)
    username_label = models.CharField(db_column='UsernameLabel', max_length=255, verbose_name='Login Prompt', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MyDomainDiscoverableLogin'
        verbose_name = 'My Domain Discoverable Login'
        verbose_name_plural = 'My Domain Discoverable Logins'
        # keyPrefix = '4hy'



class Name(models.Model):
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(db_column='LastName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(db_column='FirstName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    middle_name = models.CharField(db_column='MiddleName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    suffix = models.CharField(db_column='Suffix', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Too long choices skipped
    alias = models.CharField(db_column='Alias', max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, db_column='UserRoleId', related_name='name_userrole_set', verbose_name='Role ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, db_column='RecordTypeId', related_name='name_recordtype_set', verbose_name='Record Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    profile = models.ForeignKey('Profile', models.DO_NOTHING, db_column='ProfileId', related_name='name_profile_set', verbose_name='Profile ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(db_column='Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name_or_alias = models.CharField(db_column='NameOrAlias', max_length=80, verbose_name='Name or Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    username = models.CharField(db_column='Username', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Name'
        verbose_name = 'Name'
        verbose_name_plural = 'Names'
        # keyPrefix = None



class NamedCredential(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='namedcredential_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='namedcredential_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    endpoint = models.TextField(db_column='Endpoint', verbose_name='URL', sf_read_only=models.READ_ONLY, help_text='The URL for connecting to the external system.', blank=True, null=True)
    principal_type = models.CharField(db_column='PrincipalType', max_length=255, verbose_name='Identity Type', sf_read_only=models.READ_ONLY, help_text='Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', choices=[('Anonymous', 'Anonymous'), ('PerUser', 'Per User'), ('NamedUser', 'Named Principal')], blank=True, null=True)
    callout_options_generate_authorization_header = models.BooleanField(db_column='CalloutOptionsGenerateAuthorizationHeader', verbose_name='GenerateAuthorizationHeader', sf_read_only=models.READ_ONLY)
    callout_options_allow_merge_fields_in_header = models.BooleanField(db_column='CalloutOptionsAllowMergeFieldsInHeader', verbose_name='AllowMergeFieldsInHeader', sf_read_only=models.READ_ONLY)
    callout_options_allow_merge_fields_in_body = models.BooleanField(db_column='CalloutOptionsAllowMergeFieldsInBody', verbose_name='AllowMergeFieldsInBody', sf_read_only=models.READ_ONLY)
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, db_column='AuthProviderId', verbose_name='Auth. Provider ID', sf_read_only=models.READ_ONLY, help_text='This Salesforce or third-party service provides the login process and approves access to the external system.', blank=True, null=True)
    jwt_issuer = models.CharField(db_column='JwtIssuer', max_length=255, verbose_name='JWT Issuer', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jwt_formula_subject = models.CharField(db_column='JwtFormulaSubject', max_length=255, verbose_name='JWT Formula Subject', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jwt_text_subject = models.CharField(db_column='JwtTextSubject', max_length=255, verbose_name='JWT Text Subject', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jwt_validity_period_seconds = models.IntegerField(db_column='JwtValidityPeriodSeconds', verbose_name='JWT Validity Period in Seconds', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jwt_audience = models.TextField(db_column='JwtAudience', verbose_name='JWT Audience(s)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    auth_token_endpoint_url = models.TextField(db_column='AuthTokenEndpointUrl', verbose_name='Auth Token Endpoint URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'NamedCredential'
        verbose_name = 'Named Credential'
        verbose_name_plural = 'Named Credentials'
        # keyPrefix = '0XA'



class Note(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, ChangeRequest, Contact, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Entitlement, Image, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Problem, Product2, Product_Category_Info__c, Product_Category__c, Quote, ServiceContract, ServiceResource, SocialPost, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    title = models.CharField(db_column='Title', max_length=80)
    is_private = models.BooleanField(db_column='IsPrivate', verbose_name='Private', default=False)
    body = models.TextField(db_column='Body', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='note_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='note_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='note_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Note'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = '002'



class NoteAndAttachment(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_note = models.BooleanField(db_column='IsNote', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, ChangeRequest, Contact, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Entitlement, Image, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Problem, Product2, Product_Category_Info__c, Product_Category__c, Quote, ServiceContract, ServiceResource, SocialPost, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    title = models.CharField(db_column='Title', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_private = models.BooleanField(db_column='IsPrivate', verbose_name='Private', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='noteandattachment_owner_set', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='noteandattachment_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='noteandattachment_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'NoteAndAttachment'
        verbose_name = 'Note and Attachment'
        verbose_name_plural = 'Notes and Attachments'
        # keyPrefix = None



class OauthCustomScope(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='oauthcustomscope_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='oauthcustomscope_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    description = models.CharField(db_column='Description', max_length=255)
    is_public = models.BooleanField(db_column='IsPublic', verbose_name='Include on well known endpoint', default=False)
    class Meta(models.Model.Meta):
        db_table = 'OauthCustomScope'
        verbose_name = 'OAuth Custom Scope'
        verbose_name_plural = 'OAuth Custom Scopes'
        # keyPrefix = '7ud'



class OauthCustomScopeApp(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='oauthcustomscopeapp_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='oauthcustomscopeapp_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    oauth_custom_scope = models.ForeignKey(OauthCustomScope, models.DO_NOTHING, db_column='OauthCustomScopeId', verbose_name='OAuth Custom Scope ID')  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'OauthCustomScopeApp'
        verbose_name = 'OAuth Custom Scope App '
        verbose_name_plural = 'OAuth Custom Scope Apps'
        # keyPrefix = '7ue'



class OauthToken(models.Model):
    access_token = models.CharField(db_column='AccessToken', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    request_token = models.CharField(db_column='RequestToken', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_name = models.CharField(db_column='AppName', max_length=255, verbose_name='Application Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_used_date = models.DateTimeField(db_column='LastUsedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    use_count = models.IntegerField(db_column='UseCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    delete_token = models.CharField(db_column='DeleteToken', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_menu_item = models.ForeignKey(AppMenuItem, models.DO_NOTHING, db_column='AppMenuItemId', verbose_name='AppMenuItem ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OauthToken'
        verbose_name = 'Oauth Token'
        verbose_name_plural = 'Oauth Tokens'
        # keyPrefix = '0CQ'



class ObjectPermissions(models.Model):
    parent = models.ForeignKey('PermissionSet', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='SObject Type Name', sf_read_only=models.NOT_UPDATEABLE)  # Too long choices skipped
    permissions_create = models.BooleanField(db_column='PermissionsCreate', verbose_name='Create Records')
    permissions_read = models.BooleanField(db_column='PermissionsRead', verbose_name='Read Records')
    permissions_edit = models.BooleanField(db_column='PermissionsEdit', verbose_name='Edit Records')
    permissions_delete = models.BooleanField(db_column='PermissionsDelete', verbose_name='Delete Records')
    permissions_view_all_records = models.BooleanField(db_column='PermissionsViewAllRecords', verbose_name='Read All Records')
    permissions_modify_all_records = models.BooleanField(db_column='PermissionsModifyAllRecords', verbose_name='Edit All Records')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='objectpermissions_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='objectpermissions_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ObjectPermissions'
        verbose_name = 'Object Permissions'
        verbose_name_plural = 'Object Permissions'
        # keyPrefix = '110'



class OmniRoutingEventStore(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='omniroutingeventstore_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='omniroutingeventstore_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='omniroutingeventstore_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    work_item_id = models.CharField(db_column='WorkItemId', max_length=18, sf_read_only=models.READ_ONLY)
    type = models.CharField(db_column='Type', max_length=255, sf_read_only=models.READ_ONLY, choices=[('RoutingRequestCreated', 'Routing Request Created'), ('WorkItemReassigned', 'Work Item Reassigned'), ('RoutingRequestUpdated', 'Routing Request Updated'), ('WorkItemAccepted', 'Work Item Accepted'), ('WorkItemCancelled', 'Work Item Canceled'), ('TransferRequestCreated', 'Transfer Request Created'), ('WorkRouted', 'Work Routed'), ('WorkDeclined', 'Work Declined'), ('PSRResync', 'PSR Resync')])
    agent_work = models.ForeignKey(AgentWork, models.DO_NOTHING, db_column='AgentWorkId', verbose_name='Agent Work ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pending_service_routing = models.ForeignKey('PendingServiceRouting', models.DO_NOTHING, db_column='PendingServiceRoutingId', verbose_name='Pending Service Routing ID', sf_read_only=models.READ_ONLY)
    queue = models.ForeignKey(Group, models.DO_NOTHING, db_column='QueueId', verbose_name='Queue ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    event_time = models.DateTimeField(db_column='EventTime', sf_read_only=models.READ_ONLY)
    additional_detail = models.CharField(db_column='AdditionalDetail', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OmniRoutingEventStore'
        verbose_name = 'Omni Routing Event Store'
        verbose_name_plural = 'Omni Routing Event Stores'
        # keyPrefix = '0is'



class OmniSupervisorConfig(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Omni Supervisor Configuration Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='omnisupervisorconfig_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='omnisupervisorconfig_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_timeline_hidden = models.BooleanField(db_column='IsTimelineHidden', default=False)
    skill_visibility = models.CharField(db_column='SkillVisibility', max_length=255, verbose_name='Skill Visibility Type', choices=[('AllSkills', 'All Skills'), ('AnySkill', 'Any Skill')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OmniSupervisorConfig'
        verbose_name = 'Omni Supervisor Configuration'
        verbose_name_plural = 'Omni Supervisor Configurations'
        # keyPrefix = '0Q2'



class OmniSupervisorConfigGroup(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='omnisupervisorconfiggroup_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='omnisupervisorconfiggroup_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    omni_supervisor_config = models.ForeignKey(OmniSupervisorConfig, models.DO_NOTHING, db_column='OmniSupervisorConfigId', verbose_name='Omni Supervisor Configuration ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    group = models.ForeignKey(Group, models.DO_NOTHING, db_column='GroupId', verbose_name='Group ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'OmniSupervisorConfigGroup'
        verbose_name = 'Omni Supervisor Configuration for Public Group'
        verbose_name_plural = 'Omni Supervisor Configuration for Public Groups'
        # keyPrefix = '0QE'



class OmniSupervisorConfigProfile(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='omnisupervisorconfigprofile_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='omnisupervisorconfigprofile_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    omni_supervisor_config = models.ForeignKey(OmniSupervisorConfig, models.DO_NOTHING, db_column='OmniSupervisorConfigId', verbose_name='Omni Supervisor Configuration ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    profile = models.OneToOneField('Profile', models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'OmniSupervisorConfigProfile'
        verbose_name = 'Omni Supervisor Configuration for Profile'
        verbose_name_plural = 'Omni Supervisor Configuration for Profiles'
        # keyPrefix = '0QC'



class OmniSupervisorConfigQueue(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='omnisupervisorconfigqueue_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='omnisupervisorconfigqueue_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    omni_supervisor_config = models.ForeignKey(OmniSupervisorConfig, models.DO_NOTHING, db_column='OmniSupervisorConfigId', verbose_name='Omni Supervisor Configuration ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    queue = models.ForeignKey(Group, models.DO_NOTHING, db_column='QueueId', verbose_name='Queue ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OmniSupervisorConfigQueue'
        verbose_name = 'Omni Supervisor Configuration Queue'
        verbose_name_plural = 'Omni Supervisor Configuration Queues'
        # keyPrefix = '0sf'



class OmniSupervisorConfigSkill(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='omnisupervisorconfigskill_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='omnisupervisorconfigskill_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    omni_supervisor_config = models.ForeignKey(OmniSupervisorConfig, models.DO_NOTHING, db_column='OmniSupervisorConfigId', verbose_name='Omni Supervisor Configuration ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    skill = models.ForeignKey('Skill', models.DO_NOTHING, db_column='SkillId', verbose_name='Skill ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'OmniSupervisorConfigSkill'
        verbose_name = 'Omni Supervisor Configuration Skill'
        verbose_name_plural = 'Omni Supervisor Configuration Skills'
        # keyPrefix = '0qg'



class OmniSupervisorConfigUser(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='omnisupervisorconfiguser_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='omnisupervisorconfiguser_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    omni_supervisor_config = models.ForeignKey(OmniSupervisorConfig, models.DO_NOTHING, db_column='OmniSupervisorConfigId', verbose_name='Omni Supervisor Configuration ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.OneToOneField('User', models.DO_NOTHING, db_column='UserId', related_name='omnisupervisorconfiguser_user_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'OmniSupervisorConfigUser'
        verbose_name = 'Omni Supervisor Configuration for User'
        verbose_name_plural = 'Omni Supervisor Configuration for Users'
        # keyPrefix = '0Q4'



class OnboardingMetrics(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='onboardingmetrics_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='onboardingmetrics_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='onboardingmetrics_user_set', verbose_name='User ID')  # Master Detail Relationship *
    seen_count = models.IntegerField(db_column='SeenCount', blank=True, null=True)
    experience_name = models.CharField(db_column='ExperienceName', max_length=255)
    class Meta(models.Model.Meta):
        db_table = 'OnboardingMetrics'
        verbose_name = 'Onboarding Metrics'
        verbose_name_plural = 'Onboarding Metrics'
        # keyPrefix = '0UG'



class OpenActivity(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='openactivity_account_set', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='WhoId', related_name='openactivity_who_set', verbose_name='Name ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, db_column='WhatId', related_name='openactivity_what_set', verbose_name='Related To ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, ChangeRequest, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Entitlement, Image, Incident, ListEmail, Opportunity, Order, Problem, ProcessException, Product2, Quote, ServiceContract, ServiceResource, Solution, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate] Master Detail Relationship *
    subject = models.CharField(db_column='Subject', max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter of Authorization'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(db_column='IsTask', verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(db_column='ActivityDate', verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_date_time = models.DateTimeField(db_column='ActivityDateTime', verbose_name='Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey(Calendar, models.DO_NOTHING, db_column='OwnerId', verbose_name='Assigned To ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Group, User]
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, default='Open', choices=[('Open', 'Open'), ('Completed', 'Completed'), ('Not Started', 'Not Started')], blank=True, null=True)
    priority = models.CharField(db_column='Priority', max_length=20, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal')], blank=True, null=True)
    is_high_priority = models.BooleanField(db_column='IsHighPriority', verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(db_column='ActivityType', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(db_column='IsAllDayEvent', verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(db_column='IsVisibleInSelfService', verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(db_column='DurationInMinutes', verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(db_column='Location', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='openactivity_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='openactivity_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(db_column='CallDurationInSeconds', verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(db_column='CallType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(db_column='CallDisposition', max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(db_column='CallObject', max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(db_column='EndDateTime', verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(db_column='StartDateTime', verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='PrimaryWhoId', related_name='openactivity_primarywho_set', verbose_name='Primary Name ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    primary_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='PrimaryAccountId', related_name='openactivity_primaryaccount_set', verbose_name='Primary Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(db_column='ActivitySubtype', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Cadence', 'Cadence'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    alternate_detail = models.ForeignKey(EmailMessage, models.DO_NOTHING, db_column='AlternateDetailId', verbose_name='Email Message ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    completed_date_time = models.DateTimeField(db_column='CompletedDateTime', verbose_name='Completed Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aircall_answered_by = models.CharField(db_column='aircall__Answered_by__c', max_length=255, verbose_name='Answered by', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_call_id = models.CharField(db_column='aircall__CallId__c', max_length=255, verbose_name='Call Id', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_call_recording = models.URLField(db_column='aircall__Call_Recording__c', verbose_name='Call Recording', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_country = models.CharField(db_column='aircall__Country__c', max_length=255, verbose_name='Country', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_detailed_call_type = models.CharField(db_column='aircall__Detailed_call_type__c', max_length=255, verbose_name='Detailed call type', sf_read_only=models.READ_ONLY, choices=[('Inbound answered', 'Inbound answered'), ('Missed call', 'Missed call'), ('Outbound answered', 'Outbound answered'), ('Outbound unanswered', 'Outbound unanswered'), ('Voicemail', 'Voicemail')], blank=True, null=True) 
    aircall_external_contact_phone_number = models.CharField(db_column='aircall__External_contact_phone_number__c', max_length=40, verbose_name='External contact phone number', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_handle_time = models.DecimalField(db_column='aircall__Handle_Time__c', max_digits=18, decimal_places=0, verbose_name='Handle Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_hour_in_time_zone = models.CharField(db_column='aircall__Hour_in_time_zone__c', max_length=255, verbose_name='Hour in timezone', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_is_missed_call = models.BooleanField(db_column='aircall__Is_Missed_call__c', verbose_name='Is Missed call', sf_read_only=models.READ_ONLY) 
    aircall_is_voicemail = models.BooleanField(db_column='aircall__Is_Voicemail__c', verbose_name='Is Voicemail', sf_read_only=models.READ_ONLY) 
    aircall_made_by = models.CharField(db_column='aircall__Made_By__c', max_length=255, verbose_name='Made By', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_missed_call_reason = models.CharField(db_column='aircall__Missed_Call_Reason__c', max_length=255, verbose_name='Missed Call Reason', sf_read_only=models.READ_ONLY, choices=[('abandoned_in_ivr', 'Abandoned in IVR'), ('agents_did_not_answer', 'Agents did not answer'), ('no_available_agent', 'No available agent'), ('out_of_opening_hours', 'Out of opening hours'), ('short_abandoned', 'Short abandoned'), ('abandoned_in_classic', 'Abandoned in Classic')], blank=True, null=True) 
    aircall_number_name = models.CharField(db_column='aircall__Number_Name__c', max_length=255, verbose_name='Number name', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_phone_number = models.CharField(db_column='aircall__Phone_number__c', max_length=40, verbose_name='Aircall number', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_time_zone = models.DecimalField(db_column='aircall__Time_zone__c', max_digits=18, decimal_places=0, verbose_name='Time zone', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_transferred_to = models.CharField(db_column='aircall__Transferred_to__c', max_length=255, verbose_name='Transferred to', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_waiting_time = models.DecimalField(db_column='aircall__Waiting_Time__c', max_digits=18, decimal_places=0, verbose_name='Waiting Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_connection_status = models.CharField(db_column='aircall__Connection_status__c', max_length=1300, verbose_name='Connection status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_has_connected = models.BooleanField(db_column='aircall__Has_connected__c', verbose_name='Has connected', sf_read_only=models.READ_ONLY) 
    class Meta(models.Model.Meta):
        db_table = 'OpenActivity'
        verbose_name = 'Open Activity'
        verbose_name_plural = 'Open Activities'
        # keyPrefix = None



class Opportunity(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', blank=True, null=True)  # Master Detail Relationship *
    name = models.CharField(db_column='Name', max_length=120)
    description = models.TextField(db_column='Description', blank=True, null=True)
    stage_name = models.CharField(db_column='StageName', max_length=255, verbose_name='Stage', choices=[('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Proposal', 'Proposal'), ('Negotiation', 'Negotiation'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost')])
    amount = models.DecimalField(db_column='Amount', max_digits=18, decimal_places=2, blank=True, null=True)
    probability = models.DecimalField(db_column='Probability', max_digits=3, decimal_places=0, verbose_name='Probability (%)', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    close_date = models.DateField(db_column='CloseDate')
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Opportunity Type', choices=[('Existing Business', 'Existing Business'), ('New Business', 'New Business')], blank=True, null=True)
    next_step = models.CharField(db_column='NextStep', max_length=255, blank=True, null=True)
    lead_source = models.CharField(db_column='LeadSource', max_length=255, choices=[('Advertisement', 'Advertisement'), ('Customer Event', 'Customer Event'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Google AdWords', 'Google AdWords'), ('Other', 'Other'), ('Partner', 'Partner'), ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'), ('Webinar', 'Webinar'), ('Website', 'Website')], blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(db_column='IsWon', verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(db_column='ForecastCategory', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('MostLikely', 'Most Likely'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(db_column='ForecastCategoryName', max_length=255, verbose_name='Forecast Category', default=models.DEFAULTED_ON_CREATE, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='CampaignId', verbose_name='Campaign ID', blank=True, null=True)
    has_opportunity_line_item = models.BooleanField(db_column='HasOpportunityLineItem', verbose_name='Has Line Item', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, db_column='Pricebook2Id', verbose_name='Price Book ID', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='opportunity_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='opportunity_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='opportunity_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    push_count = models.IntegerField(db_column='PushCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_stage_change_date = models.DateTimeField(db_column='LastStageChangeDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal_quarter = models.IntegerField(db_column='FiscalQuarter', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal_year = models.IntegerField(db_column='FiscalYear', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal = models.CharField(db_column='Fiscal', max_length=6, verbose_name='Fiscal Period', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    synced_quote = models.ForeignKey('Quote', models.DO_NOTHING, db_column='SyncedQuoteId', related_name='opportunity_syncedquote_set', verbose_name='Quote ID', blank=True, null=True)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, db_column='ContractId', verbose_name='Contract ID', blank=True, null=True)
    has_open_activity = models.BooleanField(db_column='HasOpenActivity', sf_read_only=models.READ_ONLY, default=False)
    has_overdue_task = models.BooleanField(db_column='HasOverdueTask', sf_read_only=models.READ_ONLY, default=False)
    last_amount_changed_history = models.ForeignKey('OpportunityHistory', models.DO_NOTHING, db_column='LastAmountChangedHistoryId', related_name='opportunity_lastamountchangedhistory_set', verbose_name='Opportunity History ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_close_date_changed_history = models.ForeignKey('OpportunityHistory', models.DO_NOTHING, db_column='LastCloseDateChangedHistoryId', related_name='opportunity_lastclosedatechangedhistory_set', verbose_name='Opportunity History ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    budget_confirmed = models.BooleanField(db_column='Budget_Confirmed__c', verbose_name='Budget Confirmed', default=False)
    discovery_completed = models.BooleanField(db_column='Discovery_Completed__c', verbose_name='Discovery Completed', default=False)
    roi_analysis_completed = models.BooleanField(db_column='ROI_Analysis_Completed__c', verbose_name='ROI Analysis Completed', default=False)
    dhruvsoft_is_converted1 = models.BooleanField(db_column='Dhruvsoft__IsConverted1__c', verbose_name='IsConverted', default=False) 
    loss_reason = models.CharField(db_column='Loss_Reason__c', max_length=255, verbose_name='Loss Reason', choices=[('Lost to Competitor', 'Lost to Competitor'), ('No Budget / Lost Funding', 'No Budget / Lost Funding'), ('No Decision / Non-Responsive', 'No Decision / Non-Responsive'), ('Price', 'Price'), ('Other', 'Other')], blank=True, null=True)
    dhruvsoft_order_number = models.CharField(db_column='Dhruvsoft__OrderNumber__c', max_length=8, verbose_name='Order Number(Deprecated)', blank=True, null=True) 
    time_slot = models.CharField(db_column='Time_Slot__c', max_length=255, verbose_name='Time Slot', choices=[('4am-8am', '4am-8am'), ('8am-12pm', '8am-12pm'), ('12pm-4pm', '12pm-4pm'), ('4pm-8pm', '4pm-8pm'), ('8pm-12am', '8pm-12am')], blank=True, null=True)
    schedule_date = models.DateField(db_column='Schedule_Date__c', verbose_name='Schedule Date', blank=True, null=True)
    additional_schedule_details = models.TextField(db_column='Additional_Schedule_Details__c', verbose_name='Additional Schedule Details', blank=True, null=True)
    access_schedule_details = models.TextField(db_column='Access_Schedule_Details__c', verbose_name='Access Schedule Details', blank=True, null=True)
    active_camp_active_campaign_sync_status = models.CharField(db_column='ActiveCamp__ActiveCampaign_Sync_Status__c', max_length=255, verbose_name='ActiveCampaign Sync Status', choices=[('Waiting For Next Sync', 'Waiting For Next Sync'), ('Successfully Synced', 'Successfully Synced'), ('Does Not Meet Sync Criteria', 'Does Not Meet Sync Criteria')], blank=True, null=True) 
    active_camp_last_synced = models.DateTimeField(db_column='ActiveCamp__Last_Synced__c', verbose_name='ActiveCampaign Last Synced', blank=True, null=True) 
    pandadoc_tracking_number = models.CharField(db_column='pandadoc__TrackingNumber__c', max_length=12, verbose_name='Tracking Number', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Opportunity'
        verbose_name = 'Opportunity'
        verbose_name_plural = 'Opportunities'
        # keyPrefix = '006'



class OpportunityCompetitor(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    competitor_name = models.CharField(db_column='CompetitorName', max_length=40, blank=True, null=True)
    strengths = models.CharField(db_column='Strengths', max_length=1000, blank=True, null=True)
    weaknesses = models.CharField(db_column='Weaknesses', max_length=1000, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='opportunitycompetitor_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='opportunitycompetitor_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityCompetitor'
        verbose_name = 'Opportunity: Competitor'
        verbose_name_plural = 'Opportunity: Competitor'
        # keyPrefix = '00J'



class OpportunityContactRole(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID')  # Master Detail Relationship *
    role = models.CharField(db_column='Role', max_length=255, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='opportunitycontactrole_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='opportunitycontactrole_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityContactRole'
        verbose_name = 'Opportunity Contact Role'
        verbose_name_plural = 'Opportunity Contact Role'
        # keyPrefix = '00K'



class OpportunityFeed(models.Model):
    parent = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='opportunityfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='opportunityfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFeed'
        verbose_name = 'Opportunity Feed'
        verbose_name_plural = 'Opportunity Feed'
        # keyPrefix = None



class OpportunityFieldHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Access_Schedule_Details__c', 'Access Schedule Details'), ('Account', 'Account Name'), ('ActiveCamp__Last_Synced__c', 'ActiveCampaign Last Synced'), ('ActiveCamp__ActiveCampaign_Sync_Status__c', 'ActiveCampaign Sync Status'), ('Additional_Schedule_Details__c', 'Additional Schedule Details'), ('Amount', 'Amount'), ('Budget_Confirmed__c', 'Budget Confirmed'), ('CloseDate', 'Close Date'), ('Contact', 'Contact'), ('Contract', 'Contract'), ('created', 'Created.'), ('opportunityCreatedFromLead', 'Created by lead convert'), ('Description', 'Description'), ('Discovery_Completed__c', 'Discovery Completed'), ('feedEvent', 'Feed event'), ('ForecastCategoryName', 'Forecast Category'), ('individualMerged', 'Individual Merged'), ('Dhruvsoft__IsConverted1__c', 'IsConverted'), ('LeadSource', 'Lead Source'), ('Loss_Reason__c', 'Loss Reason'), ('NextStep', 'Next Step'), ('Name', 'Opportunity Name'), ('Owner', 'Opportunity Owner'), ('Dhruvsoft__OrderNumber__c', 'Order Number(Deprecated)'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Campaign', 'Primary Campaign Source'), ('IsPrivate', 'Private'), ('Probability', 'Probability (%)'), ('TotalOpportunityQuantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ROI_Analysis_Completed__c', 'ROI Analysis Completed'), ('Schedule_Date__c', 'Schedule Date'), ('StageName', 'Stage'), ('SyncedQuote', 'Synced Quote'), ('Time_Slot__c', 'Time Slot'), ('pandadoc__TrackingNumber__c', 'Tracking Number'), ('Type', 'Type')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFieldHistory'
        verbose_name = 'Opportunity Field History'
        verbose_name_plural = 'Opportunity Field History'
        # keyPrefix = None



class OpportunityHistory(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    stage_name = models.CharField(db_column='StageName', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Proposal', 'Proposal'), ('Negotiation', 'Negotiation'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost')])
    amount = models.DecimalField(db_column='Amount', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_revenue = models.DecimalField(db_column='ExpectedRevenue', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    close_date = models.DateField(db_column='CloseDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    probability = models.DecimalField(db_column='Probability', max_digits=3, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_category = models.CharField(db_column='ForecastCategory', max_length=40, verbose_name='To ForecastCategory', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('MostLikely', 'Most Likely'), ('Forecast', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    prev_amount = models.DecimalField(db_column='PrevAmount', max_digits=18, decimal_places=2, verbose_name='Previous Amount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    prev_close_date = models.DateField(db_column='PrevCloseDate', verbose_name='Previous Close Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityHistory'
        verbose_name = 'Opportunity History'
        verbose_name_plural = 'Opportunity History'
        # keyPrefix = '008'



class OpportunityLineItem(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sort_order = models.IntegerField(db_column='SortOrder', blank=True, null=True)
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, db_column='PricebookEntryId', verbose_name='Price Book Entry ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product_code = models.CharField(db_column='ProductCode', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=376, verbose_name='Opportunity Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(db_column='Quantity', max_digits=12, decimal_places=2)
    total_price = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    unit_price = models.DecimalField(db_column='UnitPrice', max_digits=18, decimal_places=2, verbose_name='Sales Price', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    list_price = models.DecimalField(db_column='ListPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_date = models.DateField(db_column='ServiceDate', verbose_name='Date', blank=True, null=True)
    has_revenue_schedule = models.BooleanField(db_column='HasRevenueSchedule', sf_read_only=models.READ_ONLY, default=False)
    has_quantity_schedule = models.BooleanField(db_column='HasQuantitySchedule', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Line Description', blank=True, null=True)
    has_schedule = models.BooleanField(db_column='HasSchedule', sf_read_only=models.READ_ONLY, default=False)
    can_use_quantity_schedule = models.BooleanField(db_column='CanUseQuantitySchedule', verbose_name='Quantity Scheduling Enabled', sf_read_only=models.READ_ONLY, default=False)
    can_use_revenue_schedule = models.BooleanField(db_column='CanUseRevenueSchedule', verbose_name='Revenue Scheduling Enabled', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='opportunitylineitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='opportunitylineitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    marketplace_category = models.CharField(db_column='Marketplace_Category__c', max_length=255, verbose_name='Marketplace Category', choices=[('Apartment Services', 'Apartment Services'), ('Business Recycling', 'Business Recycling'), ('Business Trash', 'Business Trash'), ('Junk', 'Junk'), ('Large Dumpster', 'Large Dumpster')], blank=True, null=True)
    dhruvsoft_is_converted = models.BooleanField(db_column='Dhruvsoft__IsConverted__c', verbose_name='IsConverted', default=False) 
    class Meta(models.Model.Meta):
        db_table = 'OpportunityLineItem'
        verbose_name = 'Opportunity Product'
        verbose_name_plural = 'Opportunity Product'
        # keyPrefix = '00k'



class OpportunityLineItemSchedule(models.Model):
    opportunity_line_item = models.ForeignKey(OpportunityLineItem, models.DO_NOTHING, db_column='OpportunityLineItemId', verbose_name='Line Item ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Quantity', 'Quantity'), ('QuantityRevenueRelated', 'QuantityRevenueRelated'), ('Revenue', 'Revenue'), ('Both', 'Both')])
    revenue = models.DecimalField(db_column='Revenue', max_digits=18, decimal_places=2, blank=True, null=True)
    quantity = models.DecimalField(db_column='Quantity', max_digits=18, decimal_places=2, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=80, verbose_name='Comments', blank=True, null=True)
    schedule_date = models.DateField(db_column='ScheduleDate')
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='opportunitylineitemschedule_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='opportunitylineitemschedule_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityLineItemSchedule'
        verbose_name = 'Line Item Schedule'
        verbose_name_plural = 'Line Item Schedule'
        # keyPrefix = '00o'



class OpportunityPartner(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountToId', verbose_name='Account ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    role = models.CharField(db_column='Role', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('Advertiser', 'Advertiser'), ('Agency', 'Agency'), ('Broker', 'Broker'), ('Consultant', 'Consultant'), ('Dealer', 'Dealer'), ('Developer', 'Developer'), ('Distributor', 'Distributor'), ('Institution', 'Institution'), ('Lender', 'Lender'), ('System Integrator', 'System Integrator'), ('VAR/Reseller', 'VAR/Reseller')], blank=True, null=True)
    is_primary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='opportunitypartner_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='opportunitypartner_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, db_column='ReversePartnerId', verbose_name='Reverse Partner ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityPartner'
        verbose_name = 'Opportunity Partner'
        verbose_name_plural = 'Opportunity Partner'
        # keyPrefix = '00I'



class OpportunityShare(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    opportunity_access_level = models.CharField(db_column='OpportunityAccessLevel', max_length=40, verbose_name='Opportunity Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityShare'
        verbose_name = 'Opportunity Share'
        verbose_name_plural = 'Opportunity Share'
        # keyPrefix = '00t'



class OpportunityStage(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', sf_read_only=models.READ_ONLY, default=False)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(db_column='IsWon', verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(db_column='ForecastCategory', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('MostLikely', 'Most Likely'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(db_column='ForecastCategoryName', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')])
    default_probability = models.DecimalField(db_column='DefaultProbability', max_digits=3, decimal_places=0, verbose_name='Probability (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='opportunitystage_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='opportunitystage_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityStage'
        verbose_name = 'Opportunity Stage'
        verbose_name_plural = 'Opportunity Stage'
        # keyPrefix = '01J'



class Order(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    contract = models.ForeignKey(Contract, models.DO_NOTHING, db_column='ContractId', verbose_name='Contract ID', blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', blank=True, null=True)  # Master Detail Relationship *
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, db_column='Pricebook2Id', verbose_name='Price Book ID', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    effective_date = models.DateField(db_column='EffectiveDate', verbose_name='Order Start Date')
    end_date = models.DateField(db_column='EndDate', verbose_name='Order End Date', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=100, choices=[('Pending', 'Pending'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('On the way', 'On the way'), ('Arrived', 'Arrived'), ('Price Changed', 'Price Changed'), ('Price Approved', 'Price Approved'), ('Complete', 'Complete'), ('Paid', 'Paid')])
    description = models.TextField(db_column='Description', blank=True, null=True)
    customer_authorized_by = models.ForeignKey(Contact, models.DO_NOTHING, db_column='CustomerAuthorizedById', verbose_name='Customer Authorized By ID', blank=True, null=True)
    company_authorized_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CompanyAuthorizedById', related_name='order_companyauthorizedby_set', verbose_name='Company Authorized By ID', blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Order Type', blank=True, null=True)
    billing_street = models.TextField(db_column='BillingStreet', blank=True, null=True)
    billing_city = models.CharField(db_column='BillingCity', max_length=40, blank=True, null=True)
    billing_state = models.CharField(db_column='BillingState', max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(db_column='BillingPostalCode', max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(db_column='BillingCountry', max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(db_column='BillingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(db_column='BillingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(db_column='BillingGeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(db_column='BillingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(db_column='ShippingStreet', blank=True, null=True)
    shipping_city = models.CharField(db_column='ShippingCity', max_length=40, blank=True, null=True)
    shipping_state = models.CharField(db_column='ShippingState', max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(db_column='ShippingPostalCode', max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(db_column='ShippingCountry', max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(db_column='ShippingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(db_column='ShippingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(db_column='ShippingGeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(db_column='ShippingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    activated_date = models.DateTimeField(db_column='ActivatedDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, db_column='ActivatedById', related_name='order_activatedby_set', verbose_name='Activated By ID', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_code = models.CharField(db_column='StatusCode', max_length=40, verbose_name='Status Category', sf_read_only=models.NOT_CREATEABLE, choices=[('Draft', 'Draft'), ('Activated', 'Activated'), ('Canceled', 'Cancelled'), ('Expired', 'Expired')])
    order_number = models.CharField(db_column='OrderNumber', max_length=30, sf_read_only=models.READ_ONLY)
    total_amount = models.DecimalField(db_column='TotalAmount', max_digits=18, decimal_places=2, verbose_name='Order Amount', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='order_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='order_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    # dhruvsoft_opportunity_id = models.CharField(db_column='Dhruvsoft__OpportunityId__c', max_length=18, verbose_name='OpportunityId(Deprecated)', blank=True, null=True) 
    dhruvsoft_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='Dhruvsoft__Opportunity__c', verbose_name='Opportunity(Deprecated)', blank=True, null=True) 
    dhruvsoft_order_amt_from_opportunity_amt = models.DecimalField(db_column='Dhruvsoft__OrderAmtFromOpportunityAmt__c', max_digits=18, decimal_places=2, verbose_name='Order Amount (Opportunity)', blank=True, null=True) 
    dhruvsoft_convert_from_opportunity = models.BooleanField(db_column='Dhruvsoft__convert_from_opportunity__c', verbose_name='Converted from Opportunity', default=False) 
    scheduled_date = models.DateField(db_column='Scheduled_Date__c', verbose_name='Scheduled Date', blank=True, null=True)
    additional_schedule_details = models.TextField(db_column='Additional_Schedule_Details__c', verbose_name='Additional Schedule Details', blank=True, null=True)
    access_schedule_details = models.TextField(db_column='Access_Schedule_Details__c', verbose_name='Access Schedule Details', blank=True, null=True)
    scheduled_time_slot = models.CharField(db_column='Scheduled_Time_Slot__c', max_length=255, verbose_name='Scheduled Time Slot', choices=[('4am-8am', '4am-8am'), ('8am-12pm', '8am-12pm'), ('12pm-4pm', '12pm-4pm'), ('4pm-8pm', '4pm-8pm'), ('8pm-12am', '8pm-12am')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Order'
        verbose_name = 'Order'
        verbose_name_plural = 'Orders'
        # keyPrefix = '801'



class OrderFeed(models.Model):
    parent = models.ForeignKey(Order, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='orderfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='orderfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderFeed'
        verbose_name = 'Order Feed'
        verbose_name_plural = 'Order Feed'
        # keyPrefix = None



class OrderHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order = models.ForeignKey(Order, models.DO_NOTHING, db_column='OrderId', verbose_name='Order ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Access_Schedule_Details__c', 'Access Schedule Details'), ('Account', 'Account Name'), ('ActivatedBy', 'Activated By'), ('ActivatedDate', 'Activated Date'), ('Additional_Schedule_Details__c', 'Additional Schedule Details'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('BillToContact', 'Bill To Contact'), ('CompanyAuthorizedBy', 'Company Authorized By'), ('CompanyAuthorizedDate', 'Company Authorized Date'), ('Contract', 'Contract Number'), ('Dhruvsoft__convert_from_opportunity__c', 'Converted from Opportunity'), ('created', 'Created.'), ('CustomerAuthorizedBy', 'Customer Authorized By'), ('CustomerAuthorizedDate', 'Customer Authorized Date'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Opportunity', 'Opportunity'), ('Dhruvsoft__Opportunity__c', 'Opportunity(Deprecated)'), ('Dhruvsoft__OpportunityId__c', 'OpportunityId(Deprecated)'), ('orderActivated', 'Order Activated.'), ('TotalAmount', 'Order Amount'), ('Dhruvsoft__OrderAmtFromOpportunityAmt__c', 'Order Amount (Opportunity)'), ('orderApproved', 'Order Approved.'), ('orderCancelled', 'Order Canceled.'), ('orderDeactivated', 'Order Deactivated.'), ('EndDate', 'Order End Date'), ('orderExpired', 'Order Expired.'), ('Name', 'Order Name'), ('Owner', 'Order Owner'), ('OrderReferenceNumber', 'Order Reference Number'), ('EffectiveDate', 'Order Start Date'), ('orderSubmitted', 'Order Submitted.'), ('Type', 'Order Type'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('PoDate', 'PO Date'), ('PoNumber', 'PO Number'), ('Pricebook2', 'Price Book'), ('Quote', 'Quote'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Scheduled_Date__c', 'Scheduled Date'), ('Scheduled_Time_Slot__c', 'Scheduled Time Slot'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('ShipToContact', 'Ship To Contact'), ('Status', 'Status'), ('StatusCode', 'Status Category')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderHistory'
        verbose_name = 'Order History'
        verbose_name_plural = 'Order History'
        # keyPrefix = None



class OrderItem(models.Model):
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order = models.ForeignKey(Order, models.DO_NOTHING, db_column='OrderId', verbose_name='Order ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, db_column='PricebookEntryId', verbose_name='Price Book Entry ID', sf_read_only=models.NOT_UPDATEABLE)
    quantity = models.DecimalField(db_column='Quantity', max_digits=18, decimal_places=2)
    unit_price = models.DecimalField(db_column='UnitPrice', max_digits=18, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(db_column='ListPrice', max_digits=18, decimal_places=2, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    total_price = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_date = models.DateField(db_column='ServiceDate', verbose_name='Start Date', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Line Description', blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='orderitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='orderitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    order_item_number = models.CharField(db_column='OrderItemNumber', max_length=30, verbose_name='Order Product Number', sf_read_only=models.READ_ONLY)
    dhruvsoft_discount = models.DecimalField(db_column='Dhruvsoft__Discount__c', max_digits=5, decimal_places=2, verbose_name='Discount', blank=True, null=True) 
    dhruvsoft_unit_price_before_discount = models.DecimalField(db_column='Dhruvsoft__Unit_Price_Before_Discount__c', max_digits=18, decimal_places=2, verbose_name='Unit Price Before Discount', blank=True, null=True) 
    dhruvsoft_converted_form_opportunity = models.BooleanField(db_column='Dhruvsoft__converted_form_opportunity__c', verbose_name='converted form opportunity', default=False) 
    dhruvsoft_opportunity_line_item_id = models.CharField(db_column='Dhruvsoft__opportunity_line_item_Id__c', max_length=18, verbose_name='opportunity line item Id', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'OrderItem'
        verbose_name = 'Order Product'
        verbose_name_plural = 'Order Products'
        # keyPrefix = '802'



class OrderItemFeed(models.Model):
    parent = models.ForeignKey(OrderItem, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='orderitemfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='orderitemfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemFeed'
        verbose_name = 'Order Product Feed'
        verbose_name_plural = 'Order Product Feed'
        # keyPrefix = None



class OrderItemHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order_item = models.ForeignKey(OrderItem, models.DO_NOTHING, db_column='OrderItemId', verbose_name='Order Product ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Dhruvsoft__converted_form_opportunity__c', 'converted form opportunity'), ('created', 'Created.'), ('Dhruvsoft__Discount__c', 'Discount'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Description', 'Line Description'), ('Dhruvsoft__opportunity_line_item_Id__c', 'opportunity line item Id'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Quantity', 'Quantity'), ('QuoteLineItem', 'Quote Line Item'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ServiceDate', 'Start Date'), ('UnitPrice', 'Unit Price'), ('Dhruvsoft__Unit_Price_Before_Discount__c', 'Unit Price Before Discount')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemHistory'
        verbose_name = 'Order Product History'
        verbose_name_plural = 'Order Product History'
        # keyPrefix = None



class OrderStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(db_column='StatusCode', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('Activated', 'Activated'), ('Canceled', 'Cancelled'), ('Expired', 'Expired')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='orderstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='orderstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OrderStatus'
        verbose_name = 'Order Status Value'
        verbose_name_plural = 'Order Status Values'
        # keyPrefix = None



class OrgMetric(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Org Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='orgmetric_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='orgmetric_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    latest_org_metric_scan_summary = models.ForeignKey('OrgMetricScanSummary', models.DO_NOTHING, db_column='LatestOrgMetricScanSummaryId', related_name='orgmetric_latestorgmetricscansummary_set', verbose_name='Org Metric Scan ID', blank=True, null=True)
    feature_type = models.CharField(db_column='FeatureType', max_length=40, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    category = models.CharField(db_column='Category', max_length=40, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrgMetric'
        verbose_name = 'Org Metric'
        verbose_name_plural = 'Org Metrics'
        # keyPrefix = '3v1'



class OrgMetricScanResult(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Org Metric Scan Result', sf_read_only=models.NOT_UPDATEABLE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='orgmetricscanresult_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='orgmetricscanresult_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    org_metric_scan_summary = models.ForeignKey('OrgMetricScanSummary', models.DO_NOTHING, db_column='OrgMetricScanSummaryId', verbose_name='Org Metric Scan ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    url = models.URLField(db_column='Url', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    object = models.CharField(db_column='Object', max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    date = models.DateTimeField(db_column='Date', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    profile = models.IntegerField(db_column='Profile', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    user = models.CharField(db_column='User', max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    quantity = models.IntegerField(db_column='Quantity', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    item_status = models.CharField(db_column='ItemStatus', max_length=40, verbose_name='Status', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    flags = models.IntegerField(db_column='Flags', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrgMetricScanResult'
        verbose_name = 'Org Metric Scan Result'
        verbose_name_plural = 'Org Metric Scan Results'
        # keyPrefix = '9aM'



class OrgMetricScanSummary(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Org Metric Scan Summary', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='orgmetricscansummary_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='orgmetricscansummary_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    org_metric = models.ForeignKey(OrgMetric, models.DO_NOTHING, db_column='OrgMetricId', verbose_name='Org Metric ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    status = models.CharField(db_column='Status', max_length=40, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    implementation_effort = models.CharField(db_column='ImplementationEffort', max_length=40, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    error_message = models.CharField(db_column='ErrorMessage', max_length=40, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    item_count = models.IntegerField(db_column='ItemCount', verbose_name='Count', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    feature_limit = models.IntegerField(db_column='FeatureLimit', verbose_name='Limit', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    unit = models.CharField(db_column='Unit', max_length=64, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    percent_usage = models.DecimalField(db_column='PercentUsage', max_digits=3, decimal_places=0, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    scan_date = models.DateTimeField(db_column='ScanDate', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrgMetricScanSummary'
        verbose_name = 'Org Metric Scan Summary'
        verbose_name_plural = 'Org Metric Scan Summaries'
        # keyPrefix = '6mX'



class OrgWideEmailAddress(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='orgwideemailaddress_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='orgwideemailaddress_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    address = models.EmailField(db_column='Address', verbose_name='Email Address')
    display_name = models.CharField(db_column='DisplayName', max_length=300)
    is_allow_all_profiles = models.BooleanField(db_column='IsAllowAllProfiles', verbose_name='Allow All Profiles', default=False)
    purpose = models.CharField(db_column='Purpose', max_length=40, choices=[('UserSelection', None), ('DefaultNoreply', None), ('UserSelectionAndDefaultNoReply', None)])
    class Meta(models.Model.Meta):
        db_table = 'OrgWideEmailAddress'
        verbose_name = 'Organization-wide From Email Address'
        verbose_name_plural = 'Organization-wide From Email Addresses'
        # keyPrefix = '0D2'



class Organization(models.Model):
    name = models.CharField(db_column='Name', max_length=80, sf_read_only=models.NOT_CREATEABLE)
    division = models.CharField(db_column='Division', max_length=80, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    street = models.TextField(db_column='Street', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    city = models.CharField(db_column='City', max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    geocode_accuracy = models.CharField(db_column='GeocodeAccuracy', max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(db_column='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(db_column='Phone', max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    fax = models.CharField(db_column='Fax', max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    primary_contact = models.CharField(db_column='PrimaryContact', max_length=80, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    default_locale_sid_key = models.CharField(db_column='DefaultLocaleSidKey', max_length=40, verbose_name='Locale', sf_read_only=models.NOT_CREATEABLE)  # Too long choices skipped
    time_zone_sid_key = models.CharField(db_column='TimeZoneSidKey', max_length=40, verbose_name='Time Zone', sf_read_only=models.NOT_CREATEABLE)  # Too long choices skipped
    language_locale_key = models.CharField(db_column='LanguageLocaleKey', max_length=40, verbose_name='Language', sf_read_only=models.NOT_CREATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    receives_info_emails = models.BooleanField(db_column='ReceivesInfoEmails', verbose_name='Info Emails', sf_read_only=models.NOT_CREATEABLE, default=False)
    receives_admin_info_emails = models.BooleanField(db_column='ReceivesAdminInfoEmails', verbose_name='Info Emails Admin', sf_read_only=models.NOT_CREATEABLE, default=False)
    preferences_require_opportunity_products = models.BooleanField(db_column='PreferencesRequireOpportunityProducts', verbose_name='RequireOpportunityProducts', sf_read_only=models.NOT_CREATEABLE)
    preferences_consent_management_enabled = models.BooleanField(db_column='PreferencesConsentManagementEnabled', verbose_name='ConsentManagementEnabled', sf_read_only=models.NOT_CREATEABLE)
    preferences_auto_select_individual_on_merge = models.BooleanField(db_column='PreferencesAutoSelectIndividualOnMerge', verbose_name='AutoSelectIndividualOnMerge', sf_read_only=models.NOT_CREATEABLE)
    preferences_lightning_login_enabled = models.BooleanField(db_column='PreferencesLightningLoginEnabled', verbose_name='LightningLoginEnabled', sf_read_only=models.NOT_CREATEABLE)
    preferences_only_llperm_user_allowed = models.BooleanField(db_column='PreferencesOnlyLLPermUserAllowed', verbose_name='OnlyLLPermUserAllowed', sf_read_only=models.NOT_CREATEABLE)
    fiscal_year_start_month = models.IntegerField(db_column='FiscalYearStartMonth', verbose_name='Fiscal Year Starts In', sf_read_only=models.READ_ONLY, blank=True, null=True)
    uses_start_date_as_fiscal_year_name = models.BooleanField(db_column='UsesStartDateAsFiscalYearName', verbose_name='Fiscal Year Name by Start', sf_read_only=models.READ_ONLY, default=False)
    default_account_access = models.CharField(db_column='DefaultAccountAccess', max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')], blank=True, null=True)
    default_contact_access = models.CharField(db_column='DefaultContactAccess', max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByParent', 'Controlled By Parent')], blank=True, null=True)
    default_opportunity_access = models.CharField(db_column='DefaultOpportunityAccess', max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')], blank=True, null=True)
    default_lead_access = models.CharField(db_column='DefaultLeadAccess', max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_case_access = models.CharField(db_column='DefaultCaseAccess', max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_calendar_access = models.CharField(db_column='DefaultCalendarAccess', max_length=40, sf_read_only=models.READ_ONLY, default='HideDetailsInsert', choices=[('HideDetails', 'Hide Details'), ('HideDetailsInsert', 'Hide Details and Add Events'), ('ShowDetails', 'Show Details'), ('ShowDetailsInsert', 'Show Details and Add Events'), ('AllowEdits', 'Full Access')], blank=True, null=True)
    default_pricebook_access = models.CharField(db_column='DefaultPricebookAccess', max_length=40, verbose_name='Default Price Book Access', sf_read_only=models.READ_ONLY, choices=[('None', 'No Access'), ('Read', 'View Only'), ('ReadSelect', 'Use')], blank=True, null=True)
    default_campaign_access = models.CharField(db_column='DefaultCampaignAccess', max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')], blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    compliance_bcc_email = models.EmailField(db_column='ComplianceBccEmail', verbose_name='Compliance BCC Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ui_skin = models.CharField(db_column='UiSkin', max_length=40, verbose_name='UI Skin', sf_read_only=models.NOT_CREATEABLE, default='Theme3', choices=[('Theme1', 'salesforce.com Classic'), ('Theme2', 'Salesforce'), ('PortalDefault', 'Portal Default'), ('Webstore', 'Webstore'), ('Theme3', 'Aloha')], blank=True, null=True)
    signup_country_iso_code = models.CharField(db_column='SignupCountryIsoCode', max_length=2, verbose_name='Signup Country', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trial_expiration_date = models.DateTimeField(db_column='TrialExpirationDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_knowledge_service = models.IntegerField(db_column='NumKnowledgeService', verbose_name='Knowledge Licenses', sf_read_only=models.READ_ONLY, blank=True, null=True)
    organization_type = models.CharField(db_column='OrganizationType', max_length=40, verbose_name='Edition', sf_read_only=models.READ_ONLY, choices=[('Team Edition', None), ('Professional Edition', None), ('Enterprise Edition', None), ('Developer Edition', None), ('Personal Edition', None), ('Unlimited Edition', None), ('Contact Manager Edition', None), ('Base Edition', None)], blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    instance_name = models.CharField(db_column='InstanceName', max_length=5, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_sandbox = models.BooleanField(db_column='IsSandbox', sf_read_only=models.READ_ONLY, default=False)
    web_to_case_default_origin = models.CharField(db_column='WebToCaseDefaultOrigin', max_length=40, verbose_name='Web to Cases Default Origin', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    is_read_only = models.BooleanField(db_column='IsReadOnly', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='organization_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='organization_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Organization'
        verbose_name = 'Organization'
        verbose_name_plural = 'Organizations'
        # keyPrefix = '00D'



class OutOfOffice(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='outofoffice_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='outofoffice_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='outofoffice_user_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_enabled = models.BooleanField(db_column='IsEnabled', default=False)
    message = models.CharField(db_column='Message', max_length=60, verbose_name='Out Of Office Message')
    start_date = models.DateTimeField(db_column='StartDate')
    end_date = models.DateTimeField(db_column='EndDate')
    class Meta(models.Model.Meta):
        db_table = 'OutOfOffice'
        verbose_name = 'OutOfOffice'
        verbose_name_plural = 'OutOfOffices'
        # keyPrefix = '1OO'



class OutgoingEmail(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='External ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    validated_from_address = models.CharField(db_column='ValidatedFromAddress', max_length=255, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, choices=[('support@trydownstream.io', 'Downstream Support <support@trydownstream.io>'), ('thayes@trydownstream.io', 'Tate Hayes <thayes@trydownstream.io>')], blank=True, null=True)
    to_address = models.CharField(db_column='ToAddress', max_length=4000, verbose_name='To', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    cc_address = models.CharField(db_column='CcAddress', max_length=4000, verbose_name='CC', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    bcc_address = models.CharField(db_column='BccAddress', max_length=4000, verbose_name='BCC', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=3000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    text_body = models.TextField(db_column='TextBody', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    html_body = models.TextField(db_column='HtmlBody', verbose_name='HTML Body', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    related_to = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelatedToId', verbose_name='Related To ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, ChangeRequest, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Entitlement, Image, Incident, Opportunity, Order, Problem, ProcessException, Product2, Quote, ServiceContract, ServiceResource, Solution, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate]
    who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='WhoId', verbose_name='Name ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Contact, Lead]
    email_template = models.ForeignKey(EmailTemplate, models.DO_NOTHING, db_column='EmailTemplateId', verbose_name='Email Template ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    in_reply_to = models.CharField(db_column='InReplyTo', max_length=4000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    references = models.CharField(db_column='References', max_length=4000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    message_id = models.CharField(db_column='MessageId', max_length=4000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OutgoingEmail'
        verbose_name = 'Outgoing Email'
        verbose_name_plural = 'Outgoing Emails'
        # keyPrefix = '0Q1'



class OutgoingEmailRelation(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='External ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    outgoing_email_id = models.CharField(db_column='OutgoingEmailId', max_length=255, verbose_name='Outgoing Email ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relation = models.ForeignKey(Contact, models.DO_NOTHING, db_column='RelationId', verbose_name='Relation ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    relation_address = models.CharField(db_column='RelationAddress', max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OutgoingEmailRelation'
        verbose_name = 'Outgoing Email Relation'
        verbose_name_plural = 'Outgoing Email Relations'
        # keyPrefix = '0Q3'



class OwnedContentDocument(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='ownedcontentdocument_owner_set', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='ContentDocumentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='ownedcontentdocument_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='ownedcontentdocument_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(db_column='FileType', max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(db_column='ContentSize', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(db_column='FileExtension', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(db_column='ContentUrl', verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(db_column='ExternalDataSourceName', max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(db_column='ExternalDataSourceType', max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('ContentHubIsotope', None), ('contentHubItem', None), ('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('SciApi', None), ('SimpleURL', None), ('Trailhead', None), ('TrailheadEditWithId', None), ('usermobileconfig', None), ('usrconnectionstatus', None), ('Wrapper', None), ('Zero', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OwnedContentDocument'
        verbose_name = 'User Owned File'
        verbose_name_plural = 'User Owned File'
        # keyPrefix = None



class OwnerChangeOptionInfo(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_definition_id = models.CharField(db_column='EntityDefinitionId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_editable = models.BooleanField(db_column='IsEditable', sf_read_only=models.READ_ONLY, default=False)
    default_value = models.BooleanField(db_column='DefaultValue', sf_read_only=models.READ_ONLY, default=False)
    parent_id = models.CharField(db_column='ParentId', max_length=70, verbose_name='Change Owner Option ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OwnerChangeOptionInfo'
        verbose_name = 'Change Owner Option Info'
        verbose_name_plural = 'Change Owner Options Info'
        # keyPrefix = '0Cy'



class PackageLicense(models.Model):
    status = models.CharField(db_column='Status', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Trial', 'Trial'), ('Free', 'Free'), ('Active', 'Active')])
    is_provisioned = models.BooleanField(db_column='IsProvisioned', sf_read_only=models.READ_ONLY, default=False)
    allowed_licenses = models.IntegerField(db_column='AllowedLicenses', sf_read_only=models.READ_ONLY)
    used_licenses = models.IntegerField(db_column='UsedLicenses', sf_read_only=models.READ_ONLY)
    is_available_for_integrations = models.BooleanField(db_column='IsAvailableForIntegrations', verbose_name='Enabled for Platform Integrations', sf_read_only=models.READ_ONLY, default=False)
    expiration_date = models.DateTimeField(db_column='ExpirationDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=40, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PackageLicense'
        verbose_name = 'Package License'
        verbose_name_plural = 'Package License'
        # keyPrefix = '050'



class Partner(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account_from = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountFromId', related_name='partner_accountfrom_set', verbose_name='Account From ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountToId', related_name='partner_accountto_set', verbose_name='Account To ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    role = models.CharField(db_column='Role', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('Advertiser', 'Advertiser'), ('Agency', 'Agency'), ('Broker', 'Broker'), ('Consultant', 'Consultant'), ('Dealer', 'Dealer'), ('Developer', 'Developer'), ('Distributor', 'Distributor'), ('Institution', 'Institution'), ('Lender', 'Lender'), ('System Integrator', 'System Integrator'), ('VAR/Reseller', 'VAR/Reseller')], blank=True, null=True)
    is_primary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='partner_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='partner_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, db_column='ReversePartnerId', verbose_name='Reverse Partner ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Partner'
        verbose_name = 'Partner'
        verbose_name_plural = 'Partner'
        # keyPrefix = '00I'



class PartnerRole(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reverse_role = models.CharField(db_column='ReverseRole', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Advertiser', 'Advertiser'), ('Agency', 'Agency'), ('Broker', 'Broker'), ('Consultant', 'Consultant'), ('Dealer', 'Dealer'), ('Developer', 'Developer'), ('Distributor', 'Distributor'), ('Institution', 'Institution'), ('Lender', 'Lender'), ('System Integrator', 'System Integrator'), ('VAR/Reseller', 'VAR/Reseller')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='partnerrole_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='partnerrole_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PartnerRole'
        verbose_name = 'Partner Role Value'
        verbose_name_plural = 'Partner Role Value'
        # keyPrefix = None



class PendingServiceRouting(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', related_name='pendingservicerouting_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='pendingservicerouting_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='pendingservicerouting_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    work_item = models.OneToOneField(Account, models.DO_NOTHING, db_column='WorkItemId', verbose_name='WorkItem ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Case, Contact, ContactRequest, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, In_App_Checklist_Settings__c, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Product_Category_Info__c, Product_Category__c, SocialPost, VoiceCall, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    queue = models.ForeignKey(Group, models.DO_NOTHING, db_column='QueueId', related_name='pendingservicerouting_queue_set', verbose_name='Queue ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_push_attempted = models.BooleanField(db_column='IsPushAttempted', sf_read_only=models.READ_ONLY)
    service_channel = models.ForeignKey('ServiceChannel', models.DO_NOTHING, db_column='ServiceChannelId', verbose_name='Service Channel ID', sf_read_only=models.NOT_UPDATEABLE)
    is_pushed = models.BooleanField(db_column='IsPushed', sf_read_only=models.READ_ONLY)
    serial = models.IntegerField(db_column='Serial', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_declined_agent_session = models.CharField(db_column='LastDeclinedAgentSession', max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_transfer = models.BooleanField(db_column='IsTransfer', sf_read_only=models.READ_ONLY, default=False)
    routing_model = models.CharField(db_column='RoutingModel', max_length=255, verbose_name="Queue's Routing Model", choices=[('LeastActive', 'Least Active'), ('MostAvailable', 'Most Available'), ('ExternalRouting', 'External Routing')], blank=True, null=True)
    custom_requested_date_time = models.DateTimeField(db_column='CustomRequestedDateTime', verbose_name='Custom Requested Date', blank=True, null=True)
    routing_priority = models.IntegerField(db_column='RoutingPriority', blank=True, null=True)
    routing_type = models.CharField(db_column='RoutingType', max_length=255, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('QueueBased', 'Queue Based'), ('SkillsBased', 'Skills Based')], blank=True, null=True)
    is_ready_for_routing = models.BooleanField(db_column='IsReadyForRouting', default=False)
    capacity_weight = models.DecimalField(db_column='CapacityWeight', max_digits=10, decimal_places=2, blank=True, null=True)
    capacity_percentage = models.DecimalField(db_column='CapacityPercentage', max_digits=5, decimal_places=2, blank=True, null=True)
    push_timeout = models.IntegerField(db_column='PushTimeout', verbose_name='Push Time-Out', blank=True, null=True)
    preferred_user = models.ForeignKey('User', models.DO_NOTHING, db_column='PreferredUserId', related_name='pendingservicerouting_preferreduser_set', verbose_name='User ID', blank=True, null=True)
    drop_additional_skills_timeout = models.IntegerField(db_column='DropAdditionalSkillsTimeout', verbose_name='Drop Additional Skills Time-Out', blank=True, null=True)
    group = models.ForeignKey(Group, models.DO_NOTHING, db_column='GroupId', related_name='pendingservicerouting_group_set', verbose_name='Group ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    secondary_routing_priority = models.IntegerField(db_column='SecondaryRoutingPriority', blank=True, null=True)
    is_preferred_user_required = models.BooleanField(db_column='IsPreferredUserRequired', sf_read_only=models.NOT_UPDATEABLE, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PendingServiceRouting'
        verbose_name = 'Pending Service Routing'
        verbose_name_plural = 'Pending Service Routings'
        # keyPrefix = '0JR'



class PendingServiceRoutingInteractionInfo(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='pendingserviceroutinginteractioninfo_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='pendingserviceroutinginteractioninfo_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pending_service_routing = models.ForeignKey(PendingServiceRouting, models.DO_NOTHING, db_column='PendingServiceRoutingId', verbose_name='Pending Service Routing ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    target_object = models.ForeignKey(Account, models.DO_NOTHING, db_column='TargetObjectId', related_name='pendingserviceroutinginteractioninfo_targetobject_set', verbose_name='Target Object ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Account, AccountContactRole, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, AgentWork, AgentWorkSkill, Announcement, AppAnalyticsQueryRequest, Asset, AssetRelationship, BackgroundOperation, BriefcaseAssignment, CalendarView, Campaign, Case, CaseRelatedIssue, ChangeRequest, ChangeRequestRelatedIssue, ChangeRequestRelatedItem, CollaborationGroup, CollaborationGroupRecord, ConferenceNumber, Contact, ContactRequest, ContentDistribution, ContentDocument, ContentFolder, ContentVersion, Contract, ContractLineItem, Dashboard, DataAssessmentFieldMetric, DataAssessmentMetric, DataAssessmentValueMetric, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, DialerCallUsage, Document, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, EnhancedLetterhead, Entitlement, EntityMilestone, ExpressionFilter, ExpressionFilterCriteria, ExternalEvent, ExternalEventMapping, FileSearchActivity, FlowInterview, FlowInterviewLog, FlowInterviewLogEntry, FlowRecordRelation, FlowStageRelation, FlowTestResult, ForecastingOwnerAdjustment, Idea, Image, In_App_Checklist_Settings__c, Incident, IncidentRelatedItem, InstalledMobileApp, Lead, ListEmail, ListEmailIndividualRecipient, ListEmailRecipientSource, Macro, MacroInstruction, MacroUsage, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, ManagedContent, ManagedContentChannel, MatchingInformation, Opportunity, Order, OrderItem, OrgMetric, OrgMetricScanResult, OrgMetricScanSummary, OutOfOffice, PendingServiceRouting, PendingServiceRoutingInteractionInfo, Pricebook2, Problem, ProblemIncident, ProblemRelatedItem, ProcessException, Product2, Product_Category_Info__c, Product_Category__c, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, PromptAction, PromptError, QuickText, QuickTextUsage, Quote, QuoteLineItem, Recommendation, RecommendationResponse, RecordAction, Report, Scorecard, ScorecardAssociation, ScorecardMetric, ServiceContract, ServiceResource, ServiceResourceSkill, ServiceSetupProvisioning, SetupAssistantStep, SkillRequirement, SocialPersona, SocialPost, Solution, StreamingChannel, TodayGoal, Topic, User, UserAppInfo, UserAppMenuCustomization, UserEmailPreferredPerson, UserProvAccount, UserProvAccountStaging, UserProvMockTarget, UserProvisioningLog, UserProvisioningRequest, UserServicePresence, VoiceCall, VoiceCallList, VoiceCallListItem, VoiceCallQualityFeedback, VoiceCallRecording, VoiceCoaching, VoiceMailContent, VoiceMailGreeting, VoiceMailMessage, VoiceVendorLine, WaveAutoInstallRequest, WaveCompatibilityCheckItem, WorkAccess, WorkBadge, WorkBadgeDefinition, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, WorkThanks, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    primary_record = models.ForeignKey(Account, models.DO_NOTHING, db_column='PrimaryRecordId', related_name='pendingserviceroutinginteractioninfo_primaryrecord_set', verbose_name='Primary Record ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Case, Contact, ContactRequest, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, In_App_Checklist_Settings__c, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Product_Category_Info__c, Product_Category__c, SocialPost, VoiceCall, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    is_focused = models.BooleanField(db_column='IsFocused', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PendingServiceRoutingInteractionInfo'
        verbose_name = 'Pending Service Routing Interaction Information'
        verbose_name_plural = 'Pending Service Routing Interaction Information'
        # keyPrefix = '0oq'



class PendingServiceRoutingShare(models.Model):
    parent = models.ForeignKey(PendingServiceRouting, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PendingServiceRoutingShare'
        verbose_name = 'Pending Service Routing Share'
        verbose_name_plural = 'Pending Service Routing Share'
        # keyPrefix = None



class Period(models.Model):
    fiscal_year_settings = models.ForeignKey(FiscalYearSettings, models.DO_NOTHING, db_column='FiscalYearSettingsId', related_name='period_fiscalyearsettings_set', verbose_name='Fiscal Year Settings ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Month', None), ('Quarter', None), ('Week', None), ('Year', None)], blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', sf_read_only=models.READ_ONLY)
    end_date = models.DateField(db_column='EndDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_forecast_period = models.BooleanField(db_column='IsForecastPeriod', sf_read_only=models.READ_ONLY, default=False)
    quarter_label = models.CharField(db_column='QuarterLabel', max_length=255, verbose_name='Quarter Name', sf_read_only=models.READ_ONLY, default='Spring', choices=[('Spring', 'Spring'), ('Summer', 'Summer'), ('Fall', 'Fall'), ('Winter', 'Winter')], blank=True, null=True)
    period_label = models.CharField(db_column='PeriodLabel', max_length=255, verbose_name='Period Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number = models.IntegerField(db_column='Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fully_qualified_label = models.CharField(db_column='FullyQualifiedLabel', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Period'
        verbose_name = 'Period'
        verbose_name_plural = 'Period'
        # keyPrefix = '026'



class PermissionSet(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Permission Set Name')
    label = models.CharField(db_column='Label', max_length=80, verbose_name='Permission Set Label')
    license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, db_column='LicenseId', verbose_name='License ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [PermissionSetLicense, UserLicense]
    profile = models.ForeignKey('Profile', models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_owned_by_profile = models.BooleanField(db_column='IsOwnedByProfile', sf_read_only=models.READ_ONLY, default=False)
    is_custom = models.BooleanField(db_column='IsCustom', sf_read_only=models.READ_ONLY, default=False)
    permissions_email_single = models.BooleanField(db_column='PermissionsEmailSingle', verbose_name='Send Email')
    permissions_email_mass = models.BooleanField(db_column='PermissionsEmailMass', verbose_name='Mass Email')
    permissions_edit_task = models.BooleanField(db_column='PermissionsEditTask', verbose_name='Edit Tasks')
    permissions_edit_event = models.BooleanField(db_column='PermissionsEditEvent', verbose_name='Edit Events')
    permissions_export_report = models.BooleanField(db_column='PermissionsExportReport', verbose_name='Export Reports')
    permissions_import_personal = models.BooleanField(db_column='PermissionsImportPersonal', verbose_name='Import Personal Contacts')
    permissions_data_export = models.BooleanField(db_column='PermissionsDataExport', verbose_name='Weekly Data Export')
    permissions_manage_users = models.BooleanField(db_column='PermissionsManageUsers', verbose_name='Manage Users')
    permissions_edit_public_filters = models.BooleanField(db_column='PermissionsEditPublicFilters', verbose_name='Manage Public List Views')
    permissions_edit_public_templates = models.BooleanField(db_column='PermissionsEditPublicTemplates', verbose_name='Manage Public Classic Email Templates')
    permissions_modify_all_data = models.BooleanField(db_column='PermissionsModifyAllData', verbose_name='Modify All Data')
    permissions_manage_cases = models.BooleanField(db_column='PermissionsManageCases', verbose_name='Manage Cases')
    permissions_mass_inline_edit = models.BooleanField(db_column='PermissionsMassInlineEdit', verbose_name='Mass Edits from Lists')
    permissions_manage_solutions = models.BooleanField(db_column='PermissionsManageSolutions', verbose_name='Manage Published Solutions')
    permissions_customize_application = models.BooleanField(db_column='PermissionsCustomizeApplication', verbose_name='Customize Application')
    permissions_edit_readonly_fields = models.BooleanField(db_column='PermissionsEditReadonlyFields', verbose_name='Edit Read Only Fields')
    permissions_run_reports = models.BooleanField(db_column='PermissionsRunReports', verbose_name='Run Reports')
    permissions_view_setup = models.BooleanField(db_column='PermissionsViewSetup', verbose_name='View Setup and Configuration')
    permissions_transfer_any_entity = models.BooleanField(db_column='PermissionsTransferAnyEntity', verbose_name='Transfer Record')
    permissions_new_report_builder = models.BooleanField(db_column='PermissionsNewReportBuilder', verbose_name='Report Builder')
    permissions_activate_contract = models.BooleanField(db_column='PermissionsActivateContract', verbose_name='Activate Contracts')
    permissions_activate_order = models.BooleanField(db_column='PermissionsActivateOrder', verbose_name='Activate Orders')
    permissions_import_leads = models.BooleanField(db_column='PermissionsImportLeads', verbose_name='Import Leads')
    permissions_manage_leads = models.BooleanField(db_column='PermissionsManageLeads', verbose_name='Manage Leads')
    permissions_transfer_any_lead = models.BooleanField(db_column='PermissionsTransferAnyLead', verbose_name='Transfer Leads')
    permissions_view_all_data = models.BooleanField(db_column='PermissionsViewAllData', verbose_name='View All Data')
    permissions_edit_public_documents = models.BooleanField(db_column='PermissionsEditPublicDocuments', verbose_name='Manage Public Documents')
    permissions_view_encrypted_data = models.BooleanField(db_column='PermissionsViewEncryptedData', verbose_name='View Encrypted Data')
    permissions_edit_brand_templates = models.BooleanField(db_column='PermissionsEditBrandTemplates', verbose_name='Manage Letterheads')
    permissions_edit_html_templates = models.BooleanField(db_column='PermissionsEditHtmlTemplates', verbose_name='Edit HTML Templates')
    permissions_chatter_internal_user = models.BooleanField(db_column='PermissionsChatterInternalUser', verbose_name='Chatter Internal User')
    permissions_delete_activated_contract = models.BooleanField(db_column='PermissionsDeleteActivatedContract', verbose_name='Delete Activated Contracts')
    permissions_chatter_invite_external_users = models.BooleanField(db_column='PermissionsChatterInviteExternalUsers', verbose_name='Invite Customers To Chatter')
    permissions_send_sit_requests = models.BooleanField(db_column='PermissionsSendSitRequests', verbose_name='Send Stay-in-Touch Requests')
    permissions_override_forecasts = models.BooleanField(db_column='PermissionsOverrideForecasts', verbose_name='Override Forecasts')
    permissions_view_all_forecasts = models.BooleanField(db_column='PermissionsViewAllForecasts', verbose_name='View All Forecasts')
    permissions_manage_remote_access = models.BooleanField(db_column='PermissionsManageRemoteAccess', verbose_name='Manage Connected Apps')
    permissions_can_use_new_dashboard_builder = models.BooleanField(db_column='PermissionsCanUseNewDashboardBuilder', verbose_name='Drag-and-Drop Dashboard Builder')
    permissions_manage_categories = models.BooleanField(db_column='PermissionsManageCategories', verbose_name='Manage Categories')
    permissions_convert_leads = models.BooleanField(db_column='PermissionsConvertLeads', verbose_name='Convert Leads')
    permissions_password_never_expires = models.BooleanField(db_column='PermissionsPasswordNeverExpires', verbose_name='Password Never Expires')
    permissions_edit_activated_orders = models.BooleanField(db_column='PermissionsEditActivatedOrders', verbose_name='Edit Activated Orders')
    permissions_install_packaging = models.BooleanField(db_column='PermissionsInstallPackaging', verbose_name='Download AppExchange Packages')
    permissions_publish_packaging = models.BooleanField(db_column='PermissionsPublishPackaging', verbose_name='Upload AppExchange Packages')
    permissions_chatter_own_groups = models.BooleanField(db_column='PermissionsChatterOwnGroups', verbose_name='Create and Own New Chatter Groups')
    permissions_edit_opp_line_item_unit_price = models.BooleanField(db_column='PermissionsEditOppLineItemUnitPrice', verbose_name='Edit Opportunity Product Sales Price')
    permissions_create_packaging = models.BooleanField(db_column='PermissionsCreatePackaging', verbose_name='Create AppExchange Packages')
    permissions_bulk_api_hard_delete = models.BooleanField(db_column='PermissionsBulkApiHardDelete', verbose_name='Bulk API Hard Delete')
    permissions_inbound_migration_tools_user = models.BooleanField(db_column='PermissionsInboundMigrationToolsUser', verbose_name='Deploy Change Sets')
    permissions_solution_import = models.BooleanField(db_column='PermissionsSolutionImport', verbose_name='Import Solutions')
    permissions_manage_call_centers = models.BooleanField(db_column='PermissionsManageCallCenters', verbose_name='Manage Call Centers')
    permissions_manage_synonyms = models.BooleanField(db_column='PermissionsManageSynonyms', verbose_name='Manage Synonyms')
    permissions_outbound_migration_tools_user = models.BooleanField(db_column='PermissionsOutboundMigrationToolsUser', verbose_name='Create and Upload Change Sets')
    permissions_view_content = models.BooleanField(db_column='PermissionsViewContent', verbose_name='View Content in Portals')
    permissions_manage_email_client_config = models.BooleanField(db_column='PermissionsManageEmailClientConfig', verbose_name='Manage Email Client Configurations')
    permissions_enable_notifications = models.BooleanField(db_column='PermissionsEnableNotifications', verbose_name='Send Outbound Messages')
    permissions_manage_data_integrations = models.BooleanField(db_column='PermissionsManageDataIntegrations', verbose_name='Manage Data Integrations')
    permissions_distribute_from_pers_wksp = models.BooleanField(db_column='PermissionsDistributeFromPersWksp', verbose_name='Create Content Deliveries')
    permissions_manage_mobile = models.BooleanField(db_column='PermissionsManageMobile', verbose_name='Manage Mobile Configurations')
    permissions_api_enabled = models.BooleanField(db_column='PermissionsApiEnabled', verbose_name='API Enabled')
    permissions_manage_custom_report_types = models.BooleanField(db_column='PermissionsManageCustomReportTypes', verbose_name='Manage Custom Report Types')
    permissions_edit_case_comments = models.BooleanField(db_column='PermissionsEditCaseComments', verbose_name='Edit Case Comments')
    permissions_transfer_any_case = models.BooleanField(db_column='PermissionsTransferAnyCase', verbose_name='Transfer Cases')
    permissions_content_administrator = models.BooleanField(db_column='PermissionsContentAdministrator', verbose_name='Manage Salesforce CRM Content')
    permissions_create_workspaces = models.BooleanField(db_column='PermissionsCreateWorkspaces', verbose_name='Create Libraries')
    permissions_manage_content_permissions = models.BooleanField(db_column='PermissionsManageContentPermissions', verbose_name='Manage Content Permissions')
    permissions_manage_content_properties = models.BooleanField(db_column='PermissionsManageContentProperties', verbose_name='Manage Content Properties')
    permissions_manage_content_types = models.BooleanField(db_column='PermissionsManageContentTypes', verbose_name='Manage record types and layouts for Files')
    permissions_manage_exchange_config = models.BooleanField(db_column='PermissionsManageExchangeConfig', verbose_name='Manage Lightning Sync')
    permissions_manage_analytic_snapshots = models.BooleanField(db_column='PermissionsManageAnalyticSnapshots', verbose_name='Manage Reporting Snapshots')
    permissions_schedule_reports = models.BooleanField(db_column='PermissionsScheduleReports', verbose_name='Schedule Reports')
    permissions_manage_business_hour_holidays = models.BooleanField(db_column='PermissionsManageBusinessHourHolidays', verbose_name='Manage Business Hours Holidays')
    permissions_manage_entitlements = models.BooleanField(db_column='PermissionsManageEntitlements', verbose_name='Manage Entitlements')
    permissions_custom_sidebar_on_all_pages = models.BooleanField(db_column='PermissionsCustomSidebarOnAllPages', verbose_name='Show Custom Sidebar On All Pages')
    permissions_manage_interaction = models.BooleanField(db_column='PermissionsManageInteraction', verbose_name='Manage Flow')
    permissions_view_my_teams_dashboards = models.BooleanField(db_column='PermissionsViewMyTeamsDashboards', verbose_name="View My Team's Dashboards")
    permissions_moderate_chatter = models.BooleanField(db_column='PermissionsModerateChatter', verbose_name='Moderate Chatter')
    permissions_reset_passwords = models.BooleanField(db_column='PermissionsResetPasswords', verbose_name='Reset User Passwords and Unlock Users')
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License')
    permissions_can_insert_feed_system_fields = models.BooleanField(db_column='PermissionsCanInsertFeedSystemFields', verbose_name='Insert System Field Values for Chatter Feeds')
    permissions_activities_access = models.BooleanField(db_column='PermissionsActivitiesAccess', verbose_name='Access Activities')
    permissions_email_template_management = models.BooleanField(db_column='PermissionsEmailTemplateManagement', verbose_name='Manage Email Templates')
    permissions_email_administration = models.BooleanField(db_column='PermissionsEmailAdministration', verbose_name='Email Administration')
    permissions_manage_chatter_messages = models.BooleanField(db_column='PermissionsManageChatterMessages', verbose_name='Manage Chatter Messages and Direct Messages')
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option')
    permissions_chatter_file_link = models.BooleanField(db_column='PermissionsChatterFileLink', verbose_name='Create Public Links')
    permissions_force_two_factor = models.BooleanField(db_column='PermissionsForceTwoFactor', verbose_name='Multi-Factor Authentication for User Interface Logins')
    permissions_view_case_interaction = models.BooleanField(db_column='PermissionsViewCaseInteraction', verbose_name='Use Case Feed')
    permissions_manage_auth_providers = models.BooleanField(db_column='PermissionsManageAuthProviders', verbose_name='Manage Auth. Providers')
    permissions_run_flow = models.BooleanField(db_column='PermissionsRunFlow', verbose_name='Run Flows')
    permissions_manage_quotas = models.BooleanField(db_column='PermissionsManageQuotas', verbose_name='Manage Quotas')
    permissions_create_customize_dashboards = models.BooleanField(db_column='PermissionsCreateCustomizeDashboards', verbose_name='Create and Customize Dashboards')
    permissions_create_dashboard_folders = models.BooleanField(db_column='PermissionsCreateDashboardFolders', verbose_name='Create Dashboard Folders')
    permissions_view_public_dashboards = models.BooleanField(db_column='PermissionsViewPublicDashboards', verbose_name='View Dashboards in Public Folders')
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(db_column='PermissionsManageDashbdsInPubFolders', verbose_name='Manage Dashboards in Public Folders')
    permissions_create_customize_reports = models.BooleanField(db_column='PermissionsCreateCustomizeReports', verbose_name='Create and Customize Reports')
    permissions_create_report_folders = models.BooleanField(db_column='PermissionsCreateReportFolders', verbose_name='Create Report Folders')
    permissions_view_public_reports = models.BooleanField(db_column='PermissionsViewPublicReports', verbose_name='View Reports in Public Folders')
    permissions_manage_reports_in_pub_folders = models.BooleanField(db_column='PermissionsManageReportsInPubFolders', verbose_name='Manage Reports in Public Folders')
    permissions_edit_my_dashboards = models.BooleanField(db_column='PermissionsEditMyDashboards', verbose_name='Edit My Dashboards')
    permissions_edit_my_reports = models.BooleanField(db_column='PermissionsEditMyReports', verbose_name='Edit My Reports')
    permissions_view_all_users = models.BooleanField(db_column='PermissionsViewAllUsers', verbose_name='View All Users')
    permissions_bypass_email_approval = models.BooleanField(db_column='PermissionsBypassEmailApproval', verbose_name='Bypass Email Approval')
    permissions_connect_org_to_environment_hub = models.BooleanField(db_column='PermissionsConnectOrgToEnvironmentHub', verbose_name='Connect Organization to Environment Hub')
    permissions_create_customize_filters = models.BooleanField(db_column='PermissionsCreateCustomizeFilters', verbose_name='Create and Customize List Views')
    permissions_content_hub_user = models.BooleanField(db_column='PermissionsContentHubUser', verbose_name='Files Connect Cloud')
    permissions_sales_console = models.BooleanField(db_column='PermissionsSalesConsole', verbose_name='Sales Console')
    permissions_two_factor_api = models.BooleanField(db_column='PermissionsTwoFactorApi', verbose_name='Multi-Factor Authentication for API Logins')
    permissions_delete_topics = models.BooleanField(db_column='PermissionsDeleteTopics', verbose_name='Delete Topics')
    permissions_edit_topics = models.BooleanField(db_column='PermissionsEditTopics', verbose_name='Edit Topics')
    permissions_create_topics = models.BooleanField(db_column='PermissionsCreateTopics', verbose_name='Create Topics')
    permissions_assign_topics = models.BooleanField(db_column='PermissionsAssignTopics', verbose_name='Assign Topics')
    permissions_identity_enabled = models.BooleanField(db_column='PermissionsIdentityEnabled', verbose_name='Use Identity Features')
    permissions_identity_connect = models.BooleanField(db_column='PermissionsIdentityConnect', verbose_name='Use Identity Connect')
    permissions_content_workspaces = models.BooleanField(db_column='PermissionsContentWorkspaces', verbose_name='Access Libraries')
    permissions_create_work_badge_definition = models.BooleanField(db_column='PermissionsCreateWorkBadgeDefinition', verbose_name='Create custom Badge Definitions')
    permissions_custom_mobile_apps_access = models.BooleanField(db_column='PermissionsCustomMobileAppsAccess', verbose_name='Access Custom Mobile Apps')
    permissions_view_help_link = models.BooleanField(db_column='PermissionsViewHelpLink', verbose_name='View Help Link')
    permissions_manage_profiles_permissionsets = models.BooleanField(db_column='PermissionsManageProfilesPermissionsets', verbose_name='Manage Profiles and Permission Sets')
    permissions_assign_permission_sets = models.BooleanField(db_column='PermissionsAssignPermissionSets', verbose_name='Assign Permission Sets')
    permissions_manage_roles = models.BooleanField(db_column='PermissionsManageRoles', verbose_name='Manage Roles')
    permissions_manage_ip_addresses = models.BooleanField(db_column='PermissionsManageIpAddresses', verbose_name='Manage IP Addresses')
    permissions_manage_sharing = models.BooleanField(db_column='PermissionsManageSharing', verbose_name='Manage Sharing')
    permissions_manage_internal_users = models.BooleanField(db_column='PermissionsManageInternalUsers', verbose_name='Manage Internal Users')
    permissions_manage_password_policies = models.BooleanField(db_column='PermissionsManagePasswordPolicies', verbose_name='Manage Password Policies')
    permissions_manage_login_access_policies = models.BooleanField(db_column='PermissionsManageLoginAccessPolicies', verbose_name='Manage Login Access Policies')
    permissions_can_verify_comment = models.BooleanField(db_column='PermissionsCanVerifyComment', verbose_name='Verify Answers to Chatter Questions')
    permissions_manage_unlisted_groups = models.BooleanField(db_column='PermissionsManageUnlistedGroups', verbose_name='Manage Unlisted Groups')
    permissions_std_automatic_activity_capture = models.BooleanField(db_column='PermissionsStdAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture Standard')
    permissions_insights_app_dashboard_editor = models.BooleanField(db_column='PermissionsInsightsAppDashboardEditor', verbose_name='Create and Edit CRM Analytics Dashboards')
    permissions_manage_two_factor = models.BooleanField(db_column='PermissionsManageTwoFactor', verbose_name='Manage Multi-Factor Authentication in API')
    permissions_insights_app_user = models.BooleanField(db_column='PermissionsInsightsAppUser', verbose_name='Use CRM Analytics')
    permissions_insights_app_admin = models.BooleanField(db_column='PermissionsInsightsAppAdmin', verbose_name='Manage CRM Analytics')
    permissions_insights_app_elt_editor = models.BooleanField(db_column='PermissionsInsightsAppEltEditor', verbose_name='Edit CRM Analytics Dataflows')
    permissions_insights_app_upload_user = models.BooleanField(db_column='PermissionsInsightsAppUploadUser', verbose_name='Upload External Data to CRM Analytics')
    permissions_insights_create_application = models.BooleanField(db_column='PermissionsInsightsCreateApplication', verbose_name='Create CRM Analytics Apps')
    permissions_lightning_experience_user = models.BooleanField(db_column='PermissionsLightningExperienceUser', verbose_name='Lightning Experience User')
    permissions_config_custom_recs = models.BooleanField(db_column='PermissionsConfigCustomRecs', verbose_name='Configure Custom Recommendations')
    permissions_submit_macros_allowed = models.BooleanField(db_column='PermissionsSubmitMacrosAllowed', verbose_name="Manage Macros Users Can't Undo")
    permissions_bulk_macros_allowed = models.BooleanField(db_column='PermissionsBulkMacrosAllowed', verbose_name='Run Macros on Multiple Records')
    permissions_public_twitter_response = models.BooleanField(db_column='PermissionsPublicTwitterResponse', verbose_name='Public Twitter Response')
    permissions_manage_session_permission_sets = models.BooleanField(db_column='PermissionsManageSessionPermissionSets', verbose_name='Manage Session Permission Set Activations')
    permissions_manage_templated_app = models.BooleanField(db_column='PermissionsManageTemplatedApp', verbose_name='Manage CRM Analytics Templated Apps')
    permissions_use_templated_app = models.BooleanField(db_column='PermissionsUseTemplatedApp', verbose_name='Use CRM Analytics Templated Apps')
    permissions_send_announcement_emails = models.BooleanField(db_column='PermissionsSendAnnouncementEmails', verbose_name='Send announcement emails')
    permissions_chatter_edit_own_post = models.BooleanField(db_column='PermissionsChatterEditOwnPost', verbose_name='Edit My Own Posts')
    permissions_chatter_edit_own_record_post = models.BooleanField(db_column='PermissionsChatterEditOwnRecordPost', verbose_name='Edit Posts on Records I Own')
    permissions_wave_tabular_download = models.BooleanField(db_column='PermissionsWaveTabularDownload', verbose_name='Download CRM Analytics Data')
    permissions_manage_sandboxes = models.BooleanField(db_column='PermissionsManageSandboxes', verbose_name='Manage Sandboxes')
    permissions_automatic_activity_capture = models.BooleanField(db_column='PermissionsAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture')
    permissions_import_custom_objects = models.BooleanField(db_column='PermissionsImportCustomObjects', verbose_name='Import Custom Objects')
    permissions_delegated_two_factor = models.BooleanField(db_column='PermissionsDelegatedTwoFactor', verbose_name='Manage Multi-Factor Authentication in User Interface')
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(db_column='PermissionsChatterComposeUiCodesnippet', verbose_name='Allow Inclusion of Code Snippets from UI')
    permissions_select_files_from_salesforce = models.BooleanField(db_column='PermissionsSelectFilesFromSalesforce', verbose_name='Select Files from Salesforce')
    permissions_voice_outbound = models.BooleanField(db_column='PermissionsVoiceOutbound', verbose_name='Access Dialer Outbound Calls')
    permissions_voice_inbound = models.BooleanField(db_column='PermissionsVoiceInbound', verbose_name='Access Dialer Inbound Calls')
    permissions_voice_minutes = models.BooleanField(db_column='PermissionsVoiceMinutes', verbose_name='Access Dialer Minutes')
    permissions_voice_coach = models.BooleanField(db_column='PermissionsVoiceCoach', verbose_name='Access Dialer Monitoring')
    permissions_merge_topics = models.BooleanField(db_column='PermissionsMergeTopics', verbose_name='Merge Topics')
    permissions_edit_iqfields = models.BooleanField(db_column='PermissionsEditIQFields', verbose_name='Update Activity Metrics Data')
    permissions_subscribe_to_lightning_reports = models.BooleanField(db_column='PermissionsSubscribeToLightningReports', verbose_name='Subscribe to Reports')
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(db_column='PermissionsManagePvtRptsAndDashbds', verbose_name='Manage All Private Reports and Dashboards')
    permissions_allow_lightning_login = models.BooleanField(db_column='PermissionsAllowLightningLogin', verbose_name='Lightning Login User')
    permissions_campaign_influence2 = models.BooleanField(db_column='PermissionsCampaignInfluence2', verbose_name='Campaign Influence')
    permissions_view_data_assessment = models.BooleanField(db_column='PermissionsViewDataAssessment', verbose_name='Access to view Data Assessment')
    permissions_remove_direct_message_members = models.BooleanField(db_column='PermissionsRemoveDirectMessageMembers', verbose_name='Remove People from Direct Messages')
    permissions_can_approve_feed_post = models.BooleanField(db_column='PermissionsCanApproveFeedPost', verbose_name='Can Approve Feed Post and Comment')
    permissions_add_direct_message_members = models.BooleanField(db_column='PermissionsAddDirectMessageMembers', verbose_name='Add People to Direct Messages')
    permissions_allow_view_edit_converted_leads = models.BooleanField(db_column='PermissionsAllowViewEditConvertedLeads', verbose_name='View and Edit Converted Leads')
    permissions_social_insights_logo_admin = models.BooleanField(db_column='PermissionsSocialInsightsLogoAdmin', verbose_name='Remove Logos from Accounts')
    permissions_show_company_name_as_user_badge = models.BooleanField(db_column='PermissionsShowCompanyNameAsUserBadge', verbose_name='Show Company Name as Site Role')
    permissions_view_health_check = models.BooleanField(db_column='PermissionsViewHealthCheck', verbose_name='View Health Check')
    permissions_manage_health_check = models.BooleanField(db_column='PermissionsManageHealthCheck', verbose_name='Manage Health Check')
    permissions_packaging2 = models.BooleanField(db_column='PermissionsPackaging2', verbose_name='Create and Update Second-Generation Packages')
    permissions_manage_certificates = models.BooleanField(db_column='PermissionsManageCertificates', verbose_name='Manage Certificates')
    permissions_create_report_in_lightning = models.BooleanField(db_column='PermissionsCreateReportInLightning', verbose_name='Report Builder (Lightning Experience)')
    permissions_prevent_classic_experience = models.BooleanField(db_column='PermissionsPreventClassicExperience', verbose_name='Hide Option to Switch to Salesforce Classic')
    permissions_hide_read_by_list = models.BooleanField(db_column='PermissionsHideReadByList', verbose_name='Hide the Seen By List')
    permissions_list_email_send = models.BooleanField(db_column='PermissionsListEmailSend', verbose_name='Allow sending of List Emails')
    permissions_feed_pinning = models.BooleanField(db_column='PermissionsFeedPinning', verbose_name='Pin Posts in Feeds')
    permissions_change_dashboard_colors = models.BooleanField(db_column='PermissionsChangeDashboardColors', verbose_name='Change Dashboard Colors')
    permissions_manage_recommendation_strategies = models.BooleanField(db_column='PermissionsManageRecommendationStrategies', verbose_name='Manage Next Best Action Strategies')
    permissions_manage_propositions = models.BooleanField(db_column='PermissionsManagePropositions', verbose_name='Manage Next Best Action Recommendations')
    permissions_close_conversations = models.BooleanField(db_column='PermissionsCloseConversations', verbose_name='Close Conversation Threads')
    permissions_subscribe_report_roles_grps = models.BooleanField(db_column='PermissionsSubscribeReportRolesGrps', verbose_name='Subscribe to Reports: Send to Groups and Roles')
    permissions_subscribe_dashboard_roles_grps = models.BooleanField(db_column='PermissionsSubscribeDashboardRolesGrps', verbose_name='Subscribe to Dashboards: Send to Groups and Roles')
    permissions_use_web_link = models.BooleanField(db_column='PermissionsUseWebLink', verbose_name='Allow Access to Customized Actions')
    permissions_edit_asefields = models.BooleanField(db_column='PermissionsEditASEFields', verbose_name='Update One Sync Engine Data')
    permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='PermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions')
    permissions_view_only_embedded_app_user = models.BooleanField(db_column='PermissionsViewOnlyEmbeddedAppUser', verbose_name='Access to View-Only Licensed Templates and Apps')
    permissions_send_external_email_available = models.BooleanField(db_column='PermissionsSendExternalEmailAvailable', verbose_name='Send Email through External Email Service')
    permissions_view_all_activities = models.BooleanField(db_column='PermissionsViewAllActivities', verbose_name='View All Activities')
    permissions_subscribe_report_to_other_users = models.BooleanField(db_column='PermissionsSubscribeReportToOtherUsers', verbose_name='Subscribe to Reports: Add Recipients')
    permissions_lightning_console_allowed_for_user = models.BooleanField(db_column='PermissionsLightningConsoleAllowedForUser', verbose_name='Lightning Console User')
    permissions_subscribe_reports_run_as_user = models.BooleanField(db_column='PermissionsSubscribeReportsRunAsUser', verbose_name='Subscribe to Reports: Set Running User')
    permissions_subscribe_to_lightning_dashboards = models.BooleanField(db_column='PermissionsSubscribeToLightningDashboards', verbose_name='Subscribe to Dashboards')
    permissions_subscribe_dashboard_to_other_users = models.BooleanField(db_column='PermissionsSubscribeDashboardToOtherUsers', verbose_name='Subscribe to Dashboards: Add Recipients')
    permissions_create_ltng_temp_in_pub = models.BooleanField(db_column='PermissionsCreateLtngTempInPub', verbose_name='Manage Public Lightning Email Templates')
    permissions_transactional_email_send = models.BooleanField(db_column='PermissionsTransactionalEmailSend', verbose_name='Send Non-Commercial Email')
    permissions_view_private_static_resources = models.BooleanField(db_column='PermissionsViewPrivateStaticResources', verbose_name='View Private Static Resources')
    permissions_create_ltng_temp_folder = models.BooleanField(db_column='PermissionsCreateLtngTempFolder', verbose_name='Create Folders for Lightning Email Templates')
    permissions_apex_rest_services = models.BooleanField(db_column='PermissionsApexRestServices', verbose_name='Apex REST Services')
    permissions_give_recognition_badge = models.BooleanField(db_column='PermissionsGiveRecognitionBadge', verbose_name='Give Recognition Badges in Experience Builder Sites')
    permissions_use_my_search = models.BooleanField(db_column='PermissionsUseMySearch', verbose_name='Einstein Search')
    permissions_ltng_promo_reserved01_user_perm = models.BooleanField(db_column='PermissionsLtngPromoReserved01UserPerm', verbose_name='Remain in Salesforce Classic')
    permissions_manage_subscriptions = models.BooleanField(db_column='PermissionsManageSubscriptions', verbose_name='Manage CRM Analytics Subscriptions')
    permissions_wave_manage_private_assets_user = models.BooleanField(db_column='PermissionsWaveManagePrivateAssetsUser', verbose_name='Manage CRM Analytics Private Assets')
    permissions_can_edit_data_prep_recipe = models.BooleanField(db_column='PermissionsCanEditDataPrepRecipe', verbose_name='Edit Dataset Recipes')
    permissions_add_analytics_remote_connections = models.BooleanField(db_column='PermissionsAddAnalyticsRemoteConnections', verbose_name='Add CRM Analytics Remote Connections')
    permissions_use_assistant_dialog = models.BooleanField(db_column='PermissionsUseAssistantDialog', verbose_name='Instant Actionable Results')
    permissions_use_query_suggestions = models.BooleanField(db_column='PermissionsUseQuerySuggestions', verbose_name='Natural Language Search')
    permissions_view_roles = models.BooleanField(db_column='PermissionsViewRoles', verbose_name='View Roles and Role Hierarchy')
    permissions_can_manage_maps = models.BooleanField(db_column='PermissionsCanManageMaps', verbose_name='Manage CRM Analytics Custom Maps')
    permissions_lmoutbound_messaging_user_perm = models.BooleanField(db_column='PermissionsLMOutboundMessagingUserPerm', verbose_name='Agent Initiated Outbound Messaging')
    permissions_modify_data_classification = models.BooleanField(db_column='PermissionsModifyDataClassification', verbose_name='Modify Data Classification')
    permissions_privacy_data_access = models.BooleanField(db_column='PermissionsPrivacyDataAccess', verbose_name='Allow user to access privacy data')
    permissions_query_all_files = models.BooleanField(db_column='PermissionsQueryAllFiles', verbose_name='Query All Files')
    permissions_modify_metadata = models.BooleanField(db_column='PermissionsModifyMetadata', verbose_name='Modify Metadata Through Metadata API Functions')
    permissions_manage_cms = models.BooleanField(db_column='PermissionsManageCMS', verbose_name='Create CMS Workspaces and Channels')
    permissions_sandbox_testing_in_community_app = models.BooleanField(db_column='PermissionsSandboxTestingInCommunityApp', verbose_name='Test Sandboxes in Mobile Publisher for Experience Cloud')
    permissions_can_edit_prompts = models.BooleanField(db_column='PermissionsCanEditPrompts', verbose_name='Manage Prompts')
    permissions_view_user_pii = models.BooleanField(db_column='PermissionsViewUserPII', verbose_name='View Concealed Field Data')
    permissions_manage_hub_connections = models.BooleanField(db_column='PermissionsManageHubConnections', verbose_name='Connect Org to Customer 360 Data Manager')
    permissions_b2_bmarketing_analytics_user = models.BooleanField(db_column='PermissionsB2BMarketingAnalyticsUser', verbose_name='Create B2B Marketing Analytics Apps')
    permissions_trace_xds_queries = models.BooleanField(db_column='PermissionsTraceXdsQueries', verbose_name='Access Tracer for External Data Sources')
    permissions_view_all_custom_settings = models.BooleanField(db_column='PermissionsViewAllCustomSettings', verbose_name='View All Custom Settings')
    permissions_view_all_foreign_key_names = models.BooleanField(db_column='PermissionsViewAllForeignKeyNames', verbose_name='View All Lookup Record Names')
    permissions_add_wave_notification_recipients = models.BooleanField(db_column='PermissionsAddWaveNotificationRecipients', verbose_name='Add Recipients to CRM Analytics Notifications')
    permissions_headless_cmsaccess = models.BooleanField(db_column='PermissionsHeadlessCMSAccess', verbose_name='Enable Salesforce CMS Integration')
    permissions_lmend_messaging_session_user_perm = models.BooleanField(db_column='PermissionsLMEndMessagingSessionUserPerm', verbose_name='End Messaging Session')
    permissions_consent_api_update = models.BooleanField(db_column='PermissionsConsentApiUpdate', verbose_name='Update Consent Preferences Using REST API')
    permissions_access_content_builder = models.BooleanField(db_column='PermissionsAccessContentBuilder', verbose_name='Access drag-and-drop content builder')
    permissions_manage_c360_aconnections = models.BooleanField(db_column='PermissionsManageC360AConnections', verbose_name='Connect Org to Salesforce CDP')
    permissions_manage_release_updates = models.BooleanField(db_column='PermissionsManageReleaseUpdates', verbose_name='Manage Release Updates')
    permissions_view_all_profiles = models.BooleanField(db_column='PermissionsViewAllProfiles', verbose_name='View All Profiles')
    permissions_skip_identity_confirmation = models.BooleanField(db_column='PermissionsSkipIdentityConfirmation', verbose_name='Skip Device Activation at Login')
    permissions_learning_manager = models.BooleanField(db_column='PermissionsLearningManager', verbose_name='Manage Learning')
    permissions_send_custom_notifications = models.BooleanField(db_column='PermissionsSendCustomNotifications', verbose_name='Send Custom Notifications')
    permissions_packaging2_delete = models.BooleanField(db_column='PermissionsPackaging2Delete', verbose_name='Delete Second-Generation Packages')
    permissions_manage_learning_reporting = models.BooleanField(db_column='PermissionsManageLearningReporting', verbose_name='Manage Learning Reporting')
    permissions_isotope_cto_cuser = models.BooleanField(db_column='PermissionsIsotopeCToCUser', verbose_name='Salesforce Anywhere Integration Access')
    permissions_isotope_access = models.BooleanField(db_column='PermissionsIsotopeAccess', verbose_name='Salesforce Anywhere on Mobile')
    permissions_isotope_lex = models.BooleanField(db_column='PermissionsIsotopeLEX', verbose_name='Salesforce Anywhere in Lightning Experience')
    permissions_quip_metrics_access = models.BooleanField(db_column='PermissionsQuipMetricsAccess', verbose_name='Quip Metrics')
    permissions_quip_user_engagement_metrics = models.BooleanField(db_column='PermissionsQuipUserEngagementMetrics', verbose_name='Quip User Engagement Metrics')
    permissions_manage_external_connections = models.BooleanField(db_column='PermissionsManageExternalConnections', verbose_name='Allow user to modify Private Connections', sf_read_only=models.READ_ONLY)
    permissions_use_subscription_emails = models.BooleanField(db_column='PermissionsUseSubscriptionEmails', verbose_name='Subscribe to CRM Analytics Assets')
    permissions_native_webview_scrolling = models.BooleanField(db_column='PermissionsNativeWebviewScrolling', verbose_name='Salesforce Mobile App: Native scrolling on webviews')
    permissions_view_developer_name = models.BooleanField(db_column='PermissionsViewDeveloperName', verbose_name='View DeveloperName')
    permissions_bypass_mfafor_ui_logins = models.BooleanField(db_column='PermissionsBypassMFAForUiLogins', verbose_name='Waive Multi-Factor Authentication for Exempt Users')
    permissions_client_secret_rotation = models.BooleanField(db_column='PermissionsClientSecretRotation', verbose_name='Allow consumer key and secret rotation')
    permissions_enable_ipfsupload = models.BooleanField(db_column='PermissionsEnableIPFSUpload', verbose_name='Allow blockchain data upload')
    permissions_enable_bctransaction_polling = models.BooleanField(db_column='PermissionsEnableBCTransactionPolling', verbose_name='Enable blockchain transaction polling API')
    permissions_fscarc_graph_community_user = models.BooleanField(db_column='PermissionsFSCArcGraphCommunityUser', verbose_name='Access Actionable Relationship Center for partner users')
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='permissionset_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='permissionset_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_activation_required = models.BooleanField(db_column='HasActivationRequired', verbose_name='Session Activation Required', default=False)
    permission_set_group = models.ForeignKey('PermissionSetGroup', models.DO_NOTHING, db_column='PermissionSetGroupId', verbose_name='PermissionSetGroup ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Permission Set Type', sf_read_only=models.READ_ONLY, default='Regular', choices=[('Regular', None), ('Profile', None), ('Group', None), ('Session', None), ('Integration', None), ('Standard', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSet'
        verbose_name = 'Permission Set'
        verbose_name_plural = 'Permission Sets'
        # keyPrefix = '0PS'



class PermissionSetAssignment(models.Model):
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, db_column='PermissionSetId', verbose_name='PermissionSet ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    permission_set_group = models.ForeignKey('PermissionSetGroup', models.DO_NOTHING, db_column='PermissionSetGroupId', verbose_name='PermissionSetGroup ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    assignee = models.ForeignKey('User', models.DO_NOTHING, db_column='AssigneeId', verbose_name='Assignee ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    expiration_date = models.DateTimeField(db_column='ExpirationDate', verbose_name='Expires On', blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetAssignment'
        verbose_name = 'Permission Set Assignment'
        verbose_name_plural = 'Permission Set Assignments'
        # keyPrefix = '0Pa'



class PermissionSetGroup(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='API Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='permissionsetgroup_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='permissionsetgroup_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, default='Updated', choices=[('Updated', None), ('Outdated', None), ('Updating', None), ('Failed', None)])
    has_activation_required = models.BooleanField(db_column='HasActivationRequired', verbose_name='Session Activation Required', default=False)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetGroup'
        verbose_name = 'Permission Set Group'
        verbose_name_plural = 'Permission Set Groups'
        # keyPrefix = '0PG'



class PermissionSetGroupComponent(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='permissionsetgroupcomponent_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='permissionsetgroupcomponent_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    permission_set_group = models.ForeignKey(PermissionSetGroup, models.DO_NOTHING, db_column='PermissionSetGroupId', verbose_name='PermissionSetGroup ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, db_column='PermissionSetId', verbose_name='PermissionSet ID or MutingPermissionSet ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetGroupComponent'
        verbose_name = 'Permission Set Group Component'
        verbose_name_plural = 'Permission Set Group Components'
        # keyPrefix = '0PM'



class PermissionSetLicense(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Permission Set License Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='permissionsetlicense_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='permissionsetlicense_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    permission_set_license_key = models.CharField(db_column='PermissionSetLicenseKey', unique=True, max_length=81, sf_read_only=models.READ_ONLY)
    total_licenses = models.IntegerField(db_column='TotalLicenses', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    expiration_date = models.DateField(db_column='ExpirationDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    maximum_permissions_email_single = models.BooleanField(db_column='MaximumPermissionsEmailSingle', verbose_name='Send Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_mass = models.BooleanField(db_column='MaximumPermissionsEmailMass', verbose_name='Mass Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_task = models.BooleanField(db_column='MaximumPermissionsEditTask', verbose_name='Edit Tasks', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_event = models.BooleanField(db_column='MaximumPermissionsEditEvent', verbose_name='Edit Events', sf_read_only=models.READ_ONLY)
    maximum_permissions_export_report = models.BooleanField(db_column='MaximumPermissionsExportReport', verbose_name='Export Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_personal = models.BooleanField(db_column='MaximumPermissionsImportPersonal', verbose_name='Import Personal Contacts', sf_read_only=models.READ_ONLY)
    maximum_permissions_data_export = models.BooleanField(db_column='MaximumPermissionsDataExport', verbose_name='Weekly Data Export', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_users = models.BooleanField(db_column='MaximumPermissionsManageUsers', verbose_name='Manage Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_filters = models.BooleanField(db_column='MaximumPermissionsEditPublicFilters', verbose_name='Manage Public List Views', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_templates = models.BooleanField(db_column='MaximumPermissionsEditPublicTemplates', verbose_name='Manage Public Classic Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_all_data = models.BooleanField(db_column='MaximumPermissionsModifyAllData', verbose_name='Modify All Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_cases = models.BooleanField(db_column='MaximumPermissionsManageCases', verbose_name='Manage Cases', sf_read_only=models.READ_ONLY)
    maximum_permissions_mass_inline_edit = models.BooleanField(db_column='MaximumPermissionsMassInlineEdit', verbose_name='Mass Edits from Lists', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_solutions = models.BooleanField(db_column='MaximumPermissionsManageSolutions', verbose_name='Manage Published Solutions', sf_read_only=models.READ_ONLY)
    maximum_permissions_customize_application = models.BooleanField(db_column='MaximumPermissionsCustomizeApplication', verbose_name='Customize Application', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_readonly_fields = models.BooleanField(db_column='MaximumPermissionsEditReadonlyFields', verbose_name='Edit Read Only Fields', sf_read_only=models.READ_ONLY)
    maximum_permissions_run_reports = models.BooleanField(db_column='MaximumPermissionsRunReports', verbose_name='Run Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_setup = models.BooleanField(db_column='MaximumPermissionsViewSetup', verbose_name='View Setup and Configuration', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_entity = models.BooleanField(db_column='MaximumPermissionsTransferAnyEntity', verbose_name='Transfer Record', sf_read_only=models.READ_ONLY)
    maximum_permissions_new_report_builder = models.BooleanField(db_column='MaximumPermissionsNewReportBuilder', verbose_name='Report Builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_activate_contract = models.BooleanField(db_column='MaximumPermissionsActivateContract', verbose_name='Activate Contracts', sf_read_only=models.READ_ONLY)
    maximum_permissions_activate_order = models.BooleanField(db_column='MaximumPermissionsActivateOrder', verbose_name='Activate Orders', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_leads = models.BooleanField(db_column='MaximumPermissionsImportLeads', verbose_name='Import Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_leads = models.BooleanField(db_column='MaximumPermissionsManageLeads', verbose_name='Manage Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_lead = models.BooleanField(db_column='MaximumPermissionsTransferAnyLead', verbose_name='Transfer Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_data = models.BooleanField(db_column='MaximumPermissionsViewAllData', verbose_name='View All Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_documents = models.BooleanField(db_column='MaximumPermissionsEditPublicDocuments', verbose_name='Manage Public Documents', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_encrypted_data = models.BooleanField(db_column='MaximumPermissionsViewEncryptedData', verbose_name='View Encrypted Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_brand_templates = models.BooleanField(db_column='MaximumPermissionsEditBrandTemplates', verbose_name='Manage Letterheads', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_html_templates = models.BooleanField(db_column='MaximumPermissionsEditHtmlTemplates', verbose_name='Edit HTML Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_internal_user = models.BooleanField(db_column='MaximumPermissionsChatterInternalUser', verbose_name='Chatter Internal User', sf_read_only=models.READ_ONLY)
    maximum_permissions_delete_activated_contract = models.BooleanField(db_column='MaximumPermissionsDeleteActivatedContract', verbose_name='Delete Activated Contracts', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_invite_external_users = models.BooleanField(db_column='MaximumPermissionsChatterInviteExternalUsers', verbose_name='Invite Customers To Chatter', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_sit_requests = models.BooleanField(db_column='MaximumPermissionsSendSitRequests', verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.READ_ONLY)
    maximum_permissions_override_forecasts = models.BooleanField(db_column='MaximumPermissionsOverrideForecasts', verbose_name='Override Forecasts', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_forecasts = models.BooleanField(db_column='MaximumPermissionsViewAllForecasts', verbose_name='View All Forecasts', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_remote_access = models.BooleanField(db_column='MaximumPermissionsManageRemoteAccess', verbose_name='Manage Connected Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_use_new_dashboard_builder = models.BooleanField(db_column='MaximumPermissionsCanUseNewDashboardBuilder', verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_categories = models.BooleanField(db_column='MaximumPermissionsManageCategories', verbose_name='Manage Categories', sf_read_only=models.READ_ONLY)
    maximum_permissions_convert_leads = models.BooleanField(db_column='MaximumPermissionsConvertLeads', verbose_name='Convert Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_password_never_expires = models.BooleanField(db_column='MaximumPermissionsPasswordNeverExpires', verbose_name='Password Never Expires', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_activated_orders = models.BooleanField(db_column='MaximumPermissionsEditActivatedOrders', verbose_name='Edit Activated Orders', sf_read_only=models.READ_ONLY)
    maximum_permissions_install_packaging = models.BooleanField(db_column='MaximumPermissionsInstallPackaging', verbose_name='Download AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_publish_packaging = models.BooleanField(db_column='MaximumPermissionsPublishPackaging', verbose_name='Upload AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_own_groups = models.BooleanField(db_column='MaximumPermissionsChatterOwnGroups', verbose_name='Create and Own New Chatter Groups', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_opp_line_item_unit_price = models.BooleanField(db_column='MaximumPermissionsEditOppLineItemUnitPrice', verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_packaging = models.BooleanField(db_column='MaximumPermissionsCreatePackaging', verbose_name='Create AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_bulk_api_hard_delete = models.BooleanField(db_column='MaximumPermissionsBulkApiHardDelete', verbose_name='Bulk API Hard Delete', sf_read_only=models.READ_ONLY)
    maximum_permissions_inbound_migration_tools_user = models.BooleanField(db_column='MaximumPermissionsInboundMigrationToolsUser', verbose_name='Deploy Change Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_solution_import = models.BooleanField(db_column='MaximumPermissionsSolutionImport', verbose_name='Import Solutions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_call_centers = models.BooleanField(db_column='MaximumPermissionsManageCallCenters', verbose_name='Manage Call Centers', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_synonyms = models.BooleanField(db_column='MaximumPermissionsManageSynonyms', verbose_name='Manage Synonyms', sf_read_only=models.READ_ONLY)
    maximum_permissions_outbound_migration_tools_user = models.BooleanField(db_column='MaximumPermissionsOutboundMigrationToolsUser', verbose_name='Create and Upload Change Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_content = models.BooleanField(db_column='MaximumPermissionsViewContent', verbose_name='View Content in Portals', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_email_client_config = models.BooleanField(db_column='MaximumPermissionsManageEmailClientConfig', verbose_name='Manage Email Client Configurations', sf_read_only=models.READ_ONLY)
    maximum_permissions_enable_notifications = models.BooleanField(db_column='MaximumPermissionsEnableNotifications', verbose_name='Send Outbound Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_data_integrations = models.BooleanField(db_column='MaximumPermissionsManageDataIntegrations', verbose_name='Manage Data Integrations', sf_read_only=models.READ_ONLY)
    maximum_permissions_distribute_from_pers_wksp = models.BooleanField(db_column='MaximumPermissionsDistributeFromPersWksp', verbose_name='Create Content Deliveries', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_mobile = models.BooleanField(db_column='MaximumPermissionsManageMobile', verbose_name='Manage Mobile Configurations', sf_read_only=models.READ_ONLY)
    maximum_permissions_api_enabled = models.BooleanField(db_column='MaximumPermissionsApiEnabled', verbose_name='API Enabled', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_custom_report_types = models.BooleanField(db_column='MaximumPermissionsManageCustomReportTypes', verbose_name='Manage Custom Report Types', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_case_comments = models.BooleanField(db_column='MaximumPermissionsEditCaseComments', verbose_name='Edit Case Comments', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_case = models.BooleanField(db_column='MaximumPermissionsTransferAnyCase', verbose_name='Transfer Cases', sf_read_only=models.READ_ONLY)
    maximum_permissions_content_administrator = models.BooleanField(db_column='MaximumPermissionsContentAdministrator', verbose_name='Manage Salesforce CRM Content', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_workspaces = models.BooleanField(db_column='MaximumPermissionsCreateWorkspaces', verbose_name='Create Libraries', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_permissions = models.BooleanField(db_column='MaximumPermissionsManageContentPermissions', verbose_name='Manage Content Permissions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_properties = models.BooleanField(db_column='MaximumPermissionsManageContentProperties', verbose_name='Manage Content Properties', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_types = models.BooleanField(db_column='MaximumPermissionsManageContentTypes', verbose_name='Manage record types and layouts for Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_exchange_config = models.BooleanField(db_column='MaximumPermissionsManageExchangeConfig', verbose_name='Manage Lightning Sync', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_analytic_snapshots = models.BooleanField(db_column='MaximumPermissionsManageAnalyticSnapshots', verbose_name='Manage Reporting Snapshots', sf_read_only=models.READ_ONLY)
    maximum_permissions_schedule_reports = models.BooleanField(db_column='MaximumPermissionsScheduleReports', verbose_name='Schedule Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_business_hour_holidays = models.BooleanField(db_column='MaximumPermissionsManageBusinessHourHolidays', verbose_name='Manage Business Hours Holidays', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_entitlements = models.BooleanField(db_column='MaximumPermissionsManageEntitlements', verbose_name='Manage Entitlements', sf_read_only=models.READ_ONLY)
    maximum_permissions_custom_sidebar_on_all_pages = models.BooleanField(db_column='MaximumPermissionsCustomSidebarOnAllPages', verbose_name='Show Custom Sidebar On All Pages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_interaction = models.BooleanField(db_column='MaximumPermissionsManageInteraction', verbose_name='Manage Flow', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_my_teams_dashboards = models.BooleanField(db_column='MaximumPermissionsViewMyTeamsDashboards', verbose_name="View My Team's Dashboards", sf_read_only=models.READ_ONLY)
    maximum_permissions_moderate_chatter = models.BooleanField(db_column='MaximumPermissionsModerateChatter', verbose_name='Moderate Chatter', sf_read_only=models.READ_ONLY)
    maximum_permissions_reset_passwords = models.BooleanField(db_column='MaximumPermissionsResetPasswords', verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_flow_uflrequired = models.BooleanField(db_column='MaximumPermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_insert_feed_system_fields = models.BooleanField(db_column='MaximumPermissionsCanInsertFeedSystemFields', verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.READ_ONLY)
    maximum_permissions_activities_access = models.BooleanField(db_column='MaximumPermissionsActivitiesAccess', verbose_name='Access Activities', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_template_management = models.BooleanField(db_column='MaximumPermissionsEmailTemplateManagement', verbose_name='Manage Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_administration = models.BooleanField(db_column='MaximumPermissionsEmailAdministration', verbose_name='Email Administration', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_chatter_messages = models.BooleanField(db_column='MaximumPermissionsManageChatterMessages', verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_email_ic = models.BooleanField(db_column='MaximumPermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_file_link = models.BooleanField(db_column='MaximumPermissionsChatterFileLink', verbose_name='Create Public Links', sf_read_only=models.READ_ONLY)
    maximum_permissions_force_two_factor = models.BooleanField(db_column='MaximumPermissionsForceTwoFactor', verbose_name='Multi-Factor Authentication for User Interface Logins', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_case_interaction = models.BooleanField(db_column='MaximumPermissionsViewCaseInteraction', verbose_name='Use Case Feed', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_auth_providers = models.BooleanField(db_column='MaximumPermissionsManageAuthProviders', verbose_name='Manage Auth. Providers', sf_read_only=models.READ_ONLY)
    maximum_permissions_run_flow = models.BooleanField(db_column='MaximumPermissionsRunFlow', verbose_name='Run Flows', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_quotas = models.BooleanField(db_column='MaximumPermissionsManageQuotas', verbose_name='Manage Quotas', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_dashboards = models.BooleanField(db_column='MaximumPermissionsCreateCustomizeDashboards', verbose_name='Create and Customize Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_dashboard_folders = models.BooleanField(db_column='MaximumPermissionsCreateDashboardFolders', verbose_name='Create Dashboard Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_public_dashboards = models.BooleanField(db_column='MaximumPermissionsViewPublicDashboards', verbose_name='View Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_dashbds_in_pub_folders = models.BooleanField(db_column='MaximumPermissionsManageDashbdsInPubFolders', verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_reports = models.BooleanField(db_column='MaximumPermissionsCreateCustomizeReports', verbose_name='Create and Customize Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_report_folders = models.BooleanField(db_column='MaximumPermissionsCreateReportFolders', verbose_name='Create Report Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_public_reports = models.BooleanField(db_column='MaximumPermissionsViewPublicReports', verbose_name='View Reports in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_reports_in_pub_folders = models.BooleanField(db_column='MaximumPermissionsManageReportsInPubFolders', verbose_name='Manage Reports in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_my_dashboards = models.BooleanField(db_column='MaximumPermissionsEditMyDashboards', verbose_name='Edit My Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_my_reports = models.BooleanField(db_column='MaximumPermissionsEditMyReports', verbose_name='Edit My Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_users = models.BooleanField(db_column='MaximumPermissionsViewAllUsers', verbose_name='View All Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_bypass_email_approval = models.BooleanField(db_column='MaximumPermissionsBypassEmailApproval', verbose_name='Bypass Email Approval', sf_read_only=models.READ_ONLY)
    maximum_permissions_connect_org_to_environment_hub = models.BooleanField(db_column='MaximumPermissionsConnectOrgToEnvironmentHub', verbose_name='Connect Organization to Environment Hub', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_filters = models.BooleanField(db_column='MaximumPermissionsCreateCustomizeFilters', verbose_name='Create and Customize List Views', sf_read_only=models.READ_ONLY)
    maximum_permissions_content_hub_user = models.BooleanField(db_column='MaximumPermissionsContentHubUser', verbose_name='Files Connect Cloud', sf_read_only=models.READ_ONLY)
    maximum_permissions_sales_console = models.BooleanField(db_column='MaximumPermissionsSalesConsole', verbose_name='Sales Console', sf_read_only=models.READ_ONLY)
    maximum_permissions_two_factor_api = models.BooleanField(db_column='MaximumPermissionsTwoFactorApi', verbose_name='Multi-Factor Authentication for API Logins', sf_read_only=models.READ_ONLY)
    maximum_permissions_delete_topics = models.BooleanField(db_column='MaximumPermissionsDeleteTopics', verbose_name='Delete Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_topics = models.BooleanField(db_column='MaximumPermissionsEditTopics', verbose_name='Edit Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_topics = models.BooleanField(db_column='MaximumPermissionsCreateTopics', verbose_name='Create Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_assign_topics = models.BooleanField(db_column='MaximumPermissionsAssignTopics', verbose_name='Assign Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_identity_enabled = models.BooleanField(db_column='MaximumPermissionsIdentityEnabled', verbose_name='Use Identity Features', sf_read_only=models.READ_ONLY)
    maximum_permissions_identity_connect = models.BooleanField(db_column='MaximumPermissionsIdentityConnect', verbose_name='Use Identity Connect', sf_read_only=models.READ_ONLY)
    maximum_permissions_content_workspaces = models.BooleanField(db_column='MaximumPermissionsContentWorkspaces', verbose_name='Access Libraries', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_work_badge_definition = models.BooleanField(db_column='MaximumPermissionsCreateWorkBadgeDefinition', verbose_name='Create custom Badge Definitions', sf_read_only=models.READ_ONLY)
    maximum_permissions_custom_mobile_apps_access = models.BooleanField(db_column='MaximumPermissionsCustomMobileAppsAccess', verbose_name='Access Custom Mobile Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_help_link = models.BooleanField(db_column='MaximumPermissionsViewHelpLink', verbose_name='View Help Link', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_profiles_permissionsets = models.BooleanField(db_column='MaximumPermissionsManageProfilesPermissionsets', verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_assign_permission_sets = models.BooleanField(db_column='MaximumPermissionsAssignPermissionSets', verbose_name='Assign Permission Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_roles = models.BooleanField(db_column='MaximumPermissionsManageRoles', verbose_name='Manage Roles', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_ip_addresses = models.BooleanField(db_column='MaximumPermissionsManageIpAddresses', verbose_name='Manage IP Addresses', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_sharing = models.BooleanField(db_column='MaximumPermissionsManageSharing', verbose_name='Manage Sharing', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_internal_users = models.BooleanField(db_column='MaximumPermissionsManageInternalUsers', verbose_name='Manage Internal Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_password_policies = models.BooleanField(db_column='MaximumPermissionsManagePasswordPolicies', verbose_name='Manage Password Policies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_login_access_policies = models.BooleanField(db_column='MaximumPermissionsManageLoginAccessPolicies', verbose_name='Manage Login Access Policies', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_verify_comment = models.BooleanField(db_column='MaximumPermissionsCanVerifyComment', verbose_name='Verify Answers to Chatter Questions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_unlisted_groups = models.BooleanField(db_column='MaximumPermissionsManageUnlistedGroups', verbose_name='Manage Unlisted Groups', sf_read_only=models.READ_ONLY)
    maximum_permissions_std_automatic_activity_capture = models.BooleanField(db_column='MaximumPermissionsStdAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture Standard', sf_read_only=models.READ_ONLY)
    maximum_permissions_insights_app_dashboard_editor = models.BooleanField(db_column='MaximumPermissionsInsightsAppDashboardEditor', verbose_name='Create and Edit CRM Analytics Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_two_factor = models.BooleanField(db_column='MaximumPermissionsManageTwoFactor', verbose_name='Manage Multi-Factor Authentication in API', sf_read_only=models.READ_ONLY)
    maximum_permissions_insights_app_user = models.BooleanField(db_column='MaximumPermissionsInsightsAppUser', verbose_name='Use CRM Analytics', sf_read_only=models.READ_ONLY)
    maximum_permissions_insights_app_admin = models.BooleanField(db_column='MaximumPermissionsInsightsAppAdmin', verbose_name='Manage CRM Analytics', sf_read_only=models.READ_ONLY)
    maximum_permissions_insights_app_elt_editor = models.BooleanField(db_column='MaximumPermissionsInsightsAppEltEditor', verbose_name='Edit CRM Analytics Dataflows', sf_read_only=models.READ_ONLY)
    maximum_permissions_insights_app_upload_user = models.BooleanField(db_column='MaximumPermissionsInsightsAppUploadUser', verbose_name='Upload External Data to CRM Analytics', sf_read_only=models.READ_ONLY)
    maximum_permissions_insights_create_application = models.BooleanField(db_column='MaximumPermissionsInsightsCreateApplication', verbose_name='Create CRM Analytics Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_lightning_experience_user = models.BooleanField(db_column='MaximumPermissionsLightningExperienceUser', verbose_name='Lightning Experience User', sf_read_only=models.READ_ONLY)
    maximum_permissions_config_custom_recs = models.BooleanField(db_column='MaximumPermissionsConfigCustomRecs', verbose_name='Configure Custom Recommendations', sf_read_only=models.READ_ONLY)
    maximum_permissions_submit_macros_allowed = models.BooleanField(db_column='MaximumPermissionsSubmitMacrosAllowed', verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.READ_ONLY)
    maximum_permissions_bulk_macros_allowed = models.BooleanField(db_column='MaximumPermissionsBulkMacrosAllowed', verbose_name='Run Macros on Multiple Records', sf_read_only=models.READ_ONLY)
    maximum_permissions_public_twitter_response = models.BooleanField(db_column='MaximumPermissionsPublicTwitterResponse', verbose_name='Public Twitter Response', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_session_permission_sets = models.BooleanField(db_column='MaximumPermissionsManageSessionPermissionSets', verbose_name='Manage Session Permission Set Activations', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_templated_app = models.BooleanField(db_column='MaximumPermissionsManageTemplatedApp', verbose_name='Manage CRM Analytics Templated Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_templated_app = models.BooleanField(db_column='MaximumPermissionsUseTemplatedApp', verbose_name='Use CRM Analytics Templated Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_announcement_emails = models.BooleanField(db_column='MaximumPermissionsSendAnnouncementEmails', verbose_name='Send announcement emails', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_edit_own_post = models.BooleanField(db_column='MaximumPermissionsChatterEditOwnPost', verbose_name='Edit My Own Posts', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_edit_own_record_post = models.BooleanField(db_column='MaximumPermissionsChatterEditOwnRecordPost', verbose_name='Edit Posts on Records I Own', sf_read_only=models.READ_ONLY)
    maximum_permissions_wave_tabular_download = models.BooleanField(db_column='MaximumPermissionsWaveTabularDownload', verbose_name='Download CRM Analytics Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_sandboxes = models.BooleanField(db_column='MaximumPermissionsManageSandboxes', verbose_name='Manage Sandboxes', sf_read_only=models.READ_ONLY)
    maximum_permissions_automatic_activity_capture = models.BooleanField(db_column='MaximumPermissionsAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_custom_objects = models.BooleanField(db_column='MaximumPermissionsImportCustomObjects', verbose_name='Import Custom Objects', sf_read_only=models.READ_ONLY)
    maximum_permissions_delegated_two_factor = models.BooleanField(db_column='MaximumPermissionsDelegatedTwoFactor', verbose_name='Manage Multi-Factor Authentication in User Interface', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_compose_ui_codesnippet = models.BooleanField(db_column='MaximumPermissionsChatterComposeUiCodesnippet', verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.READ_ONLY)
    maximum_permissions_select_files_from_salesforce = models.BooleanField(db_column='MaximumPermissionsSelectFilesFromSalesforce', verbose_name='Select Files from Salesforce', sf_read_only=models.READ_ONLY)
    maximum_permissions_voice_outbound = models.BooleanField(db_column='MaximumPermissionsVoiceOutbound', verbose_name='Access Dialer Outbound Calls', sf_read_only=models.READ_ONLY)
    maximum_permissions_voice_inbound = models.BooleanField(db_column='MaximumPermissionsVoiceInbound', verbose_name='Access Dialer Inbound Calls', sf_read_only=models.READ_ONLY)
    maximum_permissions_voice_minutes = models.BooleanField(db_column='MaximumPermissionsVoiceMinutes', verbose_name='Access Dialer Minutes', sf_read_only=models.READ_ONLY)
    maximum_permissions_voice_coach = models.BooleanField(db_column='MaximumPermissionsVoiceCoach', verbose_name='Access Dialer Monitoring', sf_read_only=models.READ_ONLY)
    maximum_permissions_merge_topics = models.BooleanField(db_column='MaximumPermissionsMergeTopics', verbose_name='Merge Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_iqfields = models.BooleanField(db_column='MaximumPermissionsEditIQFields', verbose_name='Update Activity Metrics Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_to_lightning_reports = models.BooleanField(db_column='MaximumPermissionsSubscribeToLightningReports', verbose_name='Subscribe to Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(db_column='MaximumPermissionsManagePvtRptsAndDashbds', verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_lightning_login = models.BooleanField(db_column='MaximumPermissionsAllowLightningLogin', verbose_name='Lightning Login User', sf_read_only=models.READ_ONLY)
    maximum_permissions_campaign_influence2 = models.BooleanField(db_column='MaximumPermissionsCampaignInfluence2', verbose_name='Campaign Influence', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_data_assessment = models.BooleanField(db_column='MaximumPermissionsViewDataAssessment', verbose_name='Access to view Data Assessment', sf_read_only=models.READ_ONLY)
    maximum_permissions_remove_direct_message_members = models.BooleanField(db_column='MaximumPermissionsRemoveDirectMessageMembers', verbose_name='Remove People from Direct Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_approve_feed_post = models.BooleanField(db_column='MaximumPermissionsCanApproveFeedPost', verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.READ_ONLY)
    maximum_permissions_add_direct_message_members = models.BooleanField(db_column='MaximumPermissionsAddDirectMessageMembers', verbose_name='Add People to Direct Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_view_edit_converted_leads = models.BooleanField(db_column='MaximumPermissionsAllowViewEditConvertedLeads', verbose_name='View and Edit Converted Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_social_insights_logo_admin = models.BooleanField(db_column='MaximumPermissionsSocialInsightsLogoAdmin', verbose_name='Remove Logos from Accounts', sf_read_only=models.READ_ONLY)
    maximum_permissions_show_company_name_as_user_badge = models.BooleanField(db_column='MaximumPermissionsShowCompanyNameAsUserBadge', verbose_name='Show Company Name as Site Role', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_health_check = models.BooleanField(db_column='MaximumPermissionsViewHealthCheck', verbose_name='View Health Check', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_health_check = models.BooleanField(db_column='MaximumPermissionsManageHealthCheck', verbose_name='Manage Health Check', sf_read_only=models.READ_ONLY)
    maximum_permissions_packaging2 = models.BooleanField(db_column='MaximumPermissionsPackaging2', verbose_name='Create and Update Second-Generation Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_certificates = models.BooleanField(db_column='MaximumPermissionsManageCertificates', verbose_name='Manage Certificates', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_report_in_lightning = models.BooleanField(db_column='MaximumPermissionsCreateReportInLightning', verbose_name='Report Builder (Lightning Experience)', sf_read_only=models.READ_ONLY)
    maximum_permissions_prevent_classic_experience = models.BooleanField(db_column='MaximumPermissionsPreventClassicExperience', verbose_name='Hide Option to Switch to Salesforce Classic', sf_read_only=models.READ_ONLY)
    maximum_permissions_hide_read_by_list = models.BooleanField(db_column='MaximumPermissionsHideReadByList', verbose_name='Hide the Seen By List', sf_read_only=models.READ_ONLY)
    maximum_permissions_list_email_send = models.BooleanField(db_column='MaximumPermissionsListEmailSend', verbose_name='Allow sending of List Emails', sf_read_only=models.READ_ONLY)
    maximum_permissions_feed_pinning = models.BooleanField(db_column='MaximumPermissionsFeedPinning', verbose_name='Pin Posts in Feeds', sf_read_only=models.READ_ONLY)
    maximum_permissions_change_dashboard_colors = models.BooleanField(db_column='MaximumPermissionsChangeDashboardColors', verbose_name='Change Dashboard Colors', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_recommendation_strategies = models.BooleanField(db_column='MaximumPermissionsManageRecommendationStrategies', verbose_name='Manage Next Best Action Strategies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_propositions = models.BooleanField(db_column='MaximumPermissionsManagePropositions', verbose_name='Manage Next Best Action Recommendations', sf_read_only=models.READ_ONLY)
    maximum_permissions_close_conversations = models.BooleanField(db_column='MaximumPermissionsCloseConversations', verbose_name='Close Conversation Threads', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_report_roles_grps = models.BooleanField(db_column='MaximumPermissionsSubscribeReportRolesGrps', verbose_name='Subscribe to Reports: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_dashboard_roles_grps = models.BooleanField(db_column='MaximumPermissionsSubscribeDashboardRolesGrps', verbose_name='Subscribe to Dashboards: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_web_link = models.BooleanField(db_column='MaximumPermissionsUseWebLink', verbose_name='Allow Access to Customized Actions', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_asefields = models.BooleanField(db_column='MaximumPermissionsEditASEFields', verbose_name='Update One Sync Engine Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='MaximumPermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_only_embedded_app_user = models.BooleanField(db_column='MaximumPermissionsViewOnlyEmbeddedAppUser', verbose_name='Access to View-Only Licensed Templates and Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_external_email_available = models.BooleanField(db_column='MaximumPermissionsSendExternalEmailAvailable', verbose_name='Send Email through External Email Service', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_activities = models.BooleanField(db_column='MaximumPermissionsViewAllActivities', verbose_name='View All Activities', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_report_to_other_users = models.BooleanField(db_column='MaximumPermissionsSubscribeReportToOtherUsers', verbose_name='Subscribe to Reports: Add Recipients', sf_read_only=models.READ_ONLY)
    maximum_permissions_lightning_console_allowed_for_user = models.BooleanField(db_column='MaximumPermissionsLightningConsoleAllowedForUser', verbose_name='Lightning Console User', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_reports_run_as_user = models.BooleanField(db_column='MaximumPermissionsSubscribeReportsRunAsUser', verbose_name='Subscribe to Reports: Set Running User', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_to_lightning_dashboards = models.BooleanField(db_column='MaximumPermissionsSubscribeToLightningDashboards', verbose_name='Subscribe to Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_dashboard_to_other_users = models.BooleanField(db_column='MaximumPermissionsSubscribeDashboardToOtherUsers', verbose_name='Subscribe to Dashboards: Add Recipients', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_ltng_temp_in_pub = models.BooleanField(db_column='MaximumPermissionsCreateLtngTempInPub', verbose_name='Manage Public Lightning Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_transactional_email_send = models.BooleanField(db_column='MaximumPermissionsTransactionalEmailSend', verbose_name='Send Non-Commercial Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_private_static_resources = models.BooleanField(db_column='MaximumPermissionsViewPrivateStaticResources', verbose_name='View Private Static Resources', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_ltng_temp_folder = models.BooleanField(db_column='MaximumPermissionsCreateLtngTempFolder', verbose_name='Create Folders for Lightning Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_apex_rest_services = models.BooleanField(db_column='MaximumPermissionsApexRestServices', verbose_name='Apex REST Services', sf_read_only=models.READ_ONLY)
    maximum_permissions_give_recognition_badge = models.BooleanField(db_column='MaximumPermissionsGiveRecognitionBadge', verbose_name='Give Recognition Badges in Experience Builder Sites', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_my_search = models.BooleanField(db_column='MaximumPermissionsUseMySearch', verbose_name='Einstein Search', sf_read_only=models.READ_ONLY)
    maximum_permissions_ltng_promo_reserved01_user_perm = models.BooleanField(db_column='MaximumPermissionsLtngPromoReserved01UserPerm', verbose_name='Remain in Salesforce Classic', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_subscriptions = models.BooleanField(db_column='MaximumPermissionsManageSubscriptions', verbose_name='Manage CRM Analytics Subscriptions', sf_read_only=models.READ_ONLY)
    maximum_permissions_wave_manage_private_assets_user = models.BooleanField(db_column='MaximumPermissionsWaveManagePrivateAssetsUser', verbose_name='Manage CRM Analytics Private Assets', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_edit_data_prep_recipe = models.BooleanField(db_column='MaximumPermissionsCanEditDataPrepRecipe', verbose_name='Edit Dataset Recipes', sf_read_only=models.READ_ONLY)
    maximum_permissions_add_analytics_remote_connections = models.BooleanField(db_column='MaximumPermissionsAddAnalyticsRemoteConnections', verbose_name='Add CRM Analytics Remote Connections', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_assistant_dialog = models.BooleanField(db_column='MaximumPermissionsUseAssistantDialog', verbose_name='Instant Actionable Results', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_query_suggestions = models.BooleanField(db_column='MaximumPermissionsUseQuerySuggestions', verbose_name='Natural Language Search', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_roles = models.BooleanField(db_column='MaximumPermissionsViewRoles', verbose_name='View Roles and Role Hierarchy', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_manage_maps = models.BooleanField(db_column='MaximumPermissionsCanManageMaps', verbose_name='Manage CRM Analytics Custom Maps', sf_read_only=models.READ_ONLY)
    maximum_permissions_lmoutbound_messaging_user_perm = models.BooleanField(db_column='MaximumPermissionsLMOutboundMessagingUserPerm', verbose_name='Agent Initiated Outbound Messaging', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_data_classification = models.BooleanField(db_column='MaximumPermissionsModifyDataClassification', verbose_name='Modify Data Classification', sf_read_only=models.READ_ONLY)
    maximum_permissions_privacy_data_access = models.BooleanField(db_column='MaximumPermissionsPrivacyDataAccess', verbose_name='Allow user to access privacy data', sf_read_only=models.READ_ONLY)
    maximum_permissions_query_all_files = models.BooleanField(db_column='MaximumPermissionsQueryAllFiles', verbose_name='Query All Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_metadata = models.BooleanField(db_column='MaximumPermissionsModifyMetadata', verbose_name='Modify Metadata Through Metadata API Functions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_cms = models.BooleanField(db_column='MaximumPermissionsManageCMS', verbose_name='Create CMS Workspaces and Channels', sf_read_only=models.READ_ONLY)
    maximum_permissions_sandbox_testing_in_community_app = models.BooleanField(db_column='MaximumPermissionsSandboxTestingInCommunityApp', verbose_name='Test Sandboxes in Mobile Publisher for Experience Cloud', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_edit_prompts = models.BooleanField(db_column='MaximumPermissionsCanEditPrompts', verbose_name='Manage Prompts', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_user_pii = models.BooleanField(db_column='MaximumPermissionsViewUserPII', verbose_name='View Concealed Field Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_hub_connections = models.BooleanField(db_column='MaximumPermissionsManageHubConnections', verbose_name='Connect Org to Customer 360 Data Manager', sf_read_only=models.READ_ONLY)
    maximum_permissions_b2_bmarketing_analytics_user = models.BooleanField(db_column='MaximumPermissionsB2BMarketingAnalyticsUser', verbose_name='Create B2B Marketing Analytics Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_trace_xds_queries = models.BooleanField(db_column='MaximumPermissionsTraceXdsQueries', verbose_name='Access Tracer for External Data Sources', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_custom_settings = models.BooleanField(db_column='MaximumPermissionsViewAllCustomSettings', verbose_name='View All Custom Settings', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_foreign_key_names = models.BooleanField(db_column='MaximumPermissionsViewAllForeignKeyNames', verbose_name='View All Lookup Record Names', sf_read_only=models.READ_ONLY)
    maximum_permissions_add_wave_notification_recipients = models.BooleanField(db_column='MaximumPermissionsAddWaveNotificationRecipients', verbose_name='Add Recipients to CRM Analytics Notifications', sf_read_only=models.READ_ONLY)
    maximum_permissions_headless_cmsaccess = models.BooleanField(db_column='MaximumPermissionsHeadlessCMSAccess', verbose_name='Enable Salesforce CMS Integration', sf_read_only=models.READ_ONLY)
    maximum_permissions_lmend_messaging_session_user_perm = models.BooleanField(db_column='MaximumPermissionsLMEndMessagingSessionUserPerm', verbose_name='End Messaging Session', sf_read_only=models.READ_ONLY)
    maximum_permissions_consent_api_update = models.BooleanField(db_column='MaximumPermissionsConsentApiUpdate', verbose_name='Update Consent Preferences Using REST API', sf_read_only=models.READ_ONLY)
    maximum_permissions_access_content_builder = models.BooleanField(db_column='MaximumPermissionsAccessContentBuilder', verbose_name='Access drag-and-drop content builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_c360_aconnections = models.BooleanField(db_column='MaximumPermissionsManageC360AConnections', verbose_name='Connect Org to Salesforce CDP', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_release_updates = models.BooleanField(db_column='MaximumPermissionsManageReleaseUpdates', verbose_name='Manage Release Updates', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_profiles = models.BooleanField(db_column='MaximumPermissionsViewAllProfiles', verbose_name='View All Profiles', sf_read_only=models.READ_ONLY)
    maximum_permissions_skip_identity_confirmation = models.BooleanField(db_column='MaximumPermissionsSkipIdentityConfirmation', verbose_name='Skip Device Activation at Login', sf_read_only=models.READ_ONLY)
    maximum_permissions_learning_manager = models.BooleanField(db_column='MaximumPermissionsLearningManager', verbose_name='Manage Learning', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_custom_notifications = models.BooleanField(db_column='MaximumPermissionsSendCustomNotifications', verbose_name='Send Custom Notifications', sf_read_only=models.READ_ONLY)
    maximum_permissions_packaging2_delete = models.BooleanField(db_column='MaximumPermissionsPackaging2Delete', verbose_name='Delete Second-Generation Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_learning_reporting = models.BooleanField(db_column='MaximumPermissionsManageLearningReporting', verbose_name='Manage Learning Reporting', sf_read_only=models.READ_ONLY)
    maximum_permissions_isotope_cto_cuser = models.BooleanField(db_column='MaximumPermissionsIsotopeCToCUser', verbose_name='Salesforce Anywhere Integration Access', sf_read_only=models.READ_ONLY)
    maximum_permissions_isotope_access = models.BooleanField(db_column='MaximumPermissionsIsotopeAccess', verbose_name='Salesforce Anywhere on Mobile', sf_read_only=models.READ_ONLY)
    maximum_permissions_isotope_lex = models.BooleanField(db_column='MaximumPermissionsIsotopeLEX', verbose_name='Salesforce Anywhere in Lightning Experience', sf_read_only=models.READ_ONLY)
    maximum_permissions_quip_metrics_access = models.BooleanField(db_column='MaximumPermissionsQuipMetricsAccess', verbose_name='Quip Metrics', sf_read_only=models.READ_ONLY)
    maximum_permissions_quip_user_engagement_metrics = models.BooleanField(db_column='MaximumPermissionsQuipUserEngagementMetrics', verbose_name='Quip User Engagement Metrics', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_external_connections = models.BooleanField(db_column='MaximumPermissionsManageExternalConnections', verbose_name='Allow user to modify Private Connections', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_subscription_emails = models.BooleanField(db_column='MaximumPermissionsUseSubscriptionEmails', verbose_name='Subscribe to CRM Analytics Assets', sf_read_only=models.READ_ONLY)
    maximum_permissions_native_webview_scrolling = models.BooleanField(db_column='MaximumPermissionsNativeWebviewScrolling', verbose_name='Salesforce Mobile App: Native scrolling on webviews', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_developer_name = models.BooleanField(db_column='MaximumPermissionsViewDeveloperName', verbose_name='View DeveloperName', sf_read_only=models.READ_ONLY)
    maximum_permissions_bypass_mfafor_ui_logins = models.BooleanField(db_column='MaximumPermissionsBypassMFAForUiLogins', verbose_name='Waive Multi-Factor Authentication for Exempt Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_client_secret_rotation = models.BooleanField(db_column='MaximumPermissionsClientSecretRotation', verbose_name='Allow consumer key and secret rotation', sf_read_only=models.READ_ONLY)
    maximum_permissions_enable_ipfsupload = models.BooleanField(db_column='MaximumPermissionsEnableIPFSUpload', verbose_name='Allow blockchain data upload', sf_read_only=models.READ_ONLY)
    maximum_permissions_enable_bctransaction_polling = models.BooleanField(db_column='MaximumPermissionsEnableBCTransactionPolling', verbose_name='Enable blockchain transaction polling API', sf_read_only=models.READ_ONLY)
    maximum_permissions_fscarc_graph_community_user = models.BooleanField(db_column='MaximumPermissionsFSCArcGraphCommunityUser', verbose_name='Access Actionable Relationship Center for partner users', sf_read_only=models.READ_ONLY)
    used_licenses = models.IntegerField(db_column='UsedLicenses', sf_read_only=models.READ_ONLY)
    migratable_licenses = models.IntegerField(db_column='MigratableLicenses', verbose_name='Licenses to Migrate', sf_read_only=models.READ_ONLY)
    is_available_for_integrations = models.BooleanField(db_column='IsAvailableForIntegrations', verbose_name='Is License Available for Integrations?', sf_read_only=models.READ_ONLY, default=False)
    license_expiration_policy = models.CharField(db_column='LicenseExpirationPolicy', max_length=255, sf_read_only=models.READ_ONLY, choices=[('AllowNamespaceAccess', 'Allow package access'), ('BlockNamespaceAccess', 'Block package access')], blank=True, null=True)
    is_supplement_license = models.BooleanField(db_column='IsSupplementLicense', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicense'
        verbose_name = 'Permission Set License'
        verbose_name_plural = 'Permission Set Licenses'
        # keyPrefix = '0PL'



class PermissionSetLicenseAssign(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='permissionsetlicenseassign_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='permissionsetlicenseassign_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey(PermissionSetLicense, models.DO_NOTHING, db_column='PermissionSetLicenseId', verbose_name='Permission Set License ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    assignee = models.ForeignKey('User', models.DO_NOTHING, db_column='AssigneeId', related_name='permissionsetlicenseassign_assignee_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicenseAssign'
        verbose_name = 'Permission Set License Assignment'
        verbose_name_plural = 'Permission Set License Assignments'
        # keyPrefix = '2LA'



class PermissionSetTabSetting(models.Model):
    parent = models.ForeignKey(PermissionSet, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    visibility = models.CharField(db_column='Visibility', max_length=40, choices=[('DefaultOff', 'Default Off'), ('DefaultOn', 'Default On')])
    name = models.CharField(db_column='Name', max_length=60, verbose_name='Tab Name', sf_read_only=models.NOT_UPDATEABLE)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetTabSetting'
        verbose_name = 'Permission Set Tab Setting'
        verbose_name_plural = 'Permission Set Tab Setting'
        # keyPrefix = '01P'



class PicklistValueInfo(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value = models.CharField(db_column='Value', max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default_value = models.BooleanField(db_column='IsDefaultValue', sf_read_only=models.READ_ONLY, default=False)
    is_active = models.BooleanField(db_column='IsActive', sf_read_only=models.READ_ONLY, default=False)
    valid_for = models.CharField(db_column='ValidFor', max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_particle_id = models.CharField(db_column='EntityParticleId', max_length=150, verbose_name='Entity Particle ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PicklistValueInfo'
        verbose_name = 'Picklist Value Info'
        verbose_name_plural = 'Picklist Value Info'
        # keyPrefix = '4pv'



class PlatformAction(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='Platform Action ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=255, sf_read_only=models.READ_ONLY)
    type = models.CharField(db_column='Type', max_length=255, sf_read_only=models.READ_ONLY, choices=[('QuickAction', 'Quick Action'), ('StandardButton', 'Standard Button'), ('CustomButton', 'Custom Button'), ('ProductivityAction', 'Productivity (Highlight) Action'), ('ActionLink', 'ActionLink'), ('InvocableAction', 'Invocable Action')])
    subtype = models.CharField(db_column='Subtype', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, verbose_name='API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_target = models.TextField(db_column='ActionTarget', sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_target_type = models.CharField(db_column='ActionTargetType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Describe', 'Target is for describing the action'), ('Invoke', 'Target is for invoking the action'), ('Visualforce', 'Target is for a visualforce page'), ('LightningComponent', 'Target is for a lightning component')], blank=True, null=True)
    confirmation_message = models.CharField(db_column='ConfirmationMessage', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    group_id = models.CharField(db_column='GroupId', max_length=18, verbose_name='Group ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference to a table
    is_group_default = models.BooleanField(db_column='IsGroupDefault', sf_read_only=models.READ_ONLY, default=False)
    category = models.CharField(db_column='Category', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Primary', 'Primary action'), ('Overflow', 'Overflow action')], blank=True, null=True)
    invocation_status = models.CharField(db_column='InvocationStatus', max_length=255, sf_read_only=models.READ_ONLY, choices=[('New', 'New'), ('Pending', 'Pending'), ('Successful', 'Successful'), ('Failed', 'Failed')], blank=True, null=True)
    invoked_by_user = models.ForeignKey('User', models.DO_NOTHING, db_column='InvokedByUserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    source_entity = models.CharField(db_column='SourceEntity', max_length=255, sf_read_only=models.READ_ONLY)
    action_list_context = models.CharField(db_column='ActionListContext', max_length=255, sf_read_only=models.READ_ONLY, choices=[('ListView', 'Header for a list view'), ('RelatedList', 'Header for a related list'), ('ListViewRecord', 'View for a list view record'), ('RelatedListRecord', 'View for a related list record'), ('Record', 'View page for a record'), ('FeedElement', 'An element in the Feed'), ('Chatter', 'Chatter specific view'), ('Global', 'View page for Global'), ('Flexipage', 'View for Lightning Page'), ('MruList', 'Header for an MRU list'), ('MruRow', 'View for a MRU list record'), ('RecordEdit', 'Edit page for a record'), ('Photo', 'View for an entity photo detail component'), ('BannerPhoto', 'View for an entity Banner photo detail component'), ('ObjectHomeChart', 'View for object home charts'), ('ListViewDefinition', 'View for a list view definition'), ('Dockable', 'View for dockable actions'), ('Lookup', 'View for lookup'), ('Assistant', 'View for Assistant')], blank=True, null=True)
    device_format = models.CharField(db_column='DeviceFormat', max_length=255, sf_read_only=models.READ_ONLY, default='Phone', choices=[('Phone', 'Phone'), ('Tablet', 'Tablet'), ('Desktop', 'Desktop'), ('Aloha', 'Aloha')], blank=True, null=True)
    retrieval_mode = models.CharField(db_column='RetrievalMode', max_length=255, sf_read_only=models.READ_ONLY, choices=[('All', 'Retrieves all supported actions'), ('PageLayout', 'Retrieves all actions supported for the associated page layout')], blank=True, null=True)
    icon_content_type = models.CharField(db_column='IconContentType', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_height = models.IntegerField(db_column='IconHeight', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_width = models.IntegerField(db_column='IconWidth', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(db_column='IconUrl', verbose_name='Icon URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_mass_action = models.BooleanField(db_column='IsMassAction', sf_read_only=models.READ_ONLY, default=False)
    primary_color = models.CharField(db_column='PrimaryColor', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_source_entity = models.CharField(db_column='RelatedSourceEntity', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    section = models.CharField(db_column='Section', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Page', 'Page Actions'), ('ActivityComposer', 'Activity Composer Actions'), ('CollaborateComposer', 'Collaboration Composer Actions'), ('SingleActionLinks', 'Single Action Links')], blank=True, null=True)
    related_list_record_id = models.CharField(db_column='RelatedListRecordId', max_length=255, verbose_name='Related List Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_url = models.CharField(db_column='TargetUrl', max_length=2048, verbose_name='Target URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_object = models.CharField(db_column='TargetObject', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    open_type = models.CharField(db_column='OpenType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('newWindow', 'Display in new window'), ('sidebar', 'Display in existing window with sidebar'), ('noSidebar', 'Display in existing window without sidebar'), ('replace', 'Display in existing window without sidebar or header'), ('onClickJavaScript', 'Execute JavaScript')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PlatformAction'
        verbose_name = 'Platform Action'
        verbose_name_plural = 'Platform Actions'
        # keyPrefix = '0JV'



class PlatformEventUsageMetric(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='External ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Metric Name', sf_read_only=models.READ_ONLY, choices=[('CHANGE_EVENTS_PUBLISHED', 'cdc_pub'), ('CHANGE_EVENTS_DELIVERED', 'cdc_del'), ('PLATFORM_EVENTS_PUBLISHED', 'pe_pub'), ('PLATFORM_EVENTS_DELIVERED', 'pe_del')])
    start_date = models.DateTimeField(db_column='StartDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateTimeField(db_column='EndDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value = models.TextField(db_column='Value', verbose_name='Metric Value', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'PlatformEventUsageMetric'
        verbose_name = 'Platform Event Usage Metric'
        verbose_name_plural = 'Platform Event Usage Metrics'
        # keyPrefix = '8Kk'



class PresenceConfigDeclineReason(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='presenceconfigdeclinereason_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='presenceconfigdeclinereason_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    presence_user_config = models.ForeignKey('PresenceUserConfig', models.DO_NOTHING, db_column='PresenceUserConfigId', verbose_name='Presence Configuration ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    presence_decline_reason = models.ForeignKey('PresenceDeclineReason', models.DO_NOTHING, db_column='PresenceDeclineReasonId', verbose_name='Presence Decline Reason ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PresenceConfigDeclineReason'
        verbose_name = 'Presence Configuration Decline Reason'
        verbose_name_plural = 'Presence Configuration Decline Reasons'
        # keyPrefix = '0KP'



class PresenceDeclineReason(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Presence Decline Reason Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='presencedeclinereason_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='presencedeclinereason_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PresenceDeclineReason'
        verbose_name = 'Presence Decline Reason'
        verbose_name_plural = 'Presence Decline Reasons'
        # keyPrefix = '0KR'



class PresenceUserConfig(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Presence Configuration Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='presenceuserconfig_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='presenceuserconfig_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    capacity = models.IntegerField(db_column='Capacity')
    options_is_auto_accept_enabled = models.BooleanField(db_column='OptionsIsAutoAcceptEnabled', verbose_name='IsAutoAcceptEnabled')
    options_is_decline_enabled = models.BooleanField(db_column='OptionsIsDeclineEnabled', verbose_name='IsDeclineEnabled')
    options_is_decline_reason_enabled = models.BooleanField(db_column='OptionsIsDeclineReasonEnabled', verbose_name='IsDeclineReasonEnabled')
    options_is_request_sound_enabled = models.BooleanField(db_column='OptionsIsRequestSoundEnabled', verbose_name='IsRequestSoundEnabled')
    options_is_disconnect_sound_enabled = models.BooleanField(db_column='OptionsIsDisconnectSoundEnabled', verbose_name='IsDisconnectSoundEnabled')
    presence_status_on_decline = models.ForeignKey('ServicePresenceStatus', models.DO_NOTHING, db_column='PresenceStatusOnDeclineId', related_name='presenceuserconfig_presencestatusondecline_set', verbose_name='Service Presence Status ID', blank=True, null=True)
    presence_status_on_push_timeout = models.ForeignKey('ServicePresenceStatus', models.DO_NOTHING, db_column='PresenceStatusOnPushTimeoutId', related_name='presenceuserconfig_presencestatusonpushtimeout_set', verbose_name='Service Presence Status ID', blank=True, null=True)
    custom_sound = models.ForeignKey('StaticResource', models.DO_NOTHING, db_column='CustomSoundId', verbose_name='Static Resource ID', blank=True, null=True)
    sound_length = models.IntegerField(db_column='SoundLength', verbose_name='Sound Length (Seconds)', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PresenceUserConfig'
        verbose_name = 'Presence Configuration'
        verbose_name_plural = 'Presence Configurations'
        # keyPrefix = '0Nd'



class PresenceUserConfigProfile(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='presenceuserconfigprofile_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='presenceuserconfigprofile_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    presence_user_config = models.ForeignKey(PresenceUserConfig, models.DO_NOTHING, db_column='PresenceUserConfigId', verbose_name='Presence Configuration ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    profile = models.OneToOneField('Profile', models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PresenceUserConfigProfile'
        verbose_name = 'Presence Configuration for Profile'
        verbose_name_plural = 'Presence Configurations for Profiles'
        # keyPrefix = '0Nf'



class PresenceUserConfigUser(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='presenceuserconfiguser_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='presenceuserconfiguser_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    presence_user_config = models.ForeignKey(PresenceUserConfig, models.DO_NOTHING, db_column='PresenceUserConfigId', verbose_name='Presence Configuration ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.OneToOneField('User', models.DO_NOTHING, db_column='UserId', related_name='presenceuserconfiguser_user_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PresenceUserConfigUser'
        verbose_name = 'Presence Configuration for User'
        verbose_name_plural = 'Presence Configurations for Users'
        # keyPrefix = '0Ne'



class Pricebook2(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Price Book Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='pricebook2_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='pricebook2_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    is_archived = models.BooleanField(db_column='IsArchived', verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    is_standard = models.BooleanField(db_column='IsStandard', verbose_name='Is Standard Price Book', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2'
        verbose_name = 'Price Book'
        verbose_name_plural = 'Price Books'
        # keyPrefix = '01s'



class Pricebook2History(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, db_column='Pricebook2Id', verbose_name='Price Book ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('IsArchived', 'Archived'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('IsStandard', 'Is Standard Price Book'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Name', 'Price Book Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2History'
        verbose_name = 'Price Book History'
        verbose_name_plural = 'Price Book History'
        # keyPrefix = None



class PricebookEntry(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, db_column='Pricebook2Id', verbose_name='Price Book ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    unit_price = models.DecimalField(db_column='UnitPrice', max_digits=18, decimal_places=2, verbose_name='List Price')
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    use_standard_price = models.BooleanField(db_column='UseStandardPrice', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='pricebookentry_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='pricebookentry_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    product_code = models.CharField(db_column='ProductCode', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_archived = models.BooleanField(db_column='IsArchived', verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PricebookEntry'
        verbose_name = 'Price Book Entry'
        verbose_name_plural = 'Price Book Entries'
        # keyPrefix = '01u'



class PricebookEntryHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    pricebook_entry = models.ForeignKey(PricebookEntry, models.DO_NOTHING, db_column='PricebookEntryId', verbose_name='Price Book Entry ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('UnitPrice', 'List Price'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('UseStandardPrice', 'Use Standard Price')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PricebookEntryHistory'
        verbose_name = 'Price Book Entry History'
        verbose_name_plural = 'Price Book Entry History'
        # keyPrefix = None



class Problem(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    problem_number = models.CharField(db_column='ProblemNumber', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Created On', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='problem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified On', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='problem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255)
    description = models.TextField(db_column='Description', blank=True, null=True)
    status_code = models.CharField(db_column='StatusCode', max_length=255, sf_read_only=models.READ_ONLY, default='New', choices=[('New', 'New'), ('Open', 'Open'), ('RootCauseAnalysis', 'Root Case Analysis'), ('FixInProgress', 'Fix In Progress'), ('Resolved', 'Resolved'), ('Closed', 'Closed'), ('PendingChange', 'Pending Change'), ('KnownError', 'Known Error'), ('WorkInProgress', 'Work In Progress')], blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, default='New', choices=[('New', 'New'), ('Open', 'Open'), ('Root Case Analysis', 'Root Case Analysis'), ('Fix In Progress', 'Fix In Progress'), ('Resolved', 'Resolved'), ('Closed', 'Closed'), ('Pending Change', 'Pending Change'), ('Known Error', 'Known Error'), ('Work In Progress', 'Work In Progress')])
    impact = models.CharField(db_column='Impact', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')])
    urgency = models.CharField(db_column='Urgency', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')])
    priority = models.CharField(db_column='Priority', max_length=40, default='Critical', choices=[('Critical', 'Critical'), ('High', 'High'), ('Moderate', 'Moderate'), ('Low', 'Low')])
    priority_override_reason = models.CharField(db_column='PriorityOverrideReason', max_length=255, blank=True, null=True)
    root_cause_summary = models.TextField(db_column='RootCauseSummary', blank=True, null=True)
    category = models.CharField(db_column='Category', max_length=40, blank=True, null=True)
    sub_category = models.CharField(db_column='SubCategory', max_length=40, verbose_name='Sub-Category', blank=True, null=True)
    parent_problem = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentProblemId', verbose_name='Parent Problem ID', blank=True, null=True)
    resolved_by = models.ForeignKey('User', models.DO_NOTHING, db_column='ResolvedById', related_name='problem_resolvedby_set', verbose_name='User ID', blank=True, null=True)
    resolution_date_time = models.DateTimeField(db_column='ResolutionDateTime', verbose_name='Resolution Date', blank=True, null=True)
    resolution_summary = models.TextField(db_column='ResolutionSummary', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Problem'
        verbose_name = 'Problem'
        verbose_name_plural = 'Problems'
        # keyPrefix = '0o2'



class ProblemFeed(models.Model):
    parent = models.ForeignKey(Problem, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='problemfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='problemfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProblemFeed'
        verbose_name = 'Problem Feed'
        verbose_name_plural = 'Problem Feed'
        # keyPrefix = None



class ProblemHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    problem = models.ForeignKey(Problem, models.DO_NOTHING, db_column='ProblemId', verbose_name='Problem ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Category', 'Category'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('Impact', 'Impact'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentProblem', 'Parent Problem'), ('Priority', 'Priority'), ('PriorityOverrideReason', 'Priority Override Reason'), ('Owner', 'Problem Owner'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedItemAutonumberMaster', 'Related Item Autonumber Master'), ('ResolutionDateTime', 'Resolution Date'), ('ResolutionSummary', 'Resolution Summary'), ('ResolvedBy', 'Resolved By'), ('RootCauseSummary', 'Root Cause Summary'), ('Status', 'Status'), ('SubCategory', 'Sub-Category'), ('Subject', 'Subject'), ('Urgency', 'Urgency')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProblemHistory'
        verbose_name = 'Problem  History'
        verbose_name_plural = 'Problem  History'
        # keyPrefix = None



class ProblemIncident(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Related Problem and Incident Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='problemincident_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='problemincident_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    issue = models.ForeignKey(Incident, models.DO_NOTHING, db_column='IssueId', related_name='problemincident_issue_set', verbose_name='Issue ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Incident, Problem] Master Detail Relationship *
    related_issue = models.ForeignKey(Incident, models.DO_NOTHING, db_column='RelatedIssueId', related_name='problemincident_relatedissue_set', verbose_name='Related Issue ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Incident, Problem] Master Detail Relationship *
    related_entity_type = models.CharField(db_column='RelatedEntityType', max_length=255, verbose_name='Related Issue Type', sf_read_only=models.READ_ONLY, choices=[('Incident', 'Incident'), ('Problem', 'Problem')])
    relationship_type = models.CharField(db_column='RelationshipType', max_length=40, default='Caused By', choices=[('Caused By', 'Caused By'), ('Similar', 'Similar')])
    class Meta(models.Model.Meta):
        db_table = 'ProblemIncident'
        verbose_name = 'Related Problem and Incident'
        verbose_name_plural = 'Related Problems and Incidents'
        # keyPrefix = '0oE'



class ProblemIncidentFeed(models.Model):
    parent = models.ForeignKey(ProblemIncident, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='problemincidentfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='problemincidentfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProblemIncidentFeed'
        verbose_name = 'Related Problem and Incident Feed'
        verbose_name_plural = 'Related Problem and Incident Feed'
        # keyPrefix = None



class ProblemIncidentHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    problem_incident = models.ForeignKey(ProblemIncident, models.DO_NOTHING, db_column='ProblemIncidentId', verbose_name='Related Problem and Incident ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Issue', 'Issue'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedIssue', 'Related Issue'), ('RelatedEntityType', 'Related Issue Type'), ('Name', 'Related Problem and Incident Number'), ('RelationshipType', 'Relationship Type'), ('UniqueProblemIncidentKey', 'Unique Key')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProblemIncidentHistory'
        verbose_name = 'Problem Incident History'
        verbose_name_plural = 'Problem Incident History'
        # keyPrefix = None



class ProblemRelatedItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Problem Related Item Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='problemrelateditem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='problemrelateditem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    problem = models.ForeignKey(Problem, models.DO_NOTHING, db_column='ProblemId', verbose_name='Problem ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    impact_type = models.CharField(db_column='ImpactType', max_length=40, default='Business-Blocking', choices=[('Business-Blocking', 'Business-Blocking'), ('Partially Business-Blocking', 'Partially Business-Blocking'), ('Not Business-Blocking', 'Not Business-Blocking')])
    impact_level = models.CharField(db_column='ImpactLevel', max_length=40, default='High', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True)
    comment = models.TextField(db_column='Comment', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProblemRelatedItem'
        verbose_name = 'Problem Related Item'
        verbose_name_plural = 'Problem Related Items'
        # keyPrefix = '0tB'



class ProblemRelatedItemFeed(models.Model):
    parent = models.ForeignKey(ProblemRelatedItem, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='problemrelateditemfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='problemrelateditemfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProblemRelatedItemFeed'
        verbose_name = 'Problem Related Item Feed'
        verbose_name_plural = 'Problem Related Item Feed'
        # keyPrefix = None



class ProblemRelatedItemHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    problem_related_item = models.ForeignKey(ProblemRelatedItem, models.DO_NOTHING, db_column='ProblemRelatedItemId', verbose_name='Problem Related Item ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Asset', 'Asset'), ('Comment', 'Comment'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('ImpactLevel', 'Impact Level'), ('ImpactType', 'Impact Type'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Problem', 'Problem'), ('Name', 'Problem Related Item Number'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProblemRelatedItemHistory'
        verbose_name = 'Problem Related Item History'
        verbose_name_plural = 'Problem Related Item History'
        # keyPrefix = None



class ProblemShare(models.Model):
    parent = models.ForeignKey(Problem, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ProblemShare'
        verbose_name = 'Problem Share'
        verbose_name_plural = 'Problem Share'
        # keyPrefix = None



class ProcessException(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    process_exception_number = models.CharField(db_column='ProcessExceptionNumber', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='processexception_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='processexception_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    attached_to = models.ForeignKey(ActiveCampCxaUsage, models.DO_NOTHING, db_column='AttachedToId', verbose_name='Attached To ID')  # Reference to tables [ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, In_App_Checklist_Settings__c, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Order, OrderItem, Product_Category_Info__c, Product_Category__c, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    message = models.CharField(db_column='Message', max_length=255)
    status_category = models.CharField(db_column='StatusCategory', max_length=255, sf_read_only=models.READ_ONLY, choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('RESOLVED', 'Resolved')])
    status = models.CharField(db_column='Status', max_length=40, default='New', choices=[('New', 'New'), ('Triaged', 'Triaged'), ('Paused', 'Paused'), ('Ignored', 'Ignored'), ('Resolved', 'Resolved'), ('Voided', 'Voided')])
    category = models.CharField(db_column='Category', max_length=40, default='Order Activation', choices=[('Order Activation', 'Order Activation'), ('Order Approval', 'Order Approval'), ('Fulfillment', 'Fulfillment'), ('Payment', 'Payment'), ('Invoicing', 'Invoicing')], blank=True, null=True)
    severity = models.CharField(db_column='Severity', max_length=40, default='High', choices=[('High', 'High'), ('Low', 'Low')], blank=True, null=True)
    priority = models.CharField(db_column='Priority', max_length=40, default='Low', choices=[('High', 'High'), ('Low', 'Low')], blank=True, null=True)
    case = models.ForeignKey(Case, models.DO_NOTHING, db_column='CaseId', verbose_name='Case ID', blank=True, null=True)
    external_reference = models.CharField(db_column='ExternalReference', max_length=255, blank=True, null=True)
    severity_category = models.CharField(db_column='SeverityCategory', max_length=255, sf_read_only=models.READ_ONLY, choices=[('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low')], blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProcessException'
        verbose_name = 'Process Exception'
        verbose_name_plural = 'Process Exceptions'
        # keyPrefix = '2Pe'

# Unable to inspect table 'ProcessExceptionEvent'
# The error was: Table 'ProcessExceptionEvent' must contain one field with name 'Id'


class ProcessExceptionShare(models.Model):
    parent = models.ForeignKey(ProcessException, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ProcessExceptionShare'
        verbose_name = 'Process Exception Share'
        verbose_name_plural = 'Process Exception Share'
        # keyPrefix = None



class Product2(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Product Name')
    product_code = models.CharField(db_column='ProductCode', max_length=255, blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Product Description', blank=True, null=True)
    quantity_schedule_type = models.CharField(db_column='QuantityScheduleType', max_length=40, choices=[('Divide', 'Divide Amount into multiple installments'), ('Repeat', 'Repeat Amount for each installment')], blank=True, null=True)
    quantity_installment_period = models.CharField(db_column='QuantityInstallmentPeriod', max_length=40, choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], blank=True, null=True)
    number_of_quantity_installments = models.IntegerField(db_column='NumberOfQuantityInstallments', blank=True, null=True)
    revenue_schedule_type = models.CharField(db_column='RevenueScheduleType', max_length=40, choices=[('Divide', 'Divide Amount into multiple installments'), ('Repeat', 'Repeat Amount for each installment')], blank=True, null=True)
    revenue_installment_period = models.CharField(db_column='RevenueInstallmentPeriod', max_length=40, choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], blank=True, null=True)
    number_of_revenue_installments = models.IntegerField(db_column='NumberOfRevenueInstallments', blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='product2_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='product2_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    family = models.CharField(db_column='Family', max_length=255, verbose_name='Product Family', choices=[('Junk', 'Junk'), ('Business Dumpster', 'Business Dumpster'), ('Large Dumpster', 'Large Dumpster'), ('Apartment Services', 'Apartment Services')], blank=True, null=True)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, db_column='ExternalDataSourceId', verbose_name='External Data Source ID', blank=True, null=True)
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='External ID', blank=True, null=True)
    display_url = models.URLField(db_column='DisplayUrl', verbose_name='Display URL', blank=True, null=True)
    quantity_unit_of_measure = models.CharField(db_column='QuantityUnitOfMeasure', max_length=255, choices=[('Each', 'Each')], blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_archived = models.BooleanField(db_column='IsArchived', verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stock_keeping_unit = models.CharField(db_column='StockKeepingUnit', max_length=180, verbose_name='Product SKU', blank=True, null=True)
    load_type = models.CharField(db_column='Load_Type__c', max_length=255, verbose_name='Load Type', choices=[('Front load', 'Front load'), ('Rear load', 'Rear load'), ('Side load', 'Side load'), ('Hook lift', 'Hook lift'), ('Cable hoist', 'Cable hoist'), ('Other', 'Other')], blank=True, null=True)
    material_stream = models.CharField(db_column='Material_Stream__c', max_length=255, verbose_name='Material Stream', choices=[('Cardboard', 'Cardboard'), ('Compost', 'Compost'), ('Construction', 'Construction'), ('Other', 'Other'), ('Single Stream Recycling', 'Single Stream Recycling'), ('Waste', 'Waste')], blank=True, null=True)
    recurring_frequency = models.CharField(db_column='Recurring_Frequency__c', max_length=255, verbose_name='Recurring Frequency', choices=[('Every 4 weeks', 'Every 4 weeks'), ('Every 2 weeks', 'Every 2 weeks'), ('1x per week', '1x per week'), ('2x per week', '2x per week'), ('3x per week', '3x per week'), ('4x per week', '4x per week'), ('5x per week', '5x per week'), ('6x per week', '6x per week')], blank=True, null=True)
    on_demand = models.BooleanField(db_column='On_Demand__c', verbose_name='On-Demand', default=False)
    service_provider = models.ForeignKey(Account, models.DO_NOTHING, db_column='Service_Provider__c', verbose_name='Service Provider', blank=True, null=True)
    city = models.CharField(db_column='City__c', max_length=255, choices=[('Denver', 'Denver')], blank=True, null=True)
    status = models.CharField(db_column='Status__c', max_length=255, default='Incomplete', choices=[('Incomplete', 'Incomplete'), ('Ready for Review', 'Ready for Review'), ('Under Review', 'Under Review'), ('Rejected', 'Rejected'), ('Approved', 'Approved')], blank=True, null=True)
    is_master = models.BooleanField(db_column='IsMaster__c', verbose_name='IsMaster', default=False)
    main_product_frequency = models.ForeignKey(MainProductFrequency, models.DO_NOTHING, db_column='Main_Product_Frequency__c', verbose_name='Main Product Frequency', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2'
        verbose_name = 'Product'
        verbose_name_plural = 'Products'
        # keyPrefix = '01t'



class Product2Feed(models.Model):
    parent = models.ForeignKey(Product2, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='product2feed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='product2feed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2Feed'
        verbose_name = 'Product Feed'
        verbose_name_plural = 'Product Feed'
        # keyPrefix = None



class Product2History(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('City__c', 'City'), ('created', 'Created.'), ('DisplayUrl', 'Display URL'), ('ExternalDataSource', 'External Data Source'), ('ExternalId', 'External ID'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('IsMaster__c', 'IsMaster'), ('Load_Type__c', 'Load Type'), ('Main_Product_Frequency__c', 'Main Product Frequency'), ('Material_Stream__c', 'Material Stream'), ('NumberOfQuantityInstallments', 'Number Of Quantity Installments'), ('NumberOfRevenueInstallments', 'Number Of Revenue Installments'), ('On_Demand__c', 'On-Demand'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ProductCode', 'Product Code'), ('Description', 'Product Description'), ('Family', 'Product Family'), ('Name', 'Product Name'), ('StockKeepingUnit', 'Product SKU'), ('QuantityInstallmentPeriod', 'Quantity Installment Period'), ('QuantityScheduleType', 'Quantity Schedule Type'), ('CanUseQuantitySchedule', 'Quantity Scheduling Enabled'), ('QuantityUnitOfMeasure', 'Quantity Unit Of Measure'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Recurring_Frequency__c', 'Recurring Frequency'), ('RevenueInstallmentPeriod', 'Revenue Installment Period'), ('RevenueScheduleType', 'Revenue Schedule Type'), ('CanUseRevenueSchedule', 'Revenue Scheduling Enabled'), ('Service_Provider__c', 'Service Provider'), ('Status__c', 'Status')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2History'
        verbose_name = 'Product History'
        verbose_name_plural = 'Product History'
        # keyPrefix = None



class ProductEntitlementTemplate(models.Model):
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', sf_read_only=models.NOT_UPDATEABLE)
    entitlement_template = models.ForeignKey(EntitlementTemplate, models.DO_NOTHING, db_column='EntitlementTemplateId', verbose_name='Entitlement Template ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProductEntitlementTemplate'
        verbose_name = 'Product Entitlement Template'
        verbose_name_plural = 'Product Entitlement Template'
        # keyPrefix = '0E9'



class ProductCategoryInfoShare(models.Model):
    parent = models.ForeignKey('ProductCategoryInfo', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Product_Category_Info__Share'
        verbose_name = 'Share: Product Category Info'
        verbose_name_plural = 'Share: Product Category Info'
        # keyPrefix = None



class ProductCategoryInfo(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Product Category Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='productcategoryinfo_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='productcategoryinfo_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product_category = models.ForeignKey('ProductCategory', models.DO_NOTHING, db_column='Product_Category__c', verbose_name='Product Category', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product_Category_Info__c'
        verbose_name = 'Product Category Info'
        verbose_name_plural = 'Product Category Infos'
        # keyPrefix = 'a0N'



class ProductCategoryShare(models.Model):
    parent = models.ForeignKey('ProductCategory', models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, default='Manual', choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Product_Category__Share'
        verbose_name = 'Share: Product Category'
        verbose_name_plural = 'Share: Product Category'
        # keyPrefix = None



class ProductCategory(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Product Category Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='productcategory_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='productcategory_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description__c', max_length=100, blank=True, null=True)
    image = models.URLField(db_column='Image__c', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product_Category__c'
        verbose_name = 'Product Category'
        verbose_name_plural = 'Product Categories'
        # keyPrefix = 'a0K'



class Profile(models.Model):
    name = models.CharField(db_column='Name', max_length=255)
    permissions_email_single = models.BooleanField(db_column='PermissionsEmailSingle', verbose_name='Send Email')
    permissions_email_mass = models.BooleanField(db_column='PermissionsEmailMass', verbose_name='Mass Email')
    permissions_edit_task = models.BooleanField(db_column='PermissionsEditTask', verbose_name='Edit Tasks')
    permissions_edit_event = models.BooleanField(db_column='PermissionsEditEvent', verbose_name='Edit Events')
    permissions_export_report = models.BooleanField(db_column='PermissionsExportReport', verbose_name='Export Reports')
    permissions_import_personal = models.BooleanField(db_column='PermissionsImportPersonal', verbose_name='Import Personal Contacts')
    permissions_data_export = models.BooleanField(db_column='PermissionsDataExport', verbose_name='Weekly Data Export')
    permissions_manage_users = models.BooleanField(db_column='PermissionsManageUsers', verbose_name='Manage Users')
    permissions_edit_public_filters = models.BooleanField(db_column='PermissionsEditPublicFilters', verbose_name='Manage Public List Views')
    permissions_edit_public_templates = models.BooleanField(db_column='PermissionsEditPublicTemplates', verbose_name='Manage Public Classic Email Templates')
    permissions_modify_all_data = models.BooleanField(db_column='PermissionsModifyAllData', verbose_name='Modify All Data')
    permissions_manage_cases = models.BooleanField(db_column='PermissionsManageCases', verbose_name='Manage Cases')
    permissions_mass_inline_edit = models.BooleanField(db_column='PermissionsMassInlineEdit', verbose_name='Mass Edits from Lists')
    permissions_manage_solutions = models.BooleanField(db_column='PermissionsManageSolutions', verbose_name='Manage Published Solutions')
    permissions_customize_application = models.BooleanField(db_column='PermissionsCustomizeApplication', verbose_name='Customize Application')
    permissions_edit_readonly_fields = models.BooleanField(db_column='PermissionsEditReadonlyFields', verbose_name='Edit Read Only Fields')
    permissions_run_reports = models.BooleanField(db_column='PermissionsRunReports', verbose_name='Run Reports')
    permissions_view_setup = models.BooleanField(db_column='PermissionsViewSetup', verbose_name='View Setup and Configuration')
    permissions_transfer_any_entity = models.BooleanField(db_column='PermissionsTransferAnyEntity', verbose_name='Transfer Record')
    permissions_new_report_builder = models.BooleanField(db_column='PermissionsNewReportBuilder', verbose_name='Report Builder')
    permissions_activate_contract = models.BooleanField(db_column='PermissionsActivateContract', verbose_name='Activate Contracts')
    permissions_activate_order = models.BooleanField(db_column='PermissionsActivateOrder', verbose_name='Activate Orders')
    permissions_import_leads = models.BooleanField(db_column='PermissionsImportLeads', verbose_name='Import Leads')
    permissions_manage_leads = models.BooleanField(db_column='PermissionsManageLeads', verbose_name='Manage Leads')
    permissions_transfer_any_lead = models.BooleanField(db_column='PermissionsTransferAnyLead', verbose_name='Transfer Leads')
    permissions_view_all_data = models.BooleanField(db_column='PermissionsViewAllData', verbose_name='View All Data')
    permissions_edit_public_documents = models.BooleanField(db_column='PermissionsEditPublicDocuments', verbose_name='Manage Public Documents')
    permissions_view_encrypted_data = models.BooleanField(db_column='PermissionsViewEncryptedData', verbose_name='View Encrypted Data')
    permissions_edit_brand_templates = models.BooleanField(db_column='PermissionsEditBrandTemplates', verbose_name='Manage Letterheads')
    permissions_edit_html_templates = models.BooleanField(db_column='PermissionsEditHtmlTemplates', verbose_name='Edit HTML Templates')
    permissions_chatter_internal_user = models.BooleanField(db_column='PermissionsChatterInternalUser', verbose_name='Chatter Internal User')
    permissions_delete_activated_contract = models.BooleanField(db_column='PermissionsDeleteActivatedContract', verbose_name='Delete Activated Contracts')
    permissions_chatter_invite_external_users = models.BooleanField(db_column='PermissionsChatterInviteExternalUsers', verbose_name='Invite Customers To Chatter')
    permissions_send_sit_requests = models.BooleanField(db_column='PermissionsSendSitRequests', verbose_name='Send Stay-in-Touch Requests')
    permissions_override_forecasts = models.BooleanField(db_column='PermissionsOverrideForecasts', verbose_name='Override Forecasts')
    permissions_view_all_forecasts = models.BooleanField(db_column='PermissionsViewAllForecasts', verbose_name='View All Forecasts')
    permissions_manage_remote_access = models.BooleanField(db_column='PermissionsManageRemoteAccess', verbose_name='Manage Connected Apps')
    permissions_can_use_new_dashboard_builder = models.BooleanField(db_column='PermissionsCanUseNewDashboardBuilder', verbose_name='Drag-and-Drop Dashboard Builder')
    permissions_manage_categories = models.BooleanField(db_column='PermissionsManageCategories', verbose_name='Manage Categories')
    permissions_convert_leads = models.BooleanField(db_column='PermissionsConvertLeads', verbose_name='Convert Leads')
    permissions_password_never_expires = models.BooleanField(db_column='PermissionsPasswordNeverExpires', verbose_name='Password Never Expires')
    permissions_edit_activated_orders = models.BooleanField(db_column='PermissionsEditActivatedOrders', verbose_name='Edit Activated Orders')
    permissions_install_multiforce = models.BooleanField(db_column='PermissionsInstallMultiforce', verbose_name='Download AppExchange Packages')
    permissions_publish_multiforce = models.BooleanField(db_column='PermissionsPublishMultiforce', verbose_name='Upload AppExchange Packages')
    permissions_chatter_own_groups = models.BooleanField(db_column='PermissionsChatterOwnGroups', verbose_name='Create and Own New Chatter Groups')
    permissions_edit_opp_line_item_unit_price = models.BooleanField(db_column='PermissionsEditOppLineItemUnitPrice', verbose_name='Edit Opportunity Product Sales Price')
    permissions_create_multiforce = models.BooleanField(db_column='PermissionsCreateMultiforce', verbose_name='Create AppExchange Packages')
    permissions_bulk_api_hard_delete = models.BooleanField(db_column='PermissionsBulkApiHardDelete', verbose_name='Bulk API Hard Delete')
    permissions_inbound_migration_tools_user = models.BooleanField(db_column='PermissionsInboundMigrationToolsUser', verbose_name='Deploy Change Sets')
    permissions_solution_import = models.BooleanField(db_column='PermissionsSolutionImport', verbose_name='Import Solutions')
    permissions_manage_call_centers = models.BooleanField(db_column='PermissionsManageCallCenters', verbose_name='Manage Call Centers')
    permissions_manage_synonyms = models.BooleanField(db_column='PermissionsManageSynonyms', verbose_name='Manage Synonyms')
    permissions_outbound_migration_tools_user = models.BooleanField(db_column='PermissionsOutboundMigrationToolsUser', verbose_name='Create and Upload Change Sets')
    permissions_view_content = models.BooleanField(db_column='PermissionsViewContent', verbose_name='View Content in Portals')
    permissions_manage_email_client_config = models.BooleanField(db_column='PermissionsManageEmailClientConfig', verbose_name='Manage Email Client Configurations')
    permissions_enable_notifications = models.BooleanField(db_column='PermissionsEnableNotifications', verbose_name='Send Outbound Messages')
    permissions_manage_data_integrations = models.BooleanField(db_column='PermissionsManageDataIntegrations', verbose_name='Manage Data Integrations')
    permissions_distribute_from_pers_wksp = models.BooleanField(db_column='PermissionsDistributeFromPersWksp', verbose_name='Create Content Deliveries')
    permissions_manage_mobile = models.BooleanField(db_column='PermissionsManageMobile', verbose_name='Manage Mobile Configurations')
    permissions_api_enabled = models.BooleanField(db_column='PermissionsApiEnabled', verbose_name='API Enabled')
    permissions_manage_custom_report_types = models.BooleanField(db_column='PermissionsManageCustomReportTypes', verbose_name='Manage Custom Report Types')
    permissions_edit_case_comments = models.BooleanField(db_column='PermissionsEditCaseComments', verbose_name='Edit Case Comments')
    permissions_transfer_any_case = models.BooleanField(db_column='PermissionsTransferAnyCase', verbose_name='Transfer Cases')
    permissions_content_administrator = models.BooleanField(db_column='PermissionsContentAdministrator', verbose_name='Manage Salesforce CRM Content')
    permissions_create_workspaces = models.BooleanField(db_column='PermissionsCreateWorkspaces', verbose_name='Create Libraries')
    permissions_manage_content_permissions = models.BooleanField(db_column='PermissionsManageContentPermissions', verbose_name='Manage Content Permissions')
    permissions_manage_content_properties = models.BooleanField(db_column='PermissionsManageContentProperties', verbose_name='Manage Content Properties')
    permissions_manage_content_types = models.BooleanField(db_column='PermissionsManageContentTypes', verbose_name='Manage record types and layouts for Files')
    permissions_manage_exchange_config = models.BooleanField(db_column='PermissionsManageExchangeConfig', verbose_name='Manage Lightning Sync')
    permissions_manage_analytic_snapshots = models.BooleanField(db_column='PermissionsManageAnalyticSnapshots', verbose_name='Manage Reporting Snapshots')
    permissions_schedule_reports = models.BooleanField(db_column='PermissionsScheduleReports', verbose_name='Schedule Reports')
    permissions_manage_business_hour_holidays = models.BooleanField(db_column='PermissionsManageBusinessHourHolidays', verbose_name='Manage Business Hours Holidays')
    permissions_manage_entitlements = models.BooleanField(db_column='PermissionsManageEntitlements', verbose_name='Manage Entitlements')
    permissions_custom_sidebar_on_all_pages = models.BooleanField(db_column='PermissionsCustomSidebarOnAllPages', verbose_name='Show Custom Sidebar On All Pages')
    permissions_manage_interaction = models.BooleanField(db_column='PermissionsManageInteraction', verbose_name='Manage Flow')
    permissions_view_my_teams_dashboards = models.BooleanField(db_column='PermissionsViewMyTeamsDashboards', verbose_name="View My Team's Dashboards")
    permissions_moderate_chatter = models.BooleanField(db_column='PermissionsModerateChatter', verbose_name='Moderate Chatter')
    permissions_reset_passwords = models.BooleanField(db_column='PermissionsResetPasswords', verbose_name='Reset User Passwords and Unlock Users')
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License')
    permissions_can_insert_feed_system_fields = models.BooleanField(db_column='PermissionsCanInsertFeedSystemFields', verbose_name='Insert System Field Values for Chatter Feeds')
    permissions_activities_access = models.BooleanField(db_column='PermissionsActivitiesAccess', verbose_name='Access Activities')
    permissions_email_template_management = models.BooleanField(db_column='PermissionsEmailTemplateManagement', verbose_name='Manage Email Templates')
    permissions_email_administration = models.BooleanField(db_column='PermissionsEmailAdministration', verbose_name='Email Administration')
    permissions_manage_chatter_messages = models.BooleanField(db_column='PermissionsManageChatterMessages', verbose_name='Manage Chatter Messages and Direct Messages')
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option')
    permissions_chatter_file_link = models.BooleanField(db_column='PermissionsChatterFileLink', verbose_name='Create Public Links')
    permissions_force_two_factor = models.BooleanField(db_column='PermissionsForceTwoFactor', verbose_name='Multi-Factor Authentication for User Interface Logins')
    permissions_view_case_interaction = models.BooleanField(db_column='PermissionsViewCaseInteraction', verbose_name='Use Case Feed')
    permissions_manage_auth_providers = models.BooleanField(db_column='PermissionsManageAuthProviders', verbose_name='Manage Auth. Providers')
    permissions_run_flow = models.BooleanField(db_column='PermissionsRunFlow', verbose_name='Run Flows')
    permissions_manage_quotas = models.BooleanField(db_column='PermissionsManageQuotas', verbose_name='Manage Quotas')
    permissions_create_customize_dashboards = models.BooleanField(db_column='PermissionsCreateCustomizeDashboards', verbose_name='Create and Customize Dashboards')
    permissions_create_dashboard_folders = models.BooleanField(db_column='PermissionsCreateDashboardFolders', verbose_name='Create Dashboard Folders')
    permissions_view_public_dashboards = models.BooleanField(db_column='PermissionsViewPublicDashboards', verbose_name='View Dashboards in Public Folders')
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(db_column='PermissionsManageDashbdsInPubFolders', verbose_name='Manage Dashboards in Public Folders')
    permissions_create_customize_reports = models.BooleanField(db_column='PermissionsCreateCustomizeReports', verbose_name='Create and Customize Reports')
    permissions_create_report_folders = models.BooleanField(db_column='PermissionsCreateReportFolders', verbose_name='Create Report Folders')
    permissions_view_public_reports = models.BooleanField(db_column='PermissionsViewPublicReports', verbose_name='View Reports in Public Folders')
    permissions_manage_reports_in_pub_folders = models.BooleanField(db_column='PermissionsManageReportsInPubFolders', verbose_name='Manage Reports in Public Folders')
    permissions_edit_my_dashboards = models.BooleanField(db_column='PermissionsEditMyDashboards', verbose_name='Edit My Dashboards')
    permissions_edit_my_reports = models.BooleanField(db_column='PermissionsEditMyReports', verbose_name='Edit My Reports')
    permissions_view_all_users = models.BooleanField(db_column='PermissionsViewAllUsers', verbose_name='View All Users')
    permissions_bypass_email_approval = models.BooleanField(db_column='PermissionsBypassEmailApproval', verbose_name='Bypass Email Approval')
    permissions_connect_org_to_environment_hub = models.BooleanField(db_column='PermissionsConnectOrgToEnvironmentHub', verbose_name='Connect Organization to Environment Hub')
    permissions_create_customize_filters = models.BooleanField(db_column='PermissionsCreateCustomizeFilters', verbose_name='Create and Customize List Views')
    permissions_content_hub_user = models.BooleanField(db_column='PermissionsContentHubUser', verbose_name='Files Connect Cloud')
    permissions_sales_console = models.BooleanField(db_column='PermissionsSalesConsole', verbose_name='Sales Console')
    permissions_two_factor_api = models.BooleanField(db_column='PermissionsTwoFactorApi', verbose_name='Multi-Factor Authentication for API Logins')
    permissions_delete_topics = models.BooleanField(db_column='PermissionsDeleteTopics', verbose_name='Delete Topics')
    permissions_edit_topics = models.BooleanField(db_column='PermissionsEditTopics', verbose_name='Edit Topics')
    permissions_create_topics = models.BooleanField(db_column='PermissionsCreateTopics', verbose_name='Create Topics')
    permissions_assign_topics = models.BooleanField(db_column='PermissionsAssignTopics', verbose_name='Assign Topics')
    permissions_identity_enabled = models.BooleanField(db_column='PermissionsIdentityEnabled', verbose_name='Use Identity Features')
    permissions_identity_connect = models.BooleanField(db_column='PermissionsIdentityConnect', verbose_name='Use Identity Connect')
    permissions_content_workspaces = models.BooleanField(db_column='PermissionsContentWorkspaces', verbose_name='Access Libraries')
    permissions_create_work_badge_definition = models.BooleanField(db_column='PermissionsCreateWorkBadgeDefinition', verbose_name='Create custom Badge Definitions')
    permissions_custom_mobile_apps_access = models.BooleanField(db_column='PermissionsCustomMobileAppsAccess', verbose_name='Access Custom Mobile Apps')
    permissions_view_help_link = models.BooleanField(db_column='PermissionsViewHelpLink', verbose_name='View Help Link')
    permissions_manage_profiles_permissionsets = models.BooleanField(db_column='PermissionsManageProfilesPermissionsets', verbose_name='Manage Profiles and Permission Sets')
    permissions_assign_permission_sets = models.BooleanField(db_column='PermissionsAssignPermissionSets', verbose_name='Assign Permission Sets')
    permissions_manage_roles = models.BooleanField(db_column='PermissionsManageRoles', verbose_name='Manage Roles')
    permissions_manage_ip_addresses = models.BooleanField(db_column='PermissionsManageIpAddresses', verbose_name='Manage IP Addresses')
    permissions_manage_sharing = models.BooleanField(db_column='PermissionsManageSharing', verbose_name='Manage Sharing')
    permissions_manage_internal_users = models.BooleanField(db_column='PermissionsManageInternalUsers', verbose_name='Manage Internal Users')
    permissions_manage_password_policies = models.BooleanField(db_column='PermissionsManagePasswordPolicies', verbose_name='Manage Password Policies')
    permissions_manage_login_access_policies = models.BooleanField(db_column='PermissionsManageLoginAccessPolicies', verbose_name='Manage Login Access Policies')
    permissions_can_verify_comment = models.BooleanField(db_column='PermissionsCanVerifyComment', verbose_name='Verify Answers to Chatter Questions')
    permissions_manage_unlisted_groups = models.BooleanField(db_column='PermissionsManageUnlistedGroups', verbose_name='Manage Unlisted Groups')
    permissions_std_automatic_activity_capture = models.BooleanField(db_column='PermissionsStdAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture Standard')
    permissions_insights_app_dashboard_editor = models.BooleanField(db_column='PermissionsInsightsAppDashboardEditor', verbose_name='Create and Edit CRM Analytics Dashboards')
    permissions_manage_two_factor = models.BooleanField(db_column='PermissionsManageTwoFactor', verbose_name='Manage Multi-Factor Authentication in API')
    permissions_insights_app_user = models.BooleanField(db_column='PermissionsInsightsAppUser', verbose_name='Use CRM Analytics')
    permissions_insights_app_admin = models.BooleanField(db_column='PermissionsInsightsAppAdmin', verbose_name='Manage CRM Analytics')
    permissions_insights_app_elt_editor = models.BooleanField(db_column='PermissionsInsightsAppEltEditor', verbose_name='Edit CRM Analytics Dataflows')
    permissions_insights_app_upload_user = models.BooleanField(db_column='PermissionsInsightsAppUploadUser', verbose_name='Upload External Data to CRM Analytics')
    permissions_insights_create_application = models.BooleanField(db_column='PermissionsInsightsCreateApplication', verbose_name='Create CRM Analytics Apps')
    permissions_lightning_experience_user = models.BooleanField(db_column='PermissionsLightningExperienceUser', verbose_name='Lightning Experience User')
    permissions_config_custom_recs = models.BooleanField(db_column='PermissionsConfigCustomRecs', verbose_name='Configure Custom Recommendations')
    permissions_submit_macros_allowed = models.BooleanField(db_column='PermissionsSubmitMacrosAllowed', verbose_name="Manage Macros Users Can't Undo")
    permissions_bulk_macros_allowed = models.BooleanField(db_column='PermissionsBulkMacrosAllowed', verbose_name='Run Macros on Multiple Records')
    permissions_public_twitter_response = models.BooleanField(db_column='PermissionsPublicTwitterResponse', verbose_name='Public Twitter Response')
    permissions_manage_session_permission_sets = models.BooleanField(db_column='PermissionsManageSessionPermissionSets', verbose_name='Manage Session Permission Set Activations')
    permissions_manage_templated_app = models.BooleanField(db_column='PermissionsManageTemplatedApp', verbose_name='Manage CRM Analytics Templated Apps')
    permissions_use_templated_app = models.BooleanField(db_column='PermissionsUseTemplatedApp', verbose_name='Use CRM Analytics Templated Apps')
    permissions_send_announcement_emails = models.BooleanField(db_column='PermissionsSendAnnouncementEmails', verbose_name='Send announcement emails')
    permissions_chatter_edit_own_post = models.BooleanField(db_column='PermissionsChatterEditOwnPost', verbose_name='Edit My Own Posts')
    permissions_chatter_edit_own_record_post = models.BooleanField(db_column='PermissionsChatterEditOwnRecordPost', verbose_name='Edit Posts on Records I Own')
    permissions_wave_tabular_download = models.BooleanField(db_column='PermissionsWaveTabularDownload', verbose_name='Download CRM Analytics Data')
    permissions_manage_sandboxes = models.BooleanField(db_column='PermissionsManageSandboxes', verbose_name='Manage Sandboxes')
    permissions_automatic_activity_capture = models.BooleanField(db_column='PermissionsAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture')
    permissions_import_custom_objects = models.BooleanField(db_column='PermissionsImportCustomObjects', verbose_name='Import Custom Objects')
    permissions_delegated_two_factor = models.BooleanField(db_column='PermissionsDelegatedTwoFactor', verbose_name='Manage Multi-Factor Authentication in User Interface')
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(db_column='PermissionsChatterComposeUiCodesnippet', verbose_name='Allow Inclusion of Code Snippets from UI')
    permissions_select_files_from_salesforce = models.BooleanField(db_column='PermissionsSelectFilesFromSalesforce', verbose_name='Select Files from Salesforce')
    permissions_voice_outbound = models.BooleanField(db_column='PermissionsVoiceOutbound', verbose_name='Access Dialer Outbound Calls')
    permissions_voice_inbound = models.BooleanField(db_column='PermissionsVoiceInbound', verbose_name='Access Dialer Inbound Calls')
    permissions_voice_minutes = models.BooleanField(db_column='PermissionsVoiceMinutes', verbose_name='Access Dialer Minutes')
    permissions_voice_coach = models.BooleanField(db_column='PermissionsVoiceCoach', verbose_name='Access Dialer Monitoring')
    permissions_merge_topics = models.BooleanField(db_column='PermissionsMergeTopics', verbose_name='Merge Topics')
    permissions_edit_iqfields = models.BooleanField(db_column='PermissionsEditIQFields', verbose_name='Update Activity Metrics Data')
    permissions_subscribe_to_lightning_reports = models.BooleanField(db_column='PermissionsSubscribeToLightningReports', verbose_name='Subscribe to Reports')
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(db_column='PermissionsManagePvtRptsAndDashbds', verbose_name='Manage All Private Reports and Dashboards')
    permissions_allow_lightning_login = models.BooleanField(db_column='PermissionsAllowLightningLogin', verbose_name='Lightning Login User')
    permissions_campaign_influence2 = models.BooleanField(db_column='PermissionsCampaignInfluence2', verbose_name='Campaign Influence')
    permissions_view_data_assessment = models.BooleanField(db_column='PermissionsViewDataAssessment', verbose_name='Access to view Data Assessment')
    permissions_remove_direct_message_members = models.BooleanField(db_column='PermissionsRemoveDirectMessageMembers', verbose_name='Remove People from Direct Messages')
    permissions_can_approve_feed_post = models.BooleanField(db_column='PermissionsCanApproveFeedPost', verbose_name='Can Approve Feed Post and Comment')
    permissions_add_direct_message_members = models.BooleanField(db_column='PermissionsAddDirectMessageMembers', verbose_name='Add People to Direct Messages')
    permissions_allow_view_edit_converted_leads = models.BooleanField(db_column='PermissionsAllowViewEditConvertedLeads', verbose_name='View and Edit Converted Leads')
    permissions_social_insights_logo_admin = models.BooleanField(db_column='PermissionsSocialInsightsLogoAdmin', verbose_name='Remove Logos from Accounts')
    permissions_show_company_name_as_user_badge = models.BooleanField(db_column='PermissionsShowCompanyNameAsUserBadge', verbose_name='Show Company Name as Site Role')
    permissions_view_health_check = models.BooleanField(db_column='PermissionsViewHealthCheck', verbose_name='View Health Check')
    permissions_manage_health_check = models.BooleanField(db_column='PermissionsManageHealthCheck', verbose_name='Manage Health Check')
    permissions_packaging2 = models.BooleanField(db_column='PermissionsPackaging2', verbose_name='Create and Update Second-Generation Packages')
    permissions_manage_certificates = models.BooleanField(db_column='PermissionsManageCertificates', verbose_name='Manage Certificates')
    permissions_create_report_in_lightning = models.BooleanField(db_column='PermissionsCreateReportInLightning', verbose_name='Report Builder (Lightning Experience)')
    permissions_prevent_classic_experience = models.BooleanField(db_column='PermissionsPreventClassicExperience', verbose_name='Hide Option to Switch to Salesforce Classic')
    permissions_hide_read_by_list = models.BooleanField(db_column='PermissionsHideReadByList', verbose_name='Hide the Seen By List')
    permissions_list_email_send = models.BooleanField(db_column='PermissionsListEmailSend', verbose_name='Allow sending of List Emails')
    permissions_feed_pinning = models.BooleanField(db_column='PermissionsFeedPinning', verbose_name='Pin Posts in Feeds')
    permissions_change_dashboard_colors = models.BooleanField(db_column='PermissionsChangeDashboardColors', verbose_name='Change Dashboard Colors')
    permissions_manage_recommendation_strategies = models.BooleanField(db_column='PermissionsManageRecommendationStrategies', verbose_name='Manage Next Best Action Strategies')
    permissions_manage_propositions = models.BooleanField(db_column='PermissionsManagePropositions', verbose_name='Manage Next Best Action Recommendations')
    permissions_close_conversations = models.BooleanField(db_column='PermissionsCloseConversations', verbose_name='Close Conversation Threads')
    permissions_subscribe_report_roles_grps = models.BooleanField(db_column='PermissionsSubscribeReportRolesGrps', verbose_name='Subscribe to Reports: Send to Groups and Roles')
    permissions_subscribe_dashboard_roles_grps = models.BooleanField(db_column='PermissionsSubscribeDashboardRolesGrps', verbose_name='Subscribe to Dashboards: Send to Groups and Roles')
    permissions_use_web_link = models.BooleanField(db_column='PermissionsUseWebLink', verbose_name='Allow Access to Customized Actions')
    permissions_edit_asefields = models.BooleanField(db_column='PermissionsEditASEFields', verbose_name='Update One Sync Engine Data')
    permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='PermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions')
    permissions_view_only_embedded_app_user = models.BooleanField(db_column='PermissionsViewOnlyEmbeddedAppUser', verbose_name='Access to View-Only Licensed Templates and Apps')
    permissions_send_external_email_available = models.BooleanField(db_column='PermissionsSendExternalEmailAvailable', verbose_name='Send Email through External Email Service')
    permissions_view_all_activities = models.BooleanField(db_column='PermissionsViewAllActivities', verbose_name='View All Activities')
    permissions_subscribe_report_to_other_users = models.BooleanField(db_column='PermissionsSubscribeReportToOtherUsers', verbose_name='Subscribe to Reports: Add Recipients')
    permissions_lightning_console_allowed_for_user = models.BooleanField(db_column='PermissionsLightningConsoleAllowedForUser', verbose_name='Lightning Console User')
    permissions_subscribe_reports_run_as_user = models.BooleanField(db_column='PermissionsSubscribeReportsRunAsUser', verbose_name='Subscribe to Reports: Set Running User')
    permissions_subscribe_to_lightning_dashboards = models.BooleanField(db_column='PermissionsSubscribeToLightningDashboards', verbose_name='Subscribe to Dashboards')
    permissions_subscribe_dashboard_to_other_users = models.BooleanField(db_column='PermissionsSubscribeDashboardToOtherUsers', verbose_name='Subscribe to Dashboards: Add Recipients')
    permissions_create_ltng_temp_in_pub = models.BooleanField(db_column='PermissionsCreateLtngTempInPub', verbose_name='Manage Public Lightning Email Templates')
    permissions_transactional_email_send = models.BooleanField(db_column='PermissionsTransactionalEmailSend', verbose_name='Send Non-Commercial Email')
    permissions_view_private_static_resources = models.BooleanField(db_column='PermissionsViewPrivateStaticResources', verbose_name='View Private Static Resources')
    permissions_create_ltng_temp_folder = models.BooleanField(db_column='PermissionsCreateLtngTempFolder', verbose_name='Create Folders for Lightning Email Templates')
    permissions_apex_rest_services = models.BooleanField(db_column='PermissionsApexRestServices', verbose_name='Apex REST Services')
    permissions_give_recognition_badge = models.BooleanField(db_column='PermissionsGiveRecognitionBadge', verbose_name='Give Recognition Badges in Experience Builder Sites')
    permissions_use_my_search = models.BooleanField(db_column='PermissionsUseMySearch', verbose_name='Einstein Search')
    permissions_ltng_promo_reserved01_user_perm = models.BooleanField(db_column='PermissionsLtngPromoReserved01UserPerm', verbose_name='Remain in Salesforce Classic')
    permissions_manage_subscriptions = models.BooleanField(db_column='PermissionsManageSubscriptions', verbose_name='Manage CRM Analytics Subscriptions')
    permissions_wave_manage_private_assets_user = models.BooleanField(db_column='PermissionsWaveManagePrivateAssetsUser', verbose_name='Manage CRM Analytics Private Assets')
    permissions_can_edit_data_prep_recipe = models.BooleanField(db_column='PermissionsCanEditDataPrepRecipe', verbose_name='Edit Dataset Recipes')
    permissions_add_analytics_remote_connections = models.BooleanField(db_column='PermissionsAddAnalyticsRemoteConnections', verbose_name='Add CRM Analytics Remote Connections')
    permissions_use_assistant_dialog = models.BooleanField(db_column='PermissionsUseAssistantDialog', verbose_name='Instant Actionable Results')
    permissions_use_query_suggestions = models.BooleanField(db_column='PermissionsUseQuerySuggestions', verbose_name='Natural Language Search')
    permissions_view_roles = models.BooleanField(db_column='PermissionsViewRoles', verbose_name='View Roles and Role Hierarchy')
    permissions_can_manage_maps = models.BooleanField(db_column='PermissionsCanManageMaps', verbose_name='Manage CRM Analytics Custom Maps')
    permissions_lmoutbound_messaging_user_perm = models.BooleanField(db_column='PermissionsLMOutboundMessagingUserPerm', verbose_name='Agent Initiated Outbound Messaging')
    permissions_modify_data_classification = models.BooleanField(db_column='PermissionsModifyDataClassification', verbose_name='Modify Data Classification')
    permissions_privacy_data_access = models.BooleanField(db_column='PermissionsPrivacyDataAccess', verbose_name='Allow user to access privacy data')
    permissions_query_all_files = models.BooleanField(db_column='PermissionsQueryAllFiles', verbose_name='Query All Files')
    permissions_modify_metadata = models.BooleanField(db_column='PermissionsModifyMetadata', verbose_name='Modify Metadata Through Metadata API Functions')
    permissions_manage_cms = models.BooleanField(db_column='PermissionsManageCMS', verbose_name='Create CMS Workspaces and Channels')
    permissions_sandbox_testing_in_community_app = models.BooleanField(db_column='PermissionsSandboxTestingInCommunityApp', verbose_name='Test Sandboxes in Mobile Publisher for Experience Cloud')
    permissions_can_edit_prompts = models.BooleanField(db_column='PermissionsCanEditPrompts', verbose_name='Manage Prompts')
    permissions_view_user_pii = models.BooleanField(db_column='PermissionsViewUserPII', verbose_name='View Concealed Field Data')
    permissions_manage_hub_connections = models.BooleanField(db_column='PermissionsManageHubConnections', verbose_name='Connect Org to Customer 360 Data Manager')
    permissions_b2_bmarketing_analytics_user = models.BooleanField(db_column='PermissionsB2BMarketingAnalyticsUser', verbose_name='Create B2B Marketing Analytics Apps')
    permissions_trace_xds_queries = models.BooleanField(db_column='PermissionsTraceXdsQueries', verbose_name='Access Tracer for External Data Sources')
    permissions_view_all_custom_settings = models.BooleanField(db_column='PermissionsViewAllCustomSettings', verbose_name='View All Custom Settings')
    permissions_view_all_foreign_key_names = models.BooleanField(db_column='PermissionsViewAllForeignKeyNames', verbose_name='View All Lookup Record Names')
    permissions_add_wave_notification_recipients = models.BooleanField(db_column='PermissionsAddWaveNotificationRecipients', verbose_name='Add Recipients to CRM Analytics Notifications')
    permissions_headless_cmsaccess = models.BooleanField(db_column='PermissionsHeadlessCMSAccess', verbose_name='Enable Salesforce CMS Integration')
    permissions_lmend_messaging_session_user_perm = models.BooleanField(db_column='PermissionsLMEndMessagingSessionUserPerm', verbose_name='End Messaging Session')
    permissions_consent_api_update = models.BooleanField(db_column='PermissionsConsentApiUpdate', verbose_name='Update Consent Preferences Using REST API')
    permissions_access_content_builder = models.BooleanField(db_column='PermissionsAccessContentBuilder', verbose_name='Access drag-and-drop content builder')
    permissions_manage_c360_aconnections = models.BooleanField(db_column='PermissionsManageC360AConnections', verbose_name='Connect Org to Salesforce CDP')
    permissions_manage_release_updates = models.BooleanField(db_column='PermissionsManageReleaseUpdates', verbose_name='Manage Release Updates')
    permissions_view_all_profiles = models.BooleanField(db_column='PermissionsViewAllProfiles', verbose_name='View All Profiles')
    permissions_skip_identity_confirmation = models.BooleanField(db_column='PermissionsSkipIdentityConfirmation', verbose_name='Skip Device Activation at Login')
    permissions_learning_manager = models.BooleanField(db_column='PermissionsLearningManager', verbose_name='Manage Learning')
    permissions_send_custom_notifications = models.BooleanField(db_column='PermissionsSendCustomNotifications', verbose_name='Send Custom Notifications')
    permissions_packaging2_delete = models.BooleanField(db_column='PermissionsPackaging2Delete', verbose_name='Delete Second-Generation Packages')
    permissions_manage_learning_reporting = models.BooleanField(db_column='PermissionsManageLearningReporting', verbose_name='Manage Learning Reporting')
    permissions_isotope_cto_cuser = models.BooleanField(db_column='PermissionsIsotopeCToCUser', verbose_name='Salesforce Anywhere Integration Access')
    permissions_isotope_access = models.BooleanField(db_column='PermissionsIsotopeAccess', verbose_name='Salesforce Anywhere on Mobile')
    permissions_isotope_lex = models.BooleanField(db_column='PermissionsIsotopeLEX', verbose_name='Salesforce Anywhere in Lightning Experience')
    permissions_quip_metrics_access = models.BooleanField(db_column='PermissionsQuipMetricsAccess', verbose_name='Quip Metrics')
    permissions_quip_user_engagement_metrics = models.BooleanField(db_column='PermissionsQuipUserEngagementMetrics', verbose_name='Quip User Engagement Metrics')
    permissions_manage_external_connections = models.BooleanField(db_column='PermissionsManageExternalConnections', verbose_name='Allow user to modify Private Connections', sf_read_only=models.READ_ONLY)
    permissions_use_subscription_emails = models.BooleanField(db_column='PermissionsUseSubscriptionEmails', verbose_name='Subscribe to CRM Analytics Assets')
    permissions_native_webview_scrolling = models.BooleanField(db_column='PermissionsNativeWebviewScrolling', verbose_name='Salesforce Mobile App: Native scrolling on webviews')
    permissions_view_developer_name = models.BooleanField(db_column='PermissionsViewDeveloperName', verbose_name='View DeveloperName')
    permissions_bypass_mfafor_ui_logins = models.BooleanField(db_column='PermissionsBypassMFAForUiLogins', verbose_name='Waive Multi-Factor Authentication for Exempt Users')
    permissions_client_secret_rotation = models.BooleanField(db_column='PermissionsClientSecretRotation', verbose_name='Allow consumer key and secret rotation')
    permissions_enable_ipfsupload = models.BooleanField(db_column='PermissionsEnableIPFSUpload', verbose_name='Allow blockchain data upload')
    permissions_enable_bctransaction_polling = models.BooleanField(db_column='PermissionsEnableBCTransactionPolling', verbose_name='Enable blockchain transaction polling API')
    permissions_fscarc_graph_community_user = models.BooleanField(db_column='PermissionsFSCArcGraphCommunityUser', verbose_name='Access Actionable Relationship Center for partner users')
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, db_column='UserLicenseId', verbose_name='User License ID', sf_read_only=models.NOT_UPDATEABLE)
    user_type = models.CharField(db_column='UserType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='profile_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='profile_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Profile'
        verbose_name = 'Profile'
        verbose_name_plural = 'Profile'
        # keyPrefix = '00e'



class ProfileCallLogQuickAction(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='profilecalllogquickaction_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='profilecalllogquickaction_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    profile = models.OneToOneField(Profile, models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ProfileCallLogQuickAction'
        verbose_name = 'Profile Call Log Quick Action'
        verbose_name_plural = 'Profile Call Log Quick Actions'
        # keyPrefix = '0ez'



class ProfileSkill(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=99, verbose_name='Skill Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='profileskill_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='profileskill_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_count = models.IntegerField(db_column='UserCount', verbose_name='People With Skill', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Skill Description', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkill'
        verbose_name = 'Skill'
        verbose_name_plural = 'Skills'
        # keyPrefix = '0Sk'



class ProfileSkillEndorsement(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Endorsement Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Added Date', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='profileskillendorsement_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='profileskillendorsement_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    profile_skill_user = models.ForeignKey('ProfileSkillUser', models.DO_NOTHING, db_column='ProfileSkillUserId', verbose_name='Skill User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='profileskillendorsement_user_set', verbose_name='User ID', blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillEndorsement'
        verbose_name = 'Endorsement'
        verbose_name_plural = 'Endorsements'
        # keyPrefix = '0SE'



class ProfileSkillEndorsementFeed(models.Model):
    parent = models.ForeignKey(ProfileSkillEndorsement, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='profileskillendorsementfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='profileskillendorsementfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillEndorsementFeed'
        verbose_name = 'Endorsement Feed'
        verbose_name_plural = 'Endorsement Feed'
        # keyPrefix = None



class ProfileSkillEndorsementHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    profile_skill_endorsement = models.ForeignKey(ProfileSkillEndorsement, models.DO_NOTHING, db_column='ProfileSkillEndorsementId', verbose_name='Endorsement ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('User', 'Added By'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ProfileSkillUser', 'Skill User')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillEndorsementHistory'
        verbose_name = 'Endorsement History'
        verbose_name_plural = 'Endorsement History'
        # keyPrefix = None



class ProfileSkillFeed(models.Model):
    parent = models.ForeignKey(ProfileSkill, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='profileskillfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='profileskillfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillFeed'
        verbose_name = 'Skill Feed'
        verbose_name_plural = 'Skill Feed'
        # keyPrefix = None



class ProfileSkillHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    profile_skill = models.ForeignKey(ProfileSkill, models.DO_NOTHING, db_column='ProfileSkillId', verbose_name='Skill ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Owner', 'Owner Name'), ('UserCount', 'People With Skill'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Description', 'Skill Description'), ('Name', 'Skill Name')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillHistory'
        verbose_name = 'Skill History'
        verbose_name_plural = 'Skill History'
        # keyPrefix = None



class ProfileSkillShare(models.Model):
    parent = models.ForeignKey(ProfileSkill, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillShare'
        verbose_name = 'Skill Share'
        verbose_name_plural = 'Skill Share'
        # keyPrefix = None



class ProfileSkillUser(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Skill User Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Added Date', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='profileskilluser_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='profileskilluser_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    profile_skill = models.ForeignKey(ProfileSkill, models.DO_NOTHING, db_column='ProfileSkillId', verbose_name='Skill ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='profileskilluser_user_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    endorsement_count = models.IntegerField(db_column='EndorsementCount', verbose_name='Endorsements', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillUser'
        verbose_name = 'Skill User'
        verbose_name_plural = 'Skill Users'
        # keyPrefix = '0SM'



class ProfileSkillUserFeed(models.Model):
    parent = models.ForeignKey(ProfileSkillUser, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='profileskilluserfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='profileskilluserfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillUserFeed'
        verbose_name = 'Skill User Feed'
        verbose_name_plural = 'Skill User Feed'
        # keyPrefix = None



class ProfileSkillUserHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    profile_skill_user = models.ForeignKey(ProfileSkillUser, models.DO_NOTHING, db_column='ProfileSkillUserId', verbose_name='Skill User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('EndorsementCount', 'Endorsements'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ProfileSkill', 'Skill'), ('User', 'User')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillUserHistory'
        verbose_name = 'Skill User History'
        verbose_name_plural = 'Skill User History'
        # keyPrefix = None



class Prompt(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Prompt Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='prompt_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='prompt_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Prompt'
        verbose_name = 'Prompt'
        verbose_name_plural = 'Prompts'
        # keyPrefix = '0bs'



class PromptAction(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='promptaction_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='promptaction_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    prompt_version = models.ForeignKey('PromptVersion', models.DO_NOTHING, db_column='PromptVersionId', verbose_name='Prompt Version ID')  # Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='promptaction_user_set', verbose_name='User ID')  # Master Detail Relationship *
    times_displayed = models.IntegerField(db_column='TimesDisplayed', blank=True, null=True)
    times_action_taken = models.IntegerField(db_column='TimesActionTaken', blank=True, null=True)
    times_dismissed = models.IntegerField(db_column='TimesDismissed', blank=True, null=True)
    last_display_date = models.DateTimeField(db_column='LastDisplayDate', blank=True, null=True)
    last_result = models.CharField(db_column='LastResult', max_length=255, choices=[('NotSeen', 'Not Seen'), ('NoAction', 'No Action'), ('Dismiss', 'Dismiss'), ('CustomAction', 'Custom Action'), ('Error', 'Error'), ('Finish', 'Finish'), ('Snooze', 'Snooze')], blank=True, null=True)
    last_result_date = models.DateTimeField(db_column='LastResultDate', blank=True, null=True)
    step_number = models.IntegerField(db_column='StepNumber', blank=True, null=True)
    step_count = models.IntegerField(db_column='StepCount', blank=True, null=True)
    snooze_until = models.DateTimeField(db_column='SnoozeUntil', blank=True, null=True)
    times_snoozed = models.IntegerField(db_column='TimesSnoozed', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PromptAction'
        verbose_name = 'Prompt Action'
        verbose_name_plural = 'Prompt Actions'
        # keyPrefix = '0bu'



class PromptActionShare(models.Model):
    parent = models.ForeignKey(PromptAction, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PromptActionShare'
        verbose_name = 'Prompt Action Share'
        verbose_name_plural = 'Prompt Action Share'
        # keyPrefix = None



class PromptError(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='prompterror_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='prompterror_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    prompt_action = models.ForeignKey(PromptAction, models.DO_NOTHING, db_column='PromptActionId', verbose_name='Prompt Action ID')  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=255, verbose_name='Error Type', choices=[('Unavailable', 'Unavailable'), ('NoAccessToPage', 'No Access To Page'), ('NoAccessToApp', 'No Access To App'), ('ReferenceElementNotFound', 'Reference Element Not Found')])
    step_number = models.IntegerField(db_column='StepNumber', verbose_name='Error Step Number', blank=True, null=True)
    is_error = models.BooleanField(db_column='IsError', default=False)
    class Meta(models.Model.Meta):
        db_table = 'PromptError'
        verbose_name = 'Prompt Error'
        verbose_name_plural = 'Prompt Errors'
        # keyPrefix = '4Dr'



class PromptErrorShare(models.Model):
    parent = models.ForeignKey(PromptError, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PromptErrorShare'
        verbose_name = 'Prompt Error Share'
        verbose_name_plural = 'Prompt Error Share'
        # keyPrefix = None



class PromptVersion(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='promptversion_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='promptversion_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(Prompt, models.DO_NOTHING, db_column='ParentId', verbose_name='Prompt ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    master_label = models.CharField(db_column='MasterLabel', max_length=80)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    display_type = models.CharField(db_column='DisplayType', max_length=255, verbose_name='Type', choices=[('DockedComposer', 'Docked Prompt'), ('FloatingPanel', 'Floating Prompt'), ('Targeted', 'Targeted Prompt')])
    display_position = models.CharField(db_column='DisplayPosition', max_length=255, verbose_name='Position', choices=[('TopLeft', 'Top Left'), ('TopCenter', 'Top Center'), ('TopRight', 'Top Right'), ('BottomLeft', 'Bottom Left'), ('BottomCenter', 'Bottom Center'), ('BottomRight', 'Bottom Right'), ('MiddleLeft', 'MiddleLeft'), ('MiddleCenter', 'MiddleCenter'), ('MiddleRight', 'MiddleRight')], blank=True, null=True)
    times_to_display = models.IntegerField(db_column='TimesToDisplay', verbose_name='Number Of Times To Repeat', blank=True, null=True)
    delay_days = models.IntegerField(db_column='DelayDays', verbose_name='Days In Between Displays', blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', blank=True, null=True)
    user_access = models.CharField(db_column='UserAccess', max_length=255, verbose_name='Access Permissions', choices=[('Everyone', 'Everyone'), ('SpecificPermissions', 'Specific Permissions')], blank=True, null=True)
    is_published = models.BooleanField(db_column='IsPublished', verbose_name='Is Active', default=False)
    published_date = models.DateField(db_column='PublishedDate', verbose_name='Active Date', blank=True, null=True)
    published_by_user = models.ForeignKey('User', models.DO_NOTHING, db_column='PublishedByUserId', related_name='promptversion_publishedbyuser_set', verbose_name='User ID', blank=True, null=True)
    header = models.CharField(db_column='Header', max_length=36, blank=True, null=True)
    dismiss_button_label = models.CharField(db_column='DismissButtonLabel', max_length=15, blank=True, null=True)
    should_display_action_button = models.BooleanField(db_column='ShouldDisplayActionButton', verbose_name='Display Action Button', default=False)
    action_button_label = models.CharField(db_column='ActionButtonLabel', max_length=25, blank=True, null=True)
    action_button_link = models.URLField(db_column='ActionButtonLink', verbose_name='Action Button URL', blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=36, verbose_name='Title Label')
    version_number = models.IntegerField(db_column='VersionNumber')
    target_page_type = models.CharField(db_column='TargetPageType', max_length=80, blank=True, null=True)
    target_page_key1 = models.CharField(db_column='TargetPageKey1', max_length=80, verbose_name='Target Page Key 1', blank=True, null=True)
    target_page_key2 = models.CharField(db_column='TargetPageKey2', max_length=80, verbose_name='Target Page Key 2', blank=True, null=True)
    target_app_namespace_prefix = models.CharField(db_column='TargetAppNamespacePrefix', max_length=15, verbose_name='Target Application Namespace Prefix', blank=True, null=True)
    target_app_developer_name = models.CharField(db_column='TargetAppDeveloperName', max_length=80, verbose_name='Target Application Developer Name', blank=True, null=True)
    body = models.TextField(db_column='Body')
    should_ignore_global_delay = models.BooleanField(db_column='ShouldIgnoreGlobalDelay', verbose_name='Ignore Global Delay', default=False)
    user_profile_access = models.CharField(db_column='UserProfileAccess', max_length=255, verbose_name='Access Profiles', choices=[('Everyone', 'Everyone'), ('SpecificProfiles', 'Specific Profiles')], blank=True, null=True)
    video_link = models.URLField(db_column='VideoLink', verbose_name='Video URL', blank=True, null=True)
    step_number = models.IntegerField(db_column='StepNumber', blank=True, null=True)
    theme_color = models.CharField(db_column='ThemeColor', max_length=255, choices=[('Theme1', 'Theme1'), ('Theme2', 'Theme2'), ('Theme3', 'Theme3'), ('Theme4', 'Theme4')], blank=True, null=True)
    theme_saturation = models.CharField(db_column='ThemeSaturation', max_length=255, choices=[('Dark', 'Dark'), ('Light', 'Light')], blank=True, null=True)
    target_page_key1_ref = models.CharField(db_column='TargetPageKey1Ref', max_length=255, verbose_name='Target Page Key 1 Reference', blank=True, null=True)  # Too long choices skipped
    image_alt_text = models.CharField(db_column='ImageAltText', max_length=255, blank=True, null=True)
    image = models.ForeignKey(ContentAsset, models.DO_NOTHING, db_column='ImageId', verbose_name='Asset File ID', blank=True, null=True)
    image_link = models.URLField(db_column='ImageLink', verbose_name='Image URL', blank=True, null=True)
    image_location = models.CharField(db_column='ImageLocation', max_length=255, choices=[('Top', 'Top'), ('Bottom', 'Bottom'), ('Left', 'Left'), ('Right', 'Right')], blank=True, null=True)
    target_page_key3 = models.CharField(db_column='TargetPageKey3', max_length=255, verbose_name='Target Page Key 3', blank=True, null=True)
    element_relative_position = models.CharField(db_column='ElementRelativePosition', max_length=255, choices=[('TopLeft', 'Top Left'), ('TopCenter', 'Top Center'), ('TopRight', 'Top Right'), ('LeftTop', 'Left Top'), ('LeftCenter', 'Left Center'), ('LeftBottom', 'Left Bottom'), ('RightTop', 'Right Top'), ('RightCenter', 'Right Center'), ('RightBottom', 'Right Bottom'), ('BottomLeft', 'Bottom Left'), ('BottomCenter', 'Bottom Center'), ('BottomRight', 'Bottom Right')], blank=True, null=True)
    reference_element_context = models.TextField(db_column='ReferenceElementContext', blank=True, null=True)
    index_with_is_published = models.CharField(db_column='IndexWithIsPublished', max_length=400, verbose_name='Index Formula Field With Is Published Data', sf_read_only=models.READ_ONLY, blank=True, null=True)
    index_without_is_published = models.CharField(db_column='IndexWithoutIsPublished', max_length=400, verbose_name='Index Formula Field Without Is Published Data', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_page_key4 = models.CharField(db_column='TargetPageKey4', max_length=255, verbose_name='Target Page Key 4', blank=True, null=True)
    target_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, db_column='TargetRecordTypeId', verbose_name='Record Type ID', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PromptVersion'
        verbose_name = 'Prompt Version'
        verbose_name_plural = 'Prompt Versions'
        # keyPrefix = '0bt'



class Publisher(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Publisher Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=70, verbose_name='Publisher Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=70, verbose_name='Publisher Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_salesforce = models.BooleanField(db_column='IsSalesforce', verbose_name='Is Salesforce the Publisher?', sf_read_only=models.READ_ONLY, default=False)
    major_version = models.IntegerField(db_column='MajorVersion', verbose_name='Publisher Major Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    minor_version = models.IntegerField(db_column='MinorVersion', verbose_name='Publisher Minor Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Publisher'
        verbose_name = 'Publisher'
        verbose_name_plural = 'Publishers'
        # keyPrefix = '4pb'



class PushTopic(models.Model):
    name = models.CharField(db_column='Name', max_length=25, verbose_name='Topic Name')
    query = models.CharField(db_column='Query', max_length=1300, verbose_name='SOQL Query')
    api_version = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='API Version')
    is_active = models.BooleanField(db_column='IsActive', default=models.DEFAULTED_ON_CREATE)
    notify_for_fields = models.CharField(db_column='NotifyForFields', max_length=40, default='Referenced', choices=[('Select', None), ('Where', None), ('Referenced', None), ('All', None)])
    notify_for_operations = models.CharField(db_column='NotifyForOperations', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Create', None), ('Update', None), ('All', None), ('Extended', None)])
    description = models.CharField(db_column='Description', max_length=400, blank=True, null=True)
    notify_for_operation_create = models.BooleanField(db_column='NotifyForOperationCreate', verbose_name='Create')
    notify_for_operation_update = models.BooleanField(db_column='NotifyForOperationUpdate', verbose_name='Update')
    notify_for_operation_delete = models.BooleanField(db_column='NotifyForOperationDelete', verbose_name='Delete')
    notify_for_operation_undelete = models.BooleanField(db_column='NotifyForOperationUndelete', verbose_name='Undelete')
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='pushtopic_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='pushtopic_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PushTopic'
        verbose_name = 'Push Topic'
        verbose_name_plural = 'Push Topics'
        # keyPrefix = '0IF'



class QueueRoutingConfig(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Routing Configuration Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='queueroutingconfig_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='queueroutingconfig_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    routing_priority = models.IntegerField(db_column='RoutingPriority')
    routing_model = models.CharField(db_column='RoutingModel', max_length=255, choices=[('LeastActive', 'Least Active'), ('MostAvailable', 'Most Available'), ('ExternalRouting', 'External Routing')])
    capacity_weight = models.DecimalField(db_column='CapacityWeight', max_digits=10, decimal_places=2, verbose_name='Units of Capacity', blank=True, null=True)
    capacity_percentage = models.DecimalField(db_column='CapacityPercentage', max_digits=5, decimal_places=2, verbose_name='Percentage of Capacity', blank=True, null=True)
    push_timeout = models.IntegerField(db_column='PushTimeout', verbose_name='Push Time-Out (seconds)', blank=True, null=True)
    overflow_assignee = models.ForeignKey(Group, models.DO_NOTHING, db_column='OverflowAssigneeId', related_name='queueroutingconfig_overflowassignee_set', verbose_name='OverflowAssignee ID', blank=True, null=True)  # Reference to tables [Group, User]
    is_attribute_based = models.BooleanField(db_column='IsAttributeBased', verbose_name='Use with Skills-Based Routing Rules', default=False)
    drop_additional_skills_timeout = models.IntegerField(db_column='DropAdditionalSkillsTimeout', verbose_name='Drop Additional Skills Time-Out (seconds)', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QueueRoutingConfig'
        verbose_name = 'Routing Configuration'
        verbose_name_plural = 'Routing Configurations'
        # keyPrefix = '0K9'



class QueueSobject(models.Model):
    queue = models.ForeignKey(Group, models.DO_NOTHING, db_column='QueueId', verbose_name='Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='sObject Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('ActiveCamp__CXA_Usage__c', None), ('ActiveCamp__Dashboard_Log__c', None), ('ActiveCamp__Error_Log__c', None), ('ActiveCamp__Setup_Data__c', None), ('AgentWork', None), ('Case', None), ('ChangeRequest', None), ('ContactRequest', None), ('Dhruvsoft__O2O_Logs__c', None), ('Image', None), ('Incident', None), ('Lead', None), ('Macro', None), ('Main_Product__c', None), ('Main_Product_Frequency__c', None), ('Main_Product_Info__c', None), ('Order', None), ('pandadoc__Object_Tokens__c', None), ('pandadoc__PandaDocDocument__c', None), ('pandadoc__PandaDocLog__c', None), ('pandadoc__Pricing_Item_Mapping__c', None), ('pandadoc__Recipient_Map__c', None), ('pandadoc__TriggerSetting__c', None), ('Problem', None), ('ProcessException', None), ('Product_Category__c', None), ('Product_Category_Info__c', None), ('ProfileSkill', None), ('QuickText', None), ('Scorecard', None), ('ServiceContract', None), ('ServiceResource', None), ('SocialPost', None), ('Task', None), ('UserProvisioningRequest', None), ('UserServicePresence', None), ('VoiceCall', None), ('WorkBadgeDefinition', None), ('WorkOrder', None), ('WorkPlan', None), ('WorkPlanTemplate', None), ('WorkStepTemplate', None), ('WorkThanks', None)])
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'QueueSobject'
        verbose_name = 'Queue sObject'
        verbose_name_plural = 'Queue sObjects'
        # keyPrefix = '03g'



class QuickText(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Quick Text Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='quicktext_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='quicktext_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    message = models.TextField(db_column='Message')
    category = models.CharField(db_column='Category', max_length=40, default='Greetings', choices=[('Greetings', 'Greetings'), ('FAQ', 'FAQ'), ('Closings', 'Closings')], blank=True, null=True)
    channel = models.CharField(db_column='Channel', max_length=4099, default='Email', choices=[('Email', 'Email'), ('Portal', 'Portal'), ('Phone', 'Phone'), ('Internal', 'Internal'), ('Event', 'Event'), ('Task', 'Task'), ('Social', 'Social')], blank=True, null=True)
    folder = models.ForeignKey(Folder, models.DO_NOTHING, db_column='FolderId', verbose_name='Folder ID', blank=True, null=True)
    folder_name = models.CharField(db_column='FolderName', max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_insertable = models.BooleanField(db_column='IsInsertable', verbose_name='Include in selected channels', default=False)
    source_type = models.CharField(db_column='SourceType', max_length=255, verbose_name='Source Entity Type', choices=[('EINSTEIN_GENERATED', 'Einstein'), ('USER_GENERATED', 'User'), ('USER_EDITED', 'Einstein with user edits')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuickText'
        verbose_name = 'Quick Text'
        verbose_name_plural = 'Quick Text'
        # keyPrefix = '574'



class QuickTextHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    quick_text = models.ForeignKey(QuickText, models.DO_NOTHING, db_column='QuickTextId', verbose_name='Quick Text ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Category', 'Category'), ('Channel', 'Channel'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('Folder', 'Folder'), ('IsInsertable', 'Include in selected channels'), ('individualMerged', 'Individual Merged'), ('Message', 'Message'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Name', 'Quick Text Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Shortcode', 'Shortcode'), ('SourceType', 'Source Entity Type')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuickTextHistory'
        verbose_name = 'Quick Text History'
        verbose_name_plural = 'Quick Text History'
        # keyPrefix = None



class QuickTextShare(models.Model):
    parent = models.ForeignKey(QuickText, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'QuickTextShare'
        verbose_name = 'Quick Text Share'
        verbose_name_plural = 'Quick Text Share'
        # keyPrefix = None



class QuickTextUsage(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Quick Text Usage Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='quicktextusage_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='quicktextusage_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    quick_text = models.ForeignKey(QuickText, models.DO_NOTHING, db_column='QuickTextId', verbose_name='Quick Text ID', sf_read_only=models.READ_ONLY)
    folder = models.ForeignKey(Folder, models.DO_NOTHING, db_column='FolderId', verbose_name='Folder ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    channel = models.CharField(db_column='Channel', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Generic', None), ('Email', None), ('Portal', None), ('Live Agent', None), ('Phone', None), ('Internal', None), ('Social', None), ('Knowledge', None), ('Event', None), ('Task', None), ('Messaging', None)], blank=True, null=True)
    launch_source = models.CharField(db_column='LaunchSource', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Keyboard shortcut', None), ('Floater', None), ('Toolbar', None), ('Macro', None)], blank=True, null=True)
    logged_time = models.DateTimeField(db_column='LoggedTime', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='quicktextusage_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_context = models.CharField(db_column='AppContext', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Aloha', None), ('Lightning', None), ('Unknown', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuickTextUsage'
        verbose_name = 'Quick Text Usage'
        verbose_name_plural = 'Quick Text Usages'
        # keyPrefix = '5QL'



class QuickTextUsageShare(models.Model):
    parent = models.ForeignKey(QuickTextUsage, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'QuickTextUsageShare'
        verbose_name = 'Quick Text Usage Share'
        verbose_name_plural = 'Quick Text Usage Share'
        # keyPrefix = None



class Quote(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Quote Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='quote_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='quote_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='OpportunityId', verbose_name='Opportunity ID')  # Master Detail Relationship *
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, db_column='Pricebook2Id', verbose_name='Price Book ID', blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', blank=True, null=True)
    quote_number = models.CharField(db_column='QuoteNumber', max_length=30, sf_read_only=models.READ_ONLY)
    is_syncing = models.BooleanField(db_column='IsSyncing', verbose_name='Syncing', sf_read_only=models.READ_ONLY, default=False)
    shipping_handling = models.DecimalField(db_column='ShippingHandling', max_digits=18, decimal_places=2, verbose_name='Shipping and Handling', blank=True, null=True)
    tax = models.DecimalField(db_column='Tax', max_digits=18, decimal_places=2, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, default='Draft', choices=[('Draft', 'Draft'), ('Needs Review', 'Needs Review'), ('In Review', 'In Review'), ('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Presented', 'Presented'), ('Accepted', 'Accepted'), ('Denied', 'Denied')], blank=True, null=True)
    expiration_date = models.DateField(db_column='ExpirationDate', blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    subtotal = models.DecimalField(db_column='Subtotal', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    line_item_count = models.IntegerField(db_column='LineItemCount', verbose_name='Line Items', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(db_column='BillingStreet', verbose_name='Bill To Street', blank=True, null=True)
    billing_city = models.CharField(db_column='BillingCity', max_length=40, verbose_name='Bill To City', blank=True, null=True)
    billing_state = models.CharField(db_column='BillingState', max_length=80, verbose_name='Bill To State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(db_column='BillingPostalCode', max_length=20, verbose_name='Bill To Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(db_column='BillingCountry', max_length=80, verbose_name='Bill To Country', blank=True, null=True)
    billing_latitude = models.DecimalField(db_column='BillingLatitude', max_digits=18, decimal_places=15, verbose_name='Bill To Latitude', blank=True, null=True)
    billing_longitude = models.DecimalField(db_column='BillingLongitude', max_digits=18, decimal_places=15, verbose_name='Bill To Longitude', blank=True, null=True)
    billing_geocode_accuracy = models.CharField(db_column='BillingGeocodeAccuracy', max_length=255, verbose_name='Bill To Geocode Accuracy', choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(db_column='BillingAddress', verbose_name='Bill To', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(db_column='ShippingStreet', verbose_name='Ship To Street', blank=True, null=True)
    shipping_city = models.CharField(db_column='ShippingCity', max_length=40, verbose_name='Ship To City', blank=True, null=True)
    shipping_state = models.CharField(db_column='ShippingState', max_length=80, verbose_name='Ship To State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(db_column='ShippingPostalCode', max_length=20, verbose_name='Ship To Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(db_column='ShippingCountry', max_length=80, verbose_name='Ship To Country', blank=True, null=True)
    shipping_latitude = models.DecimalField(db_column='ShippingLatitude', max_digits=18, decimal_places=15, verbose_name='Ship To Latitude', blank=True, null=True)
    shipping_longitude = models.DecimalField(db_column='ShippingLongitude', max_digits=18, decimal_places=15, verbose_name='Ship To Longitude', blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(db_column='ShippingGeocodeAccuracy', max_length=255, verbose_name='Ship To Geocode Accuracy', choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(db_column='ShippingAddress', verbose_name='Ship To', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    quote_to_street = models.TextField(db_column='QuoteToStreet', blank=True, null=True)
    quote_to_city = models.CharField(db_column='QuoteToCity', max_length=40, blank=True, null=True)
    quote_to_state = models.CharField(db_column='QuoteToState', max_length=80, verbose_name='Quote To State/Province', blank=True, null=True)
    quote_to_postal_code = models.CharField(db_column='QuoteToPostalCode', max_length=20, verbose_name='Quote To Zip/Postal Code', blank=True, null=True)
    quote_to_country = models.CharField(db_column='QuoteToCountry', max_length=80, blank=True, null=True)
    quote_to_latitude = models.DecimalField(db_column='QuoteToLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    quote_to_longitude = models.DecimalField(db_column='QuoteToLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    quote_to_geocode_accuracy = models.CharField(db_column='QuoteToGeocodeAccuracy', max_length=255, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    quote_to_address = models.TextField(db_column='QuoteToAddress', verbose_name='Quote To', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    additional_street = models.TextField(db_column='AdditionalStreet', verbose_name='Additional To Street', blank=True, null=True)
    additional_city = models.CharField(db_column='AdditionalCity', max_length=40, verbose_name='Additional To City', blank=True, null=True)
    additional_state = models.CharField(db_column='AdditionalState', max_length=80, verbose_name='Additional To State/Province', blank=True, null=True)
    additional_postal_code = models.CharField(db_column='AdditionalPostalCode', max_length=20, verbose_name='Additional To Zip/Postal Code', blank=True, null=True)
    additional_country = models.CharField(db_column='AdditionalCountry', max_length=80, verbose_name='Additional To Country', blank=True, null=True)
    additional_latitude = models.DecimalField(db_column='AdditionalLatitude', max_digits=18, decimal_places=15, verbose_name='Additional To Latitude', blank=True, null=True)
    additional_longitude = models.DecimalField(db_column='AdditionalLongitude', max_digits=18, decimal_places=15, verbose_name='Additional To Longitude', blank=True, null=True)
    additional_geocode_accuracy = models.CharField(db_column='AdditionalGeocodeAccuracy', max_length=255, verbose_name='Additional To Geocode Accuracy', choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    additional_address = models.TextField(db_column='AdditionalAddress', verbose_name='Additional To', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    billing_name = models.CharField(db_column='BillingName', max_length=255, verbose_name='Bill To Name', blank=True, null=True)
    shipping_name = models.CharField(db_column='ShippingName', max_length=255, verbose_name='Ship To Name', blank=True, null=True)
    quote_to_name = models.CharField(db_column='QuoteToName', max_length=255, blank=True, null=True)
    additional_name = models.CharField(db_column='AdditionalName', max_length=255, verbose_name='Additional To Name', blank=True, null=True)
    email = models.EmailField(db_column='Email', blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, blank=True, null=True)
    fax = models.CharField(db_column='Fax', max_length=40, blank=True, null=True)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, db_column='ContractId', verbose_name='Contract ID', blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='quote_account_set', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    discount = models.DecimalField(db_column='Discount', max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    grand_total = models.DecimalField(db_column='GrandTotal', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    can_create_quote_line_items = models.BooleanField(db_column='CanCreateQuoteLineItems', sf_read_only=models.NOT_UPDATEABLE, default=False)
    service_provider = models.ForeignKey(Account, models.DO_NOTHING, db_column='Service_Provider__c', related_name='quote_serviceprovider_set', verbose_name='Service Provider', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Quote'
        verbose_name = 'Quote'
        verbose_name_plural = 'Quotes'
        # keyPrefix = '0Q0'



class QuoteDocument(models.Model):
    name = models.CharField(db_column='Name', max_length=270, sf_read_only=models.READ_ONLY)
    quote = models.ForeignKey(Quote, models.DO_NOTHING, db_column='QuoteId', verbose_name='Quote ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_version_document = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='ContentVersionDocumentId', verbose_name='ContentVersion ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    document = models.TextField(db_column='Document', verbose_name='PDF Document', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    grand_total = models.DecimalField(db_column='GrandTotal', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    discount = models.DecimalField(db_column='Discount', max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='quotedocument_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='quotedocument_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'QuoteDocument'
        verbose_name = 'Quote PDF'
        verbose_name_plural = 'Quote PDFs'
        # keyPrefix = '0QD'



class QuoteFeed(models.Model):
    parent = models.ForeignKey(Quote, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='quotefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='quotefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuoteFeed'
        verbose_name = 'Quote Feed'
        verbose_name_plural = 'Quote Feed'
        # keyPrefix = None



class QuoteLineItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    line_number = models.CharField(db_column='LineNumber', max_length=255, verbose_name='Line Item Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='quotelineitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='quotelineitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quote = models.ForeignKey(Quote, models.DO_NOTHING, db_column='QuoteId', verbose_name='Quote ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    pricebook_entry = models.ForeignKey(PricebookEntry, models.DO_NOTHING, db_column='PricebookEntryId', verbose_name='Price Book Entry ID', sf_read_only=models.NOT_UPDATEABLE)
    opportunity_line_item = models.ForeignKey(OpportunityLineItem, models.DO_NOTHING, db_column='OpportunityLineItemId', verbose_name='Line Item ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    quantity = models.DecimalField(db_column='Quantity', max_digits=12, decimal_places=2)
    unit_price = models.DecimalField(db_column='UnitPrice', max_digits=18, decimal_places=2, verbose_name='Sales Price')
    discount = models.DecimalField(db_column='Discount', max_digits=5, decimal_places=2, blank=True, null=True)
    has_revenue_schedule = models.BooleanField(db_column='HasRevenueSchedule', sf_read_only=models.READ_ONLY, default=False)
    has_quantity_schedule = models.BooleanField(db_column='HasQuantitySchedule', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Line Item Description', blank=True, null=True)
    service_date = models.DateField(db_column='ServiceDate', verbose_name='Date', blank=True, null=True)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', sf_read_only=models.NOT_UPDATEABLE)
    sort_order = models.IntegerField(db_column='SortOrder', blank=True, null=True)
    has_schedule = models.BooleanField(db_column='HasSchedule', verbose_name='Schedule', sf_read_only=models.READ_ONLY, default=False)
    list_price = models.DecimalField(db_column='ListPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    subtotal = models.DecimalField(db_column='Subtotal', max_digits=18, decimal_places=2, verbose_name='Subtotal ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuoteLineItem'
        verbose_name = 'Quote Line Item'
        verbose_name_plural = 'Quote Line Items'
        # keyPrefix = '0QL'



class QuoteShare(models.Model):
    parent = models.ForeignKey(Quote, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'QuoteShare'
        verbose_name = 'Quote Share'
        verbose_name_plural = 'Quote Share'
        # keyPrefix = None



class QuoteTemplateRichTextData(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Quote Template Rich Text Data', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='quotetemplaterichtextdata_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='quotetemplaterichtextdata_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    data = models.TextField(db_column='Data', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuoteTemplateRichTextData'
        verbose_name = 'Quote Template Rich Text Data'
        verbose_name_plural = 'Quote Template Rich Text Data'
        # keyPrefix = '0QR'



class RecentlyViewed(models.Model):
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(db_column='LastName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(db_column='FirstName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    middle_name = models.CharField(db_column='MiddleName', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    suffix = models.CharField(db_column='Suffix', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('ActiveCamp__CXA_Usage__c', None), ('ActiveCamp__Dashboard_Log__c', None), ('ActiveCamp__Error_Log__c', None), ('ActiveCamp__Setup_Data__c', None), ('AppAnalyticsQueryRequest', None), ('Asset', None), ('AssetRelationship', None), ('BusinessHours', None), ('Campaign', None), ('Case', None), ('ChangeRequest', None), ('CollaborationGroup', None), ('Contact', None), ('ContactRequest', None), ('ContentDocument', None), ('Contract', None), ('ContractLineItem', None), ('Dashboard', None), ('Dhruvsoft__O2O_Logs__c', None), ('Document', None), ('DuplicateRecordSet', None), ('EnhancedLetterhead', None), ('Entitlement', None), ('Event', None), ('Idea', None), ('Image', None), ('Incident', None), ('Lead', None), ('ListEmail', None), ('ListView', None), ('Macro', None), ('Main_Product__c', None), ('Main_Product_Frequency__c', None), ('Main_Product_Info__c', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('pandadoc__DocStatus__c', None), ('pandadoc__Object_Tokens__c', None), ('pandadoc__PandaDocDocument__c', None), ('pandadoc__PandaDocLog__c', None), ('pandadoc__Pricing_Item_Mapping__c', None), ('pandadoc__Recipient_Map__c', None), ('pandadoc__TriggerSetting__c', None), ('Pricebook2', None), ('PricebookEntry', None), ('Problem', None), ('ProcessException', None), ('Product_Category__c', None), ('Product_Category_Info__c', None), ('Product2', None), ('Profile', None), ('ProfileSkill', None), ('QuickText', None), ('Quote', None), ('QuoteLineItem', None), ('Recommendation', None), ('Report', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ServiceContract', None), ('ServiceResource', None), ('ServiceResourceSkill', None), ('Skill', None), ('SkillRequirement', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('Task', None), ('Topic', None), ('User', None), ('UserAppMenuItem', None), ('VoiceCall', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPlan', None), ('WorkPlanTemplate', None), ('WorkPlanTemplateEntry', None), ('WorkStep', None), ('WorkStepTemplate', None)], blank=True, null=True)
    alias = models.CharField(db_column='Alias', max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, db_column='UserRoleId', verbose_name='Role ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, db_column='RecordTypeId', verbose_name='Record Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    profile = models.ForeignKey(Profile, models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(db_column='Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name_or_alias = models.CharField(db_column='NameOrAlias', max_length=80, verbose_name='Name or Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    language = models.CharField(db_column='Language', max_length=40, sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'RecentlyViewed'
        verbose_name = 'Recently Viewed'
        verbose_name_plural = 'Recently Viewed'
        # keyPrefix = None



class Recommendation(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='recommendation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='recommendation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_reference = models.CharField(db_column='ActionReference', max_length=255, verbose_name='Action')
    description = models.CharField(db_column='Description', max_length=255)
    image = models.ForeignKey(ContentAsset, models.DO_NOTHING, db_column='ImageId', verbose_name='Asset File ID', help_text='For best results, use a 1000 px x 380 px image at 72 dpi or one with a similar ratio.', blank=True, null=True)
    acceptance_label = models.CharField(db_column='AcceptanceLabel', max_length=80)
    rejection_label = models.CharField(db_column='RejectionLabel', max_length=80)
    is_action_active = models.BooleanField(db_column='IsActionActive', sf_read_only=models.READ_ONLY, default=False)
    external_id = models.CharField(db_column='ExternalId', max_length=255, blank=True, null=True)
    recommendation_key = models.CharField(db_column='RecommendationKey', max_length=255, verbose_name='RecommendationResponse Identifier', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Recommendation'
        verbose_name = 'Recommendation'
        verbose_name_plural = 'Recommendations'
        # keyPrefix = '0pr'



class RecommendationResponse(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='recommendationresponse_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='recommendationresponse_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    on_behalf_of = models.CharField(db_column='OnBehalfOf', max_length=15, verbose_name='On Behalf of ID', sf_read_only=models.NOT_UPDATEABLE)
    on_behalf_of_type = models.CharField(db_column='OnBehalfOfType', max_length=255, verbose_name='On Behalf of Object', sf_read_only=models.READ_ONLY, blank=True, null=True)
    on_behalf_of_name = models.CharField(db_column='OnBehalfOfName', max_length=255, verbose_name='On Behalf of Name at Time of Response', sf_read_only=models.READ_ONLY)
    recommendation_key = models.CharField(db_column='RecommendationKey', max_length=255, sf_read_only=models.NOT_UPDATEABLE)
    recommendation_type = models.CharField(db_column='RecommendationType', max_length=255, verbose_name='Recommendation Object', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recommendation_name = models.CharField(db_column='RecommendationName', max_length=255, verbose_name='Recommendation Name at Time of Response', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    action_reference = models.CharField(db_column='ActionReference', max_length=255, verbose_name='Action Name at Time of Response', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('Accepted', None), ('Rejected', None)])
    strategy_reference = models.CharField(db_column='StrategyReference', max_length=255, verbose_name='Strategy Name at Time of Response', sf_read_only=models.NOT_UPDATEABLE)
    strategy_version = models.CharField(db_column='StrategyVersion', max_length=255, verbose_name='Strategy Version at Time of Response', sf_read_only=models.READ_ONLY)
    context_record = models.CharField(db_column='ContextRecord', max_length=15, verbose_name='Context Record ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    context_record_type = models.CharField(db_column='ContextRecordType', max_length=255, verbose_name='Context Object', sf_read_only=models.READ_ONLY, blank=True, null=True)
    context_record_name = models.CharField(db_column='ContextRecordName', max_length=255, verbose_name='Context Record Name at Time of Response', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'RecommendationResponse'
        verbose_name = 'Recommendation Response'
        verbose_name_plural = 'Recommendation Responses'
        # keyPrefix = '0rr'



class RecordAction(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='recordaction_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='recordaction_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    record = models.ForeignKey(Account, models.DO_NOTHING, db_column='RecordId', verbose_name='Parent Record ID')  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, CampaignMember, Case, ChangeRequest, CollaborationGroup, Contact, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EnhancedLetterhead, Entitlement, In_App_Checklist_Settings__c, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Pricebook2, PricebookEntry, Problem, Product2, Product_Category_Info__c, Product_Category__c, Quote, QuoteLineItem, Scorecard, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPersona, SocialPost, User, VoiceCall, WorkOrder, WorkOrderLineItem, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    flow_definition = models.CharField(db_column='FlowDefinition', max_length=255, verbose_name='Interaction Definition ID', choices=[('hvs_linkedin__ConnectionRequest', None), ('hvs_linkedin__InMail', None), ('runtime_industries_recurrence__Orch', None), ('runtime_industries_recurrence__Schdlr', None), ('runtime_service_incident_mgmt__CCOIO', None), ('runtime_service_incident_mgmt__CRRI', None), ('setup_service_experience__Create_Case', None), ('setup_service_experience__Reset_Pwd', None), ('setup_service_experience__Verify_Cust', None)], blank=True, null=True)
    flow_interview = models.ForeignKey(FlowInterview, models.DO_NOTHING, db_column='FlowInterviewId', verbose_name='FlowInterview ID', blank=True, null=True)
    order = models.IntegerField(db_column='Order')
    status = models.CharField(db_column='Status', max_length=255, default='New', choices=[('New', 'New'), ('Paused', 'Paused'), ('Complete', 'Complete'), ('Started', 'Started'), ('Unlinked', 'Unlinked')], blank=True, null=True)
    pinned = models.CharField(db_column='Pinned', max_length=255, default='None', choices=[('None', 'None'), ('Top', 'Top'), ('Bottom', 'Bottom')], blank=True, null=True)
    action_type = models.CharField(db_column='ActionType', max_length=255, default='Flow', choices=[('Flow', 'Flow'), ('QuickAction', 'QuickAction')], blank=True, null=True)
    action_definition = models.CharField(db_column='ActionDefinition', max_length=255, choices=[('hvs_linkedin__ConnectionRequest', None), ('hvs_linkedin__InMail', None), ('QuickActionDefinition.Account.Child_Account', None), ('QuickActionDefinition.Campaign.Child_Campaign', None), ('QuickActionDefinition.Case._LightningUpdateCase', None), ('QuickActionDefinition.Case.NewChildCase', None), ('QuickActionDefinition.Case.SendEmail', None), ('QuickActionDefinition.Case.SocialPublisher', None), ('QuickActionDefinition.ChangeRequest._LightningUpdateChangeRequest', None), ('QuickActionDefinition.CollaborationGroup.NewGroupMember', None), ('QuickActionDefinition.CollaborationGroup.NewGroupRecord', None), ('QuickActionDefinition.Contact._LightningRelatedContact', None), ('QuickActionDefinition.Dhruvsoft__Convert_To_Order', None), ('QuickActionDefinition.FeedItem.ContentNote', None), ('QuickActionDefinition.FeedItem.ContentPost', None), ('QuickActionDefinition.FeedItem.LinkPost', None), ('QuickActionDefinition.FeedItem.MobileSmartActions', None), ('QuickActionDefinition.FeedItem.PollPost', None), ('QuickActionDefinition.FeedItem.QuestionPost', None), ('QuickActionDefinition.FeedItem.RypplePost', None), ('QuickActionDefinition.FeedItem.TextPost', None), ('QuickActionDefinition.Follow_Up', None), ('QuickActionDefinition.Incident._LightningUpdateIncident', None), ('QuickActionDefinition.Lead.SocialPublisher', None), ('QuickActionDefinition.LogACall', None), ('QuickActionDefinition.NewAccount', None), ('QuickActionDefinition.NewCase', None), ('QuickActionDefinition.NewContact', None), ('QuickActionDefinition.NewEvent', None), ('QuickActionDefinition.NewGroup', None), ('QuickActionDefinition.NewLead', None), ('QuickActionDefinition.NewOpportunity', None), ('QuickActionDefinition.NewTask', None), ('QuickActionDefinition.Problem._LightningUpdateProblem', None), ('QuickActionDefinition.Quote.SendEmail', None), ('QuickActionDefinition.SendEmail', None), ('QuickActionDefinition.SocialPost.SocialPublisher', None), ('runtime_industries_recurrence__Orch', None), ('runtime_industries_recurrence__Schdlr', None), ('runtime_service_incident_mgmt__CCOIO', None), ('runtime_service_incident_mgmt__CRRI', None), ('setup_service_experience__Create_Case', None), ('setup_service_experience__Reset_Pwd', None), ('setup_service_experience__Verify_Cust', None)], blank=True, null=True)
    is_mandatory = models.BooleanField(db_column='IsMandatory', default=False)
    is_ui_remove_hidden = models.BooleanField(db_column='IsUiRemoveHidden', verbose_name='Hide Remove Action in UI', default=False)
    class Meta(models.Model.Meta):
        db_table = 'RecordAction'
        verbose_name = 'RecordAction'
        verbose_name_plural = 'RecordActions'
        # keyPrefix = '0Rw'



class RecordActionHistory(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='recordactionhistory_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='recordactionhistory_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent_record = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentRecordId', verbose_name='Parent Record ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, CampaignMember, Case, ChangeRequest, CollaborationGroup, Contact, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, EnhancedLetterhead, Entitlement, In_App_Checklist_Settings__c, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Pricebook2, PricebookEntry, Problem, Product2, Product_Category_Info__c, Product_Category__c, Quote, QuoteLineItem, Scorecard, ServiceContract, ServiceResource, ServiceResourceSkill, SkillRequirement, SocialPersona, SocialPost, User, VoiceCall, WorkOrder, WorkOrderLineItem, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c]
    action_definition_api_name = models.CharField(db_column='ActionDefinitionApiName', max_length=255, verbose_name='Action Definition API Name', sf_read_only=models.READ_ONLY)
    action_definition_label = models.CharField(db_column='ActionDefinitionLabel', max_length=255, sf_read_only=models.READ_ONLY)
    action_type = models.CharField(db_column='ActionType', max_length=255, sf_read_only=models.READ_ONLY, default='Flow', choices=[('Flow', 'Flow'), ('QuickAction', 'QuickAction')])
    state = models.CharField(db_column='State', max_length=255, sf_read_only=models.READ_ONLY, default='Started', choices=[('Started', 'Started'), ('Resumed', 'Resumed'), ('Paused', 'Paused'), ('Completed', 'Completed'), ('Unlinked', 'Unlinked')])
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='recordactionhistory_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    record_action_id = models.CharField(db_column='RecordActionId', max_length=18, verbose_name='RecordAction Id', sf_read_only=models.READ_ONLY)
    logged_time = models.DateTimeField(db_column='LoggedTime', sf_read_only=models.READ_ONLY)
    pinned = models.CharField(db_column='Pinned', max_length=255, sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('Top', 'Top'), ('Bottom', 'Bottom')], blank=True, null=True)
    is_mandatory = models.BooleanField(db_column='IsMandatory', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'RecordActionHistory'
        verbose_name = 'RecordActionHistory'
        verbose_name_plural = 'RecordActionHistories'
        # keyPrefix = '0Ub'



class RecordType(models.Model):
    name = models.CharField(db_column='Name', max_length=80)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Record Type Name')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    business_process = models.ForeignKey(BusinessProcess, models.DO_NOTHING, db_column='BusinessProcessId', verbose_name='Business Process ID', blank=True, null=True)
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='SObject Type Name', sf_read_only=models.NOT_UPDATEABLE)  # Too long choices skipped
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.NOT_CREATEABLE, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='recordtype_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='recordtype_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'RecordType'
        verbose_name = 'Record Type'
        verbose_name_plural = 'Record Types'
        # keyPrefix = '012'



class RedirectWhitelistUrl(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='redirectwhitelisturl_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='redirectwhitelisturl_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    url = models.CharField(db_column='Url', unique=True, max_length=255, verbose_name='URL', help_text='Accepts these formats: example.com, *.example.com, and http://example.com')
    class Meta(models.Model.Meta):
        db_table = 'RedirectWhitelistUrl'
        verbose_name = 'Allow URL for Redirects'
        verbose_name_plural = 'Allow URLs for Redirects'
        # keyPrefix = '9V6'



class RelatedListColumnDefinition(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_list_definition_id = models.CharField(db_column='RelatedListDefinitionId', max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(db_column='FieldDefinitionId', max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    column_soql = models.CharField(db_column='ColumnSoql', max_length=255, verbose_name='Related List Column Definition SOQL String', sf_read_only=models.READ_ONLY, blank=True, null=True)
    alias = models.CharField(db_column='Alias', max_length=255, verbose_name='Related List Column Definition Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lookup_id = models.CharField(db_column='LookupId', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_describable = models.BooleanField(db_column='IsDescribable', verbose_name='Is Describe Enabled', sf_read_only=models.READ_ONLY, default=False)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'RelatedListColumnDefinition'
        verbose_name = 'Related List Column Definition'
        verbose_name_plural = 'Related List Column Definition'
        # keyPrefix = '0rc'



class RelatedListDefinition(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_definition_id = models.CharField(db_column='EntityDefinitionId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_entity_definition_id = models.CharField(db_column='ParentEntityDefinitionId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_list_id = models.CharField(db_column='RelatedListId', max_length=255, verbose_name='Related List Definition Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_list_name = models.CharField(db_column='RelatedListName', max_length=255, verbose_name='Related List Definition Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_sort = models.CharField(db_column='DefaultSort', max_length=255, verbose_name='Related List Default Sort', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_layoutable = models.BooleanField(db_column='IsLayoutable', verbose_name='Is Layout Enabled', sf_read_only=models.READ_ONLY, default=False)
    is_describable = models.BooleanField(db_column='IsDescribable', verbose_name='Is Describe Enabled', sf_read_only=models.READ_ONLY, default=False)
    is_customizable = models.BooleanField(db_column='IsCustomizable', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'RelatedListDefinition'
        verbose_name = 'Related List Definition'
        verbose_name_plural = 'Related List Definition'
        # keyPrefix = '0rl'



class RelationshipDomain(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Relationship Domain Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_sobject_id = models.CharField(db_column='ParentSobjectId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    child_sobject_id = models.CharField(db_column='ChildSobjectId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_id = models.CharField(db_column='FieldId', max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_info_id = models.CharField(db_column='RelationshipInfoId', max_length=70, verbose_name='Relationship Info ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(db_column='RelationshipName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_cascade_delete = models.BooleanField(db_column='IsCascadeDelete', verbose_name='Is Cascade Delete?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(db_column='IsDeprecatedAndHidden', verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_restricted_delete = models.BooleanField(db_column='IsRestrictedDelete', verbose_name='Is Restricted Delete?', sf_read_only=models.READ_ONLY, default=False)
    junction_id_list_names = models.XJSONField(db_column='JunctionIdListNames', verbose_name='Names of the Junction Id Lists', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'RelationshipDomain'
        verbose_name = 'Relationship Domain'
        verbose_name_plural = 'Relationship Domains'
        # keyPrefix = '0Jv'



class RelationshipInfo(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Relationship Info Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    child_sobject_id = models.CharField(db_column='ChildSobjectId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_id = models.CharField(db_column='FieldId', max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_cascade_delete = models.BooleanField(db_column='IsCascadeDelete', verbose_name='Is Cascade Delete?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(db_column='IsDeprecatedAndHidden', verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_restricted_delete = models.BooleanField(db_column='IsRestrictedDelete', verbose_name='Is Restricted Delete?', sf_read_only=models.READ_ONLY, default=False)
    junction_id_list_names = models.XJSONField(db_column='JunctionIdListNames', verbose_name='Names of the Junction Id Lists', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'RelationshipInfo'
        verbose_name = 'Relationship'
        verbose_name_plural = 'Relationships'
        # keyPrefix = '0Ju'



class Report(models.Model):
    owner = models.ForeignKey(Folder, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Folder, Organization, User]
    folder_name = models.CharField(db_column='FolderName', max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='report_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='report_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=40, verbose_name='Report Name', sf_read_only=models.READ_ONLY)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Report Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_run_date = models.DateTimeField(db_column='LastRunDate', verbose_name='Last Run', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    format = models.CharField(db_column='Format', max_length=40, sf_read_only=models.READ_ONLY, default='Tabular', choices=[('MultiBlock', 'Joined'), ('Matrix', 'Matrix'), ('Summary', 'Summary'), ('Tabular', 'Tabular')])
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Report'
        verbose_name = 'Report'
        verbose_name_plural = 'Reports'
        # keyPrefix = '00O'



class ReportFeed(models.Model):
    parent = models.ForeignKey(Report, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='reportfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='reportfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ReportFeed'
        verbose_name = 'Report Feed'
        verbose_name_plural = 'Report Feed'
        # keyPrefix = None



class SpsamlAttributes(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='spsamlattributes_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='spsamlattributes_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    key = models.CharField(db_column='Key', max_length=255, verbose_name='Attribute key')
    value = models.CharField(db_column='Value', max_length=255, verbose_name='Attribute value')
    connectivity = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='ConnectivityId', verbose_name='Connected App ID', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SPSamlAttributes'
        verbose_name = 'Service Provider SAML Attribute'
        verbose_name_plural = 'Service Provider SAML Attributes'
        # keyPrefix = '0J4'



class SamlSsoConfig(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='samlssoconfig_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='samlssoconfig_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    version = models.CharField(db_column='Version', max_length=255, verbose_name='SAML Version', sf_read_only=models.READ_ONLY, choices=[('SAML1_1', None), ('SAML2_0', None)])
    issuer = models.CharField(db_column='Issuer', max_length=255, sf_read_only=models.READ_ONLY)
    options_sp_init_binding = models.BooleanField(db_column='OptionsSpInitBinding', verbose_name='SpInitBinding', sf_read_only=models.READ_ONLY)
    options_user_provisioning = models.BooleanField(db_column='OptionsUserProvisioning', verbose_name='UserProvisioning', sf_read_only=models.READ_ONLY)
    options_use_config_request_method = models.BooleanField(db_column='OptionsUseConfigRequestMethod', verbose_name='UseConfigRequestMethod', sf_read_only=models.READ_ONLY)
    options_use_same_digest_algo_for_signing = models.BooleanField(db_column='OptionsUseSameDigestAlgoForSigning', verbose_name='UseSameDigestAlgoForSigning', sf_read_only=models.READ_ONLY)
    attribute_format = models.CharField(db_column='AttributeFormat', max_length=255, verbose_name='Name ID Format', sf_read_only=models.READ_ONLY, blank=True, null=True)
    attribute_name = models.CharField(db_column='AttributeName', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    audience = models.CharField(db_column='Audience', max_length=255, verbose_name='Entity ID', sf_read_only=models.READ_ONLY)
    identity_mapping = models.CharField(db_column='IdentityMapping', max_length=255, verbose_name='SAML Identity Type', sf_read_only=models.READ_ONLY, choices=[('Username', None), ('FederationId', None), ('UserId', None)])
    identity_location = models.CharField(db_column='IdentityLocation', max_length=255, verbose_name='SAML Identity Location', sf_read_only=models.READ_ONLY, choices=[('SubjectNameId', None), ('Attribute', None)])
    execution_user = models.ForeignKey('User', models.DO_NOTHING, db_column='ExecutionUserId', related_name='samlssoconfig_executionuser_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_url = models.CharField(db_column='LoginUrl', max_length=1500, verbose_name='Identity Provider Login URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    logout_url = models.CharField(db_column='LogoutUrl', max_length=1500, verbose_name='Identity Provider Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_url = models.CharField(db_column='ErrorUrl', max_length=500, verbose_name='Custom Error URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    validation_cert = models.CharField(db_column='ValidationCert', max_length=4000, verbose_name='Identity Provider Certificate', sf_read_only=models.READ_ONLY)
    request_signature_method = models.CharField(db_column='RequestSignatureMethod', max_length=255, sf_read_only=models.READ_ONLY, choices=[('RSA-SHA1', 'RSA-SHA1'), ('RSA-SHA256', 'RSA-SHA256')], blank=True, null=True)
    single_logout_url = models.CharField(db_column='SingleLogoutUrl', max_length=255, verbose_name='Identity Provider Single Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    single_logout_binding = models.CharField(db_column='SingleLogoutBinding', max_length=255, verbose_name='Single Logout Request Binding', sf_read_only=models.READ_ONLY, choices=[('RedirectBinding', None), ('PostBinding', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SamlSsoConfig'
        verbose_name = 'SAML Single Sign-On Setting'
        verbose_name_plural = 'SAML Single Sign-On Settings'
        # keyPrefix = '0LE'



class Scontrol(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Label', sf_read_only=models.NOT_CREATEABLE)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='S-Control Name', sf_read_only=models.NOT_CREATEABLE)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    encoding_key = models.CharField(db_column='EncodingKey', max_length=40, verbose_name='Encoding', sf_read_only=models.NOT_CREATEABLE, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    html_wrapper = models.TextField(db_column='HtmlWrapper', verbose_name='HTML Body', sf_read_only=models.NOT_CREATEABLE)
    filename = models.CharField(db_column='Filename', max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    body_length = models.IntegerField(db_column='BodyLength', verbose_name='Binary Length', sf_read_only=models.READ_ONLY)
    binary = models.TextField(db_column='Binary', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    content_source = models.CharField(db_column='ContentSource', max_length=40, verbose_name='Type', sf_read_only=models.NOT_CREATEABLE, choices=[('HTML', 'HTML'), ('URL', 'URL'), ('Snippet', 'Snippet')], blank=True, null=True)
    supports_caching = models.BooleanField(db_column='SupportsCaching', verbose_name='Prebuild In Page', sf_read_only=models.NOT_CREATEABLE, default=False)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='scontrol_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='scontrol_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Scontrol'
        verbose_name = 'Custom S-Control'
        verbose_name_plural = 'Custom S-Controls'
        # keyPrefix = '01N'



class Scorecard(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='scorecard_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='scorecard_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    target_entity = models.CharField(db_column='TargetEntity', max_length=255, default='Account', choices=[('Account', 'Account')])
    class Meta(models.Model.Meta):
        db_table = 'Scorecard'
        verbose_name = 'Scorecard'
        verbose_name_plural = 'Scorecards'
        # keyPrefix = '01f'



class ScorecardAssociation(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='scorecardassociation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='scorecardassociation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    scorecard = models.ForeignKey(Scorecard, models.DO_NOTHING, db_column='ScorecardId', verbose_name='Scorecard ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    target_entity = models.ForeignKey(Account, models.DO_NOTHING, db_column='TargetEntityId', verbose_name='Target Entity ID')  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ScorecardAssociation'
        verbose_name = 'Scorecard Association'
        verbose_name_plural = 'Scorecard Associations'
        # keyPrefix = '0Qn'



class ScorecardMetric(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='scorecardmetric_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='scorecardmetric_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    scorecard = models.ForeignKey(Scorecard, models.DO_NOTHING, db_column='ScorecardId', verbose_name='Scorecard ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    description = models.TextField(db_column='Description', blank=True, null=True)
    category = models.CharField(db_column='Category', max_length=40, default='Sales', choices=[('Sales', 'Sales'), ('Marketing', 'Marketing'), ('Field Enablement', 'Field Enablement'), ('Support', 'Support'), ('Adoption', 'Adoption')], blank=True, null=True)
    report = models.ForeignKey(Report, models.DO_NOTHING, db_column='ReportId', verbose_name='Report ID', blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ScorecardMetric'
        verbose_name = 'Scorecard Metric'
        verbose_name_plural = 'Scorecard Metrics'
        # keyPrefix = '0Om'



class ScorecardShare(models.Model):
    parent = models.ForeignKey(Scorecard, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ScorecardShare'
        verbose_name = 'Scorecard Share'
        verbose_name_plural = 'Scorecard Share'
        # keyPrefix = None



class SearchLayout(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    layout_type = models.CharField(db_column='LayoutType', max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(db_column='EntityDefinitionId', max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fields_displayed = models.XJSONField(db_column='FieldsDisplayed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    buttons_displayed = models.XJSONField(db_column='ButtonsDisplayed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    profile = models.CharField(db_column='Profile', max_length=15, verbose_name='Profile ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    profile_name = models.CharField(db_column='ProfileName', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    list_layout = models.CharField(db_column='ListLayout', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SearchLayout'
        verbose_name = 'Search Layout'
        verbose_name_plural = 'Search Layouts'
        # keyPrefix = '4co'



class SecurityCustomBaseline(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='securitycustombaseline_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='securitycustombaseline_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    baseline = models.TextField(db_column='Baseline', blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', verbose_name='Is Default Baseline', default=False)
    class Meta(models.Model.Meta):
        db_table = 'SecurityCustomBaseline'
        verbose_name = 'Security Custom Baseline'
        verbose_name_plural = 'Security Custom Baselines'
        # keyPrefix = '09v'



class ServiceChannel(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Service Channel Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='servicechannel_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='servicechannel_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    related_entity = models.CharField(db_column='RelatedEntity', unique=True, max_length=255, verbose_name='Custom Object Definition ID', choices=[('Account', None), ('Activity', None), ('Case', None), ('Contact', None), ('ContactRequest', None), ('Incident', None), ('Lead', None), ('Opportunity', None), ('Order', None), ('SocialPost', None), ('VoiceCall', None)])
    sec_routing_priority_field = models.CharField(db_column='SecRoutingPriorityField', max_length=255, verbose_name='Custom Field Definition ID', choices=[('Account.ActiveCamp__ActiveCampaign_Sync_Status__c', None), ('Account.Affordable_Housing__c', None), ('Account.Has_elevators__c', None), ('Account.Has_recycling__c', None), ('Account.Has_Valet_Trash__c', None), ('Account.Merchant_Type__c', None), ('Account.NCR_Status__c', None), ('Account.Property_Type__c', None), ('Account.Section_8__c', None), ('Account.Senior_Living__c', None), ('Account.Student_Housing__c', None), ('AccountSource', None), ('ActiveCamp__Dashboard_Log__c.ActiveCamp__Object_Type__c', None), ('ActiveCamp__Dashboard_Log__c.ActiveCamp__Sync_Direction__c', None), ('ActiveCamp__Dashboard_Log__c.ActiveCamp__Sync_Status__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Connection_Event_Sent__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Contact_Sync_Type__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Custom_Field_Mapping_Complete__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__First_Sync_Event_Sent__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Has_Crm__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Inbound_Connector_Step_Completed__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Info_Step__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Map_Account__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Map_Custom_Contact__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Map_Custom_Lead__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Map_Standard_Contact__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Map_Standard_Lead__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Sync_Opportunity__c', None), ('ActiveCamp__Setup_Data__c.ActiveCamp__Sync_Type__c', None), ('AttachmentType', None), ('CampaignMemberStatus', None), ('Category', None), ('Classification', None), ('Contact.ActiveCamp__Account_Relation_Sync_Status__c', None), ('Contact.ActiveCamp__ActiveCampaign_Sync_Status__c', None), ('Dhruvsoft__O2O_Logs__c.Dhruvsoft__Status__c', None), ('EngagementLevel', None), ('ForecastCategoryName', None), ('Impact', None), ('Incident.App_Effected__c', None), ('Incident.App_Type__c', None), ('Industry', None), ('Industry', None), ('InternalSource', None), ('IsClosed', None), ('IsConverted', None), ('IsEmailBounced', None), ('IsEscalated', None), ('IsMajorIncident', None), ('IsOutbound', None), ('IsStopped', None), ('IsUnreadByOwner', None), ('Lead.ActiveCamp__ActiveCampaign_Sync_Status__c', None), ('Lead.Merchant_Type__c', None), ('LeadSource', None), ('LeadSource', None), ('Main_Product_Frequency__c.Frequency_Type__c', None), ('MessageType', None), ('Opportunity.ActiveCamp__ActiveCampaign_Sync_Status__c', None), ('Opportunity.Budget_Confirmed__c', None), ('Opportunity.Dhruvsoft__IsConverted1__c', None), ('Opportunity.Discovery_Completed__c', None), ('Opportunity.Loss_Reason__c', None), ('Opportunity.ROI_Analysis_Completed__c', None), ('Opportunity.Time_Slot__c', None), ('Order.Dhruvsoft__convert_from_opportunity__c', None), ('Order.Scheduled_Time_Slot__c', None), ('Origin', None), ('pandadoc__PandaDocDocument__c.pandadoc__Editor_Version__c', None), ('pandadoc__PandaDocDocument__c.pandadoc__Is_Deleted__c', None), ('pandadoc__PandaDocLog__c.pandadoc__Level__c', None), ('pandadoc__TriggerSetting__c.pandadoc__Enabled__c', None), ('pandadoc__TriggerSetting__c.pandadoc__EV1_Ready__c', None), ('pandadoc__TriggerSetting__c.pandadoc__EV2_Ready__c', None), ('PreferredChannel', None), ('Priority', None), ('Priority', None), ('Provider', None), ('Rating', None), ('Reason', None), ('ReportedMethod', None), ('RequestReason', None), ('ReviewedStatus', None), ('Sentiment', None), ('SpamRating', None), ('StageName', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('StatusCode', None), ('StatusCode', None), ('SubCategory', None), ('TopicType', None), ('Type', None), ('Type', None), ('Type', None), ('Type', None), ('Type', None), ('Urgency', None)], blank=True, null=True)
    does_minimize_widget_on_accept = models.BooleanField(db_column='DoesMinimizeWidgetOnAccept', verbose_name='Minimize the Omni-Channel widget when work is accepted', default=False)
    does_override_presence_audio = models.BooleanField(db_column='DoesOverridePresenceAudio', verbose_name="Override agents' audio settings", default=False)
    custom_sound = models.ForeignKey('StaticResource', models.DO_NOTHING, db_column='CustomSoundId', verbose_name='Static Resource ID', blank=True, null=True)
    sound_length = models.IntegerField(db_column='SoundLength', verbose_name='Sound Length (Seconds)', blank=True, null=True)
    has_auto_accept_enabled = models.BooleanField(db_column='HasAutoAcceptEnabled', verbose_name='Automatically accept work requests', default=False)
    class Meta(models.Model.Meta):
        db_table = 'ServiceChannel'
        verbose_name = 'Service Channel'
        verbose_name_plural = 'Service Channels'
        # keyPrefix = '0N9'



class ServiceChannelFieldPriority(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='servicechannelfieldpriority_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='servicechannelfieldpriority_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    service_channel = models.ForeignKey(ServiceChannel, models.DO_NOTHING, db_column='ServiceChannelId', verbose_name='Service Channel ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    value = models.CharField(db_column='Value', max_length=255)
    priority = models.IntegerField(db_column='Priority')
    class Meta(models.Model.Meta):
        db_table = 'ServiceChannelFieldPriority'
        verbose_name = 'Service Channel Field Priority'
        verbose_name_plural = 'Service Channel Field Priorities'
        # keyPrefix = '0dV'



class ServiceChannelStatus(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='servicechannelstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='servicechannelstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    service_channel = models.ForeignKey(ServiceChannel, models.DO_NOTHING, db_column='ServiceChannelId', verbose_name='Service Channel ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    service_presence_status = models.ForeignKey('ServicePresenceStatus', models.DO_NOTHING, db_column='ServicePresenceStatusId', verbose_name='Service Presence Status ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ServiceChannelStatus'
        verbose_name = 'Service Channel Status'
        verbose_name_plural = 'Service Channel Statuses'
        # keyPrefix = '0NC'



class ServiceContract(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Contract Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='servicecontract_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='servicecontract_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', blank=True, null=True)
    term = models.IntegerField(db_column='Term', verbose_name='Term (months)', blank=True, null=True)
    start_date = models.DateField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateField(db_column='EndDate', blank=True, null=True)
    activation_date = models.DateTimeField(db_column='ActivationDate', blank=True, null=True)
    approval_status = models.CharField(db_column='ApprovalStatus', max_length=40, default='Draft', choices=[('Draft', 'Draft'), ('In Approval Process', 'In Approval Process'), ('Activated', 'Activated')], blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    billing_street = models.TextField(db_column='BillingStreet', blank=True, null=True)
    billing_city = models.CharField(db_column='BillingCity', max_length=40, blank=True, null=True)
    billing_state = models.CharField(db_column='BillingState', max_length=80, blank=True, null=True)
    billing_postal_code = models.CharField(db_column='BillingPostalCode', max_length=20, verbose_name='Billing Zip', blank=True, null=True)
    billing_country = models.CharField(db_column='BillingCountry', max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(db_column='BillingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(db_column='BillingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(db_column='BillingGeocodeAccuracy', max_length=255, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(db_column='BillingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(db_column='ShippingStreet', blank=True, null=True)
    shipping_city = models.CharField(db_column='ShippingCity', max_length=40, blank=True, null=True)
    shipping_state = models.CharField(db_column='ShippingState', max_length=80, blank=True, null=True)
    shipping_postal_code = models.CharField(db_column='ShippingPostalCode', max_length=20, verbose_name='Shipping Zip', blank=True, null=True)
    shipping_country = models.CharField(db_column='ShippingCountry', max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(db_column='ShippingLatitude', max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(db_column='ShippingLongitude', max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(db_column='ShippingGeocodeAccuracy', max_length=255, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(db_column='ShippingAddress', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, db_column='Pricebook2Id', verbose_name='Price Book ID', blank=True, null=True)
    shipping_handling = models.DecimalField(db_column='ShippingHandling', max_digits=18, decimal_places=2, verbose_name='Shipping and Handling', blank=True, null=True)
    tax = models.DecimalField(db_column='Tax', max_digits=18, decimal_places=2, blank=True, null=True)
    subtotal = models.DecimalField(db_column='Subtotal', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    line_item_count = models.IntegerField(db_column='LineItemCount', verbose_name='Line Items', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contract_number = models.CharField(db_column='ContractNumber', max_length=30, sf_read_only=models.READ_ONLY)
    special_terms = models.TextField(db_column='SpecialTerms', blank=True, null=True)
    discount = models.DecimalField(db_column='Discount', max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    grand_total = models.DecimalField(db_column='GrandTotal', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Expired', 'Expired')], blank=True, null=True)
    parent_service_contract = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentServiceContractId', related_name='servicecontract_parentservicecontract_set', verbose_name='Parent Service Contract ID', blank=True, null=True)
    root_service_contract = models.ForeignKey('self', models.DO_NOTHING, db_column='RootServiceContractId', related_name='servicecontract_rootservicecontract_set', verbose_name='Root Service Contract ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    additional_discount = models.DecimalField(db_column='AdditionalDiscount', max_digits=5, decimal_places=2, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceContract'
        verbose_name = 'Service Contract'
        verbose_name_plural = 'Service Contracts'
        # keyPrefix = '810'



class ServiceContractFeed(models.Model):
    parent = models.ForeignKey(ServiceContract, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='servicecontractfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='servicecontractfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceContractFeed'
        verbose_name = 'Service Contract Feed'
        verbose_name_plural = 'Service Contract Feed'
        # keyPrefix = None



class ServiceContractHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    service_contract = models.ForeignKey(ServiceContract, models.DO_NOTHING, db_column='ServiceContractId', verbose_name='Service Contract ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActivationDate', 'Activation Date'), ('AdditionalDiscount', 'Additional Discount'), ('ApprovalStatus', 'Approval Status'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip'), ('Contact', 'Contact Name'), ('Name', 'Contract Name'), ('created', 'Created.'), ('Description', 'Description'), ('Discount', 'Discount'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('GrandTotal', 'Grand Total'), ('individualMerged', 'Individual Merged'), ('LineItemAutonumberMaster', 'LineItemAutonumberMaster'), ('LineItemCount', 'Line Items'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentServiceContract', 'Parent Service Contract'), ('Pricebook2', 'Price Book'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootServiceContract', 'Root Service Contract'), ('Owner', 'Service Contract Owner'), ('ShippingAddress', 'Shipping Address'), ('ShippingHandling', 'Shipping and Handling'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip'), ('SpecialTerms', 'Special Terms'), ('StartDate', 'Start Date'), ('Status', 'Status'), ('StatusIndicator', 'Status Icon'), ('Subtotal', 'Subtotal'), ('Tax', 'Tax'), ('Term', 'Term (months)'), ('TotalPrice', 'Total Price')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceContractHistory'
        verbose_name = 'Service Contract History'
        verbose_name_plural = 'Service Contract History'
        # keyPrefix = None



class ServiceContractShare(models.Model):
    parent = models.ForeignKey(ServiceContract, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ServiceContractShare'
        verbose_name = 'Service Contract Share'
        verbose_name_plural = 'Service Contract Share'
        # keyPrefix = None



class ServicePresenceStatus(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Status Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='servicepresencestatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='servicepresencestatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ServicePresenceStatus'
        verbose_name = 'Service Presence Status'
        verbose_name_plural = 'Service Presence Statuses'
        # keyPrefix = '0N5'



class ServiceResource(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='serviceresource_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='serviceresource_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_record = models.ForeignKey('User', models.DO_NOTHING, db_column='RelatedRecordId', related_name='serviceresource_relatedrecord_set', verbose_name='User ID', blank=True, null=True)
    resource_type = models.CharField(db_column='ResourceType', max_length=255, default='T', choices=[('T', 'Technician'), ('D', 'Dispatcher'), ('C', 'Crew'), ('A', 'Agent'), ('S', 'Asset'), ('P', 'Planner')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceResource'
        verbose_name = 'Service Resource'
        verbose_name_plural = 'Service Resources'
        # keyPrefix = '0Hn'



class ServiceResourceFeed(models.Model):
    parent = models.ForeignKey(ServiceResource, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='serviceresourcefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='serviceresourcefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceResourceFeed'
        verbose_name = 'Service Resource Feed'
        verbose_name_plural = 'Service Resource Feed'
        # keyPrefix = None



class ServiceResourceHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    service_resource = models.ForeignKey(ServiceResource, models.DO_NOTHING, db_column='ServiceResourceId', verbose_name='Resource ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account'), ('IsActive', 'Active'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ResourceType', 'Resource Type'), ('RelatedRecord', 'User')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceResourceHistory'
        verbose_name = 'Service Resource History'
        verbose_name_plural = 'Service Resource History'
        # keyPrefix = None



class ServiceResourceShare(models.Model):
    parent = models.ForeignKey(ServiceResource, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ServiceResourceShare'
        verbose_name = 'Service Resource Share'
        verbose_name_plural = 'Service Resource Share'
        # keyPrefix = None



class ServiceResourceSkill(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    skill_number = models.CharField(db_column='SkillNumber', max_length=255, verbose_name='Resource Skill Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='serviceresourceskill_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='serviceresourceskill_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_resource = models.ForeignKey(ServiceResource, models.DO_NOTHING, db_column='ServiceResourceId', verbose_name='Resource ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    skill = models.ForeignKey('Skill', models.DO_NOTHING, db_column='SkillId', verbose_name='Skill ID')  # Master Detail Relationship *
    effective_start_date = models.DateTimeField(db_column='EffectiveStartDate', verbose_name='Start Date')
    class Meta(models.Model.Meta):
        db_table = 'ServiceResourceSkill'
        verbose_name = 'Service Resource Skill'
        verbose_name_plural = 'Service Resource Skills'
        # keyPrefix = '0Hv'



class ServiceResourceSkillFeed(models.Model):
    parent = models.ForeignKey(ServiceResourceSkill, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='serviceresourceskillfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='serviceresourceskillfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceResourceSkillFeed'
        verbose_name = 'Service Resource Skill Feed'
        verbose_name_plural = 'Service Resource Skill Feed'
        # keyPrefix = None



class ServiceResourceSkillHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    service_resource_skill = models.ForeignKey(ServiceResourceSkill, models.DO_NOTHING, db_column='ServiceResourceSkillId', verbose_name='Resource Skill ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('EffectiveEndDate', 'End Date'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ServiceResource', 'Service Resource'), ('Skill', 'Skill'), ('SkillLevel', 'Skill Level'), ('EffectiveStartDate', 'Start Date')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceResourceSkillHistory'
        verbose_name = 'Service Resource Skill History'
        verbose_name_plural = 'Service Resource Skill History'
        # keyPrefix = None



class ServiceSetupProvisioning(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='servicesetupprovisioning_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='servicesetupprovisioning_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    job_name = models.CharField(db_column='JobName', max_length=125, sf_read_only=models.READ_ONLY)
    task_name = models.CharField(db_column='TaskName', max_length=125, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('InProgress', None), ('Completed', None), ('ExistingSetup', None), ('FailedFatalError', None), ('PRE_CONDITION_NOT_MET', None)])
    task_context = models.TextField(db_column='TaskContext', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ServiceSetupProvisioning'
        verbose_name = 'Service Setup Provisioning'
        verbose_name_plural = 'Service Setup Provisionings'
        # keyPrefix = '9gd'



class SessionPermSetActivation(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='sessionpermsetactivation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='sessionpermsetactivation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    auth_session = models.ForeignKey(AuthSession, models.DO_NOTHING, db_column='AuthSessionId', verbose_name='Auth Session ID', sf_read_only=models.READ_ONLY)
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, db_column='PermissionSetId', verbose_name='PermissionSet ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', related_name='sessionpermsetactivation_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    permission_set_group = models.ForeignKey(PermissionSetGroup, models.DO_NOTHING, db_column='PermissionSetGroupId', verbose_name='PermissionSetGroup ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SessionPermSetActivation'
        verbose_name = 'Session Permission Set Activation'
        verbose_name_plural = 'Session Permission Set Activations'
        # keyPrefix = '5Pa'



class SetupAssistantStep(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='setupassistantstep_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='setupassistantstep_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    assistant_type = models.CharField(db_column='AssistantType', max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('MULTI_FACTOR_AUTHENTICATION', 'MULTI_FACTOR_AUTHENTICATION'), ('PIPELINE_INSPECTION_SETUP', 'PIPELINE_INSPECTION_SETUP'), ('REVENUE_INSIGHTS_SETUP', 'REVENUE_INSIGHTS_SETUP'), ('PRODUCT_VARIANT', 'PRODUCT_VARIANT'), ('SLACK_SETUP_ASSISTANT', 'SLACK_SETUP_ASSISTANT'), ('SALES_CLOUD_FOR_SLACK', 'SALES_CLOUD_FOR_SLACK')])
    is_complete = models.BooleanField(db_column='IsComplete', default=False)
    class Meta(models.Model.Meta):
        db_table = 'SetupAssistantStep'
        verbose_name = 'Setup Assistant Step'
        verbose_name_plural = 'Setup Assistant Steps'
        # keyPrefix = '3Ys'



class SetupAuditTrail(models.Model):
    action = models.CharField(db_column='Action', max_length=120, sf_read_only=models.READ_ONLY)
    section = models.CharField(db_column='Section', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    display = models.CharField(db_column='Display', max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    delegate_user = models.CharField(db_column='DelegateUser', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responsible_namespace_prefix = models.CharField(db_column='ResponsibleNamespacePrefix', max_length=15, verbose_name='Source Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by_context = models.CharField(db_column='CreatedByContext', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by_issuer = models.CharField(db_column='CreatedByIssuer', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SetupAuditTrail'
        verbose_name = 'Setup Audit Trail Entry'
        verbose_name_plural = 'Setup Audit Trail Entries'
        # keyPrefix = '0Ym'



class SetupEntityAccess(models.Model):
    parent = models.ForeignKey(PermissionSet, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    setup_entity = models.ForeignKey(ApexPage, models.DO_NOTHING, db_column='SetupEntityId', verbose_name='Setup Entity ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ApexPage, ConnectedApplication, CustomPermission, ExternalDataSource, ExternalSocialAccount, NamedCredential, ServicePresenceStatus] Master Detail Relationship *
    setup_entity_type = models.CharField(db_column='SetupEntityType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('ApexPage', None), ('ConnectedApplication', None), ('ConnectedApplication', None), ('CustomEntityDefinition', None), ('CustomPermission', None), ('ExternalDataSource', None), ('ExternalSocialAccount', None), ('NamedCredential', None), ('ServicePresenceStatus', None), ('TabSet', None)], blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'SetupEntityAccess'
        verbose_name = 'Setup Entity Access'
        verbose_name_plural = 'Setup Entity Access'
        # keyPrefix = '0J0'



class Skill(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='skill_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='skill_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Skill'
        verbose_name = 'Skill'
        verbose_name_plural = 'Skills'
        # keyPrefix = '0C5'



class SkillRequirement(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    skill_number = models.CharField(db_column='SkillNumber', max_length=255, verbose_name='Skill Requirement Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='skillrequirement_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='skillrequirement_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_record = models.ForeignKey(PendingServiceRouting, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Required For ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [PendingServiceRouting, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    skill = models.ForeignKey(Skill, models.DO_NOTHING, db_column='SkillId', verbose_name='Skill ID')  # Master Detail Relationship *
    is_additional_skill = models.BooleanField(db_column='IsAdditionalSkill', default=False)
    skill_priority = models.IntegerField(db_column='SkillPriority', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SkillRequirement'
        verbose_name = 'Skill Requirement'
        verbose_name_plural = 'Skill Requirements'
        # keyPrefix = '0Hx'



class SkillRequirementFeed(models.Model):
    parent = models.ForeignKey(SkillRequirement, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='skillrequirementfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='skillrequirementfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SkillRequirementFeed'
        verbose_name = 'Skill Requirement Feed'
        verbose_name_plural = 'Skill Requirement Feed'
        # keyPrefix = None



class SkillRequirementHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    skill_requirement = models.ForeignKey(SkillRequirement, models.DO_NOTHING, db_column='SkillRequirementId', verbose_name='Skill Requirement ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('IsAdditionalSkill', 'Is Additional Skill'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedRecord', 'Required For'), ('SkillLevel', 'Skill Level'), ('SkillPriority', 'Skill Priority'), ('Skill', 'Skill Required')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SkillRequirementHistory'
        verbose_name = 'Skill Requirement History'
        verbose_name_plural = 'Skill Requirement History'
        # keyPrefix = None



class SlaProcess(models.Model):
    name = models.CharField(db_column='Name', max_length=120, verbose_name='Entitlement Process Name', sf_read_only=models.READ_ONLY)
    name_norm = models.CharField(db_column='NameNorm', max_length=240, verbose_name='Name', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    start_date_field = models.CharField(db_column='StartDateField', max_length=40, verbose_name='Custom Field Definition ID', sf_read_only=models.READ_ONLY, choices=[('Case.ClosedDate', None), ('Case.CreatedDate', None), ('Case.LastModifiedDate', None), ('Case.SlaStartDate', None), ('Case.StopStartDate', None), ('Incident.CreatedDate', None), ('Incident.DetectedDateTime', None), ('Incident.EndDateTime', None), ('Incident.LastModifiedDate', None), ('Incident.ResolutionDateTime', None), ('Incident.SlaStartDate', None), ('Incident.StartDateTime', None), ('Incident.StopStartDate', None), ('WorkOrder.CreatedDate', None), ('WorkOrder.EndDate', None), ('WorkOrder.LastModifiedDate', None), ('WorkOrder.SlaStartDate', None), ('WorkOrder.StartDate', None), ('WorkOrder.StopStartDate', None)])
    sobject_type = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Entitlement Process Type', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AccountContactRelation', None), ('AgentWork', None), ('AgentWorkSkill', None), ('Asset', None), ('AssetRelationship', None), ('AssistantProgress', None), ('Campaign', None), ('CampaignInfluence', None), ('CampaignMember', None), ('Case', None), ('CaseComment', None), ('CaseRelatedIssue', None), ('ChangeRequest', None), ('ChangeRequestRelatedIssue', None), ('ChangeRequestRelatedItem', None), ('ChatterActivity', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('Contact', None), ('ContactRequest', None), ('Contract', None), ('ContractLineItem', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Entitlement', None), ('EntitlementContact', None), ('EntityMilestone', None), ('Event', None), ('ExchangeUserMapping', None), ('ExpressionFilter', None), ('ExpressionFilterCriteria', None), ('ExternalEventMapping', None), ('FeedItem', None), ('Idea', None), ('Image', None), ('Incident', None), ('IncidentRelatedItem', None), ('Lead', None), ('LearningAssignment', None), ('LearningAssignmentProgress', None), ('LearningItem', None), ('LearningItemAssignment', None), ('LearningItemProgress', None), ('LearningLinkProgress', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('MacroUsage', None), ('ManagedContentTranslationJobLanguage', None), ('ManagedContentVersion', None), ('MobileHomeConfiguration', None), ('Opportunity', None), ('OpportunityContactRole', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('OrgDeleteRequest', None), ('OrgMetricScanResult', None), ('OrgMetricScanSummary', None), ('PendingServiceRouting', None), ('Problem', None), ('ProblemIncident', None), ('ProblemRelatedItem', None), ('ProcessException', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('PromptAction', None), ('PromptError', None), ('QuickText', None), ('QuickTextUsage', None), ('Quote', None), ('QuoteLineItem', None), ('RecordMergeHistory', None), ('RequestsForAccessSIQ', None), ('ServiceContract', None), ('ServiceResource', None), ('ServiceResourceSkill', None), ('SkillRequirement', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('StreamActivityAccess', None), ('StreamingChannel', None), ('Task', None), ('TenantSecurityLogin', None), ('TenantSecurityMonitorMetric', None), ('TenantSecurityTenantInfo', None), ('Topic', None), ('TopicAssignment', None), ('User', None), ('UserProvisioningRequest', None), ('UserServicePresence', None), ('VoiceCall', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPlan', None), ('WorkPlanTemplate', None), ('WorkPlanTemplateEntry', None), ('WorkStep', None), ('WorkStepTemplate', None), ('WorkThanks', None)])
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='slaprocess_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='slaprocess_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    business_hours = models.ForeignKey(BusinessHours, models.DO_NOTHING, db_column='BusinessHoursId', verbose_name='Business Hours ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SlaProcess'
        verbose_name = 'Entitlement Process'
        verbose_name_plural = 'Entitlement Processes'
        # keyPrefix = '552'



class SocialPersona(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Social Handle')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='socialpersona_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='socialpersona_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Account, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID')  # Reference to tables [Account, Contact, Lead, SocialPost] Master Detail Relationship *
    provider = models.CharField(db_column='Provider', max_length=255, verbose_name='Social Network', choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('InstagramBusiness', 'InstagramBusiness'), ('GoogleRtc', 'GoogleRTC'), ('Other', 'Other Media Type')])
    external_id = models.CharField(db_column='ExternalId', max_length=255, verbose_name='Social Persona Provider External Id', blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', verbose_name='Default', default=False)
    external_picture_url = models.URLField(db_column='ExternalPictureURL', verbose_name='Provider External Picture URL', blank=True, null=True)
    profile_url = models.URLField(db_column='ProfileUrl', verbose_name='Profile URL', blank=True, null=True)
    topic_type = models.CharField(db_column='TopicType', max_length=255, blank=True, null=True)
    is_blacklisted = models.BooleanField(db_column='IsBlacklisted', verbose_name='Blocklisted', default=False)
    real_name = models.CharField(db_column='RealName', max_length=255, blank=True, null=True)
    is_following_us = models.BooleanField(db_column='IsFollowingUs', verbose_name='Is following us', default=False)
    are_we_following = models.BooleanField(db_column='AreWeFollowing', verbose_name='Are we following', default=False)
    media_type = models.CharField(db_column='MediaType', max_length=255, verbose_name='Social Studio Media Type', blank=True, null=True)
    bio = models.TextField(db_column='Bio', blank=True, null=True)
    followers = models.IntegerField(db_column='Followers', blank=True, null=True)
    following = models.IntegerField(db_column='Following', blank=True, null=True)
    number_of_friends = models.IntegerField(db_column='NumberOfFriends', blank=True, null=True)
    listed_count = models.IntegerField(db_column='ListedCount', blank=True, null=True)
    media_provider = models.CharField(db_column='MediaProvider', max_length=255, verbose_name='Social Studio Media Provider', blank=True, null=True)
    profile_type = models.CharField(db_column='ProfileType', max_length=255, choices=[('PERSON', 'Person'), ('PAGE', 'Page')], blank=True, null=True)
    r6_source_id = models.CharField(db_column='R6SourceId', max_length=255, verbose_name='Social Studio Source Id', blank=True, null=True)
    number_of_tweets = models.IntegerField(db_column='NumberOfTweets', blank=True, null=True)
    source_app = models.CharField(db_column='SourceApp', max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    author_labels = models.CharField(db_column='AuthorLabels', max_length=255, blank=True, null=True)
    is_verified = models.BooleanField(db_column='IsVerified', verbose_name='Verified', default=False)
    influencer_score = models.IntegerField(db_column='InfluencerScore', blank=True, null=True)
    avatar_url = models.CharField(db_column='AvatarUrl', max_length=1024, verbose_name='Avatar URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPersona'
        verbose_name = 'Social Persona'
        verbose_name_plural = 'Social Personas'
        # keyPrefix = '0SP'



class SocialPersonaHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    social_persona = models.ForeignKey(SocialPersona, models.DO_NOTHING, db_column='SocialPersonaId', verbose_name='Social Persona ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AreWeFollowing', 'Are we following'), ('AuthorLabels', 'Author Labels'), ('AuthorStatus', 'Author Status'), ('AuthorStatusLastUpdated', 'Author Status Last Updated'), ('Bio', 'Bio'), ('IsBlacklisted', 'Blocklisted'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('Followers', 'Followers'), ('Following', 'Following'), ('individualMerged', 'Individual Merged'), ('InfluencerScore', 'Influencer Score'), ('IsFollowingUs', 'Is following us'), ('Klout', 'Klout Rating'), ('ListedCount', 'Listed Count'), ('NumberOfFriends', 'Number Of Friends'), ('NumberOfTweets', 'Number Of Tweets'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('IsPageScopedIdMigrated', 'Page Scoped Id Migrated'), ('Parent', 'Parent'), ('ProfileType', 'Profile Type'), ('ProfileUrl', 'Profile URL'), ('ExternalPictureURL', 'Provider External Picture URL'), ('RealName', 'Real Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Name', 'Social Handle'), ('Provider', 'Social Network'), ('MediaProvider', 'Social Studio Media Provider'), ('MediaType', 'Social Studio Media Type'), ('R6SourceId', 'Social Studio Source Id'), ('SourceApp', 'Source App'), ('TopicType', 'Topic Type'), ('IsVerified', 'Verified')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPersonaHistory'
        verbose_name = 'Social Persona History'
        verbose_name_plural = 'Social Persona History'
        # keyPrefix = None



class SocialPost(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='socialpost_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='socialpost_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Case, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', blank=True, null=True)
    persona = models.ForeignKey(SocialPersona, models.DO_NOTHING, db_column='PersonaId', verbose_name='Social Persona ID', blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey(Account, models.DO_NOTHING, db_column='WhoId', verbose_name='Who ID', blank=True, null=True)  # Reference to tables [Account, Contact, Lead]
    reply_to = models.ForeignKey('self', models.DO_NOTHING, db_column='ReplyToId', verbose_name='In Reply To ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    headline = models.CharField(db_column='Headline', max_length=255, blank=True, null=True)
    content = models.TextField(db_column='Content', verbose_name='Message', blank=True, null=True)
    posted = models.DateTimeField(db_column='Posted', verbose_name='Posted Date', default=models.DEFAULTED_ON_CREATE)
    post_url = models.URLField(db_column='PostUrl', verbose_name='Post URL', blank=True, null=True)
    provider = models.CharField(db_column='Provider', max_length=255, verbose_name='Social Network', sf_read_only=models.NOT_UPDATEABLE, choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('InstagramBusiness', 'InstagramBusiness'), ('GoogleRtc', 'GoogleRTC'), ('Other', 'Other Media Type')], blank=True, null=True)
    handle = models.CharField(db_column='Handle', max_length=255, verbose_name='Social Handle', blank=True, null=True)
    spam_rating = models.CharField(db_column='SpamRating', max_length=255, choices=[('NotSpam', 'Not Spam'), ('Spam', 'Spam')], blank=True, null=True)
    media_type = models.CharField(db_column='MediaType', max_length=255, verbose_name='Social Studio Media Type', blank=True, null=True)
    media_provider = models.CharField(db_column='MediaProvider', max_length=255, verbose_name='Social Studio Media Provider', blank=True, null=True)
    sentiment = models.CharField(db_column='Sentiment', max_length=255, choices=[('Negative', 'Negative'), ('SomewhatNegative', 'Somewhat Negative'), ('Neutral', 'Neutral'), ('SomewhatPositive', 'Somewhat Positive'), ('Positive', 'Positive')], blank=True, null=True)
    post_priority = models.CharField(db_column='PostPriority', max_length=255, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, choices=[('SENT', 'Sent'), ('PENDING', 'Sending'), ('REPLIED', 'Replied'), ('DELETED', 'Deleted'), ('UNKNOWN', 'Unknown'), ('FAILED', 'Failed'), ('PENDING_APPROVAL', 'Pending Approval'), ('RECALL_APPROVAL', 'Recalled'), ('REJECTED_APPROVAL', 'Rejected'), ('HIDDEN', 'Hidden')], blank=True, null=True)
    status_message = models.TextField(db_column='StatusMessage', blank=True, null=True)
    recipient = models.CharField(db_column='Recipient', max_length=255, blank=True, null=True)
    recipient_type = models.CharField(db_column='RecipientType', max_length=255, blank=True, null=True)
    message_type = models.CharField(db_column='MessageType', max_length=255, choices=[('Post', 'Post'), ('Comment', 'Comment'), ('Private', 'Private Message'), ('Retweet', 'Retweet'), ('Reply', 'Reply'), ('Direct', 'Direct Message'), ('Tweet', 'Tweet')], blank=True, null=True)
    r6_post_id = models.CharField(db_column='R6PostId', unique=True, max_length=255, verbose_name='Social Studio Post Id', blank=True, null=True)
    r6_topic_id = models.CharField(db_column='R6TopicId', max_length=255, verbose_name='Social Studio Topic Id', blank=True, null=True)
    r6_source_id = models.CharField(db_column='R6SourceId', max_length=255, verbose_name='Social Studio Source Id', blank=True, null=True)
    topic_type = models.CharField(db_column='TopicType', max_length=255, choices=[('Keyword', 'Keyword'), ('Managed', 'Managed')], blank=True, null=True)
    external_post_id = models.CharField(db_column='ExternalPostId', max_length=255, blank=True, null=True)
    harvest_date = models.DateTimeField(db_column='HarvestDate', blank=True, null=True)
    is_outbound = models.BooleanField(db_column='IsOutbound', sf_read_only=models.NOT_UPDATEABLE, default=False)
    post_tags = models.TextField(db_column='PostTags', blank=True, null=True)
    source_tags = models.TextField(db_column='SourceTags', blank=True, null=True)
    classification = models.CharField(db_column='Classification', max_length=40, choices=[('Product Review', 'Product Review'), ('Inquiry', 'Inquiry'), ('Outreach', 'Outreach'), ('Lead', 'Lead'), ('Customer Case', 'Customer Case')], blank=True, null=True)
    thread_size = models.IntegerField(db_column='ThreadSize', blank=True, null=True)
    comment_count = models.IntegerField(db_column='CommentCount', blank=True, null=True)
    shares = models.IntegerField(db_column='Shares', blank=True, null=True)
    view_count = models.IntegerField(db_column='ViewCount', blank=True, null=True)
    inbound_link_count = models.IntegerField(db_column='InboundLinkCount', blank=True, null=True)
    unique_commentors = models.IntegerField(db_column='UniqueCommentors', blank=True, null=True)
    likes_and_votes = models.IntegerField(db_column='LikesAndVotes', verbose_name='Likes and Votes', blank=True, null=True)
    topic_profile_name = models.CharField(db_column='TopicProfileName', max_length=255, blank=True, null=True)
    keyword_group_name = models.CharField(db_column='KeywordGroupName', max_length=255, blank=True, null=True)
    engagement_level = models.CharField(db_column='EngagementLevel', max_length=40, choices=[('Resolved', 'Resolved'), ('Submitted', 'Submitted'), ('Reviewed', 'Reviewed'), ('Commented', 'Commented')], blank=True, null=True)
    assigned_to = models.CharField(db_column='AssignedTo', max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    outbound_social_account = models.ForeignKey(ExternalSocialAccount, models.DO_NOTHING, db_column='OutboundSocialAccountId', verbose_name='Managed Social Account ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    reviewed_status = models.CharField(db_column='ReviewedStatus', max_length=40, choices=[('Ignore', 'Ignore'), ('Needed', 'Needed'), ('Reviewed', 'Reviewed')], blank=True, null=True)
    attachment_url = models.URLField(db_column='AttachmentUrl', verbose_name='Attachment URL', blank=True, null=True)
    attachment_type = models.CharField(db_column='AttachmentType', max_length=255, choices=[('UNKNOWN', 'Unknown'), ('IMAGE', 'Image'), ('VIDEO', 'Video'), ('LINK', 'Link'), ('AUDIO', 'Audio'), ('TEXT', 'Text'), ('APPLICATION', 'Application')], blank=True, null=True)
    deleted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='DeletedById', related_name='socialpost_deletedby_set', verbose_name='Deleted By ID', blank=True, null=True)
    response_context_external_id = models.CharField(db_column='ResponseContextExternalId', max_length=255, verbose_name='Response Context', blank=True, null=True)
    liked_by = models.CharField(db_column='LikedBy', max_length=255, blank=True, null=True)
    analyzer_score = models.DecimalField(db_column='AnalyzerScore', max_digits=18, decimal_places=3, blank=True, null=True)
    language = models.CharField(db_column='Language', max_length=255, blank=True, null=True)
    review_score = models.DecimalField(db_column='ReviewScore', max_digits=18, decimal_places=2, blank=True, null=True)
    review_scale = models.DecimalField(db_column='ReviewScale', max_digits=18, decimal_places=2, blank=True, null=True)
    hidden_by = models.ForeignKey('User', models.DO_NOTHING, db_column='HiddenById', related_name='socialpost_hiddenby_set', verbose_name='Hidden By ID', blank=True, null=True)
    notes = models.TextField(db_column='Notes', blank=True, null=True)
    truncated_content = models.CharField(db_column='TruncatedContent', max_length=255, verbose_name='Message Clipping', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPost'
        verbose_name = 'Social Post'
        verbose_name_plural = 'Social Posts'
        # keyPrefix = '0ST'



class SocialPostFeed(models.Model):
    parent = models.ForeignKey(SocialPost, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='socialpostfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='socialpostfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostFeed'
        verbose_name = 'Social Post Feed'
        verbose_name_plural = 'Social Post Feed'
        # keyPrefix = None



class SocialPostHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    social_post = models.ForeignKey(SocialPost, models.DO_NOTHING, db_column='SocialPostId', verbose_name='Social Post ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AnalyzerScore', 'Analyzer Score'), ('AssignedTo', 'Assigned To'), ('AttachmentType', 'Attachment Type'), ('AttachmentUrl', 'Attachment URL'), ('Classification', 'Classification'), ('CommentCount', 'Comment Count'), ('created', 'Created.'), ('DeletedBy', 'Deleted By'), ('EngagementLevel', 'Engagement Level'), ('ExternalPostId', 'External Post Id'), ('feedEvent', 'Feed event'), ('HarvestDate', 'Harvest Date'), ('Headline', 'Headline'), ('HiddenBy', 'Hidden By'), ('InboundLinkCount', 'Inbound Link Count'), ('individualMerged', 'Individual Merged'), ('ReplyTo', 'In Reply To'), ('IsOutbound', 'Is Outbound'), ('KeywordGroupName', 'Keyword Group Name'), ('Language', 'Language'), ('LikedBy', 'Liked By'), ('LikesAndVotes', 'Likes and Votes'), ('OutboundSocialAccount', 'Managed Social Account'), ('Content', 'Message'), ('MessageType', 'Message Type'), ('Name', 'Name'), ('Notes', 'Notes'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent'), ('Posted', 'Posted Date'), ('PostPriority', 'Post Priority'), ('PostTags', 'Post Tags'), ('PostUrl', 'Post URL'), ('Recipient', 'Recipient'), ('RecipientType', 'Recipient Type'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ResponseContextExternalId', 'Response Context'), ('ReviewedStatus', 'Reviewed Status'), ('ReviewScale', 'Review Scale'), ('ReviewScore', 'Review Score'), ('Sentiment', 'Sentiment'), ('Shares', 'Shares'), ('Handle', 'Social Handle'), ('Provider', 'Social Network'), ('Persona', 'Social Persona'), ('MediaProvider', 'Social Studio Media Provider'), ('MediaType', 'Social Studio Media Type'), ('R6PostId', 'Social Studio Post Id'), ('R6SourceId', 'Social Studio Source Id'), ('R6TopicId', 'Social Studio Topic Id'), ('SourceTags', 'Source Tags'), ('SpamRating', 'Spam Rating'), ('Status', 'Status'), ('StatusMessage', 'Status Message'), ('ThreadSize', 'Thread Size'), ('TopicProfileName', 'Topic Profile Name'), ('TopicType', 'Topic Type'), ('UniqueCommentors', 'Unique Commentors'), ('ViewCount', 'View Count'), ('Who', 'Who')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostHistory'
        verbose_name = 'Social Post History'
        verbose_name_plural = 'Social Post History'
        # keyPrefix = None



class SocialPostShare(models.Model):
    parent = models.ForeignKey(SocialPost, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostShare'
        verbose_name = 'Social Post Share'
        verbose_name_plural = 'Social Post Share'
        # keyPrefix = None



class Solution(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    solution_number = models.CharField(db_column='SolutionNumber', max_length=30, sf_read_only=models.READ_ONLY)
    solution_name = models.CharField(db_column='SolutionName', max_length=255, verbose_name='Title')
    is_published = models.BooleanField(db_column='IsPublished', verbose_name='Public', default=False)
    is_published_in_public_kb = models.BooleanField(db_column='IsPublishedInPublicKb', verbose_name='Visible in Public Knowledge Base', default=False)
    status = models.CharField(db_column='Status', max_length=255, default='Draft', choices=[('Draft', 'Draft'), ('Reviewed', 'Reviewed'), ('Duplicate', 'Duplicate')])
    is_reviewed = models.BooleanField(db_column='IsReviewed', verbose_name='Reviewed', sf_read_only=models.READ_ONLY, default=False)
    solution_note = models.TextField(db_column='SolutionNote', verbose_name='Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, db_column='OwnerId', related_name='solution_owner_set', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='solution_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='solution_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    times_used = models.IntegerField(db_column='TimesUsed', verbose_name='Num Related Cases', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_html = models.BooleanField(db_column='IsHtml', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Solution'
        verbose_name = 'Solution'
        verbose_name_plural = 'Solutions'
        # keyPrefix = '501'



class SolutionFeed(models.Model):
    parent = models.ForeignKey(Solution, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='solutionfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='solutionfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SolutionFeed'
        verbose_name = 'Solution Feed'
        verbose_name_plural = 'Solution Feed'
        # keyPrefix = None



class SolutionHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    solution = models.ForeignKey(Solution, models.DO_NOTHING, db_column='SolutionId', verbose_name='Solution ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('IsPublished', 'Public'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SolutionNote', 'Solution Details'), ('SolutionName', 'Solution Title'), ('Status', 'Status'), ('IsPublishedInPublicKb', 'Visible in Public Knowledge Base')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SolutionHistory'
        verbose_name = 'Solution History'
        verbose_name_plural = 'Solution History'
        # keyPrefix = None



class SolutionStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    is_reviewed = models.BooleanField(db_column='IsReviewed', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='solutionstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='solutionstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'SolutionStatus'
        verbose_name = 'Solution Status Value'
        verbose_name_plural = 'Solution Status Value'
        # keyPrefix = None



class Stamp(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Organization, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    master_label = models.CharField(db_column='MasterLabel', max_length=50, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='stamp_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='stamp_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    description = models.CharField(db_column='Description', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Stamp'
        verbose_name = 'Stamp'
        verbose_name_plural = 'Stamps'
        # keyPrefix = '1ST'



class StampAssignment(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='stampassignment_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='stampassignment_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    stamp = models.ForeignKey(Stamp, models.DO_NOTHING, db_column='StampId', verbose_name='Stamp ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    subject = models.ForeignKey('User', models.DO_NOTHING, db_column='SubjectId', related_name='stampassignment_subject_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'StampAssignment'
        verbose_name = 'Stamp Assignment'
        verbose_name_plural = 'Stamp Assignments'
        # keyPrefix = '1SA'



class StaticResource(models.Model):
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=255)
    content_type = models.CharField(db_column='ContentType', max_length=120, verbose_name='MIME Type')
    body_length = models.IntegerField(db_column='BodyLength', verbose_name='Size', sf_read_only=models.READ_ONLY)
    body = models.TextField(db_column='Body', blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='staticresource_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='staticresource_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'StaticResource'
        verbose_name = 'Static Resource'
        verbose_name_plural = 'Static Resources'
        # keyPrefix = '081'



class StreamingChannel(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Streaming Channel Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='streamingchannel_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='streamingchannel_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_dynamic = models.BooleanField(db_column='IsDynamic', verbose_name='Is Dynamically Created', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(db_column='Description', max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'StreamingChannel'
        verbose_name = 'Streaming Channel'
        verbose_name_plural = 'Streaming Channels'
        # keyPrefix = '0M6'



class StreamingChannelShare(models.Model):
    parent = models.ForeignKey(StreamingChannel, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'StreamingChannelShare'
        verbose_name = 'Streaming Channel Share'
        verbose_name_plural = 'Streaming Channel Share'
        # keyPrefix = None



class TabDefinition(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Tab Definition Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(db_column='Label', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_custom = models.BooleanField(db_column='IsCustom', sf_read_only=models.READ_ONLY, default=False)
    sobject_name = models.CharField(db_column='SobjectName', max_length=255, verbose_name='sObject Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    url = models.CharField(db_column='Url', max_length=255, verbose_name='URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_available_in_aloha = models.BooleanField(db_column='IsAvailableInAloha', sf_read_only=models.READ_ONLY, default=False)
    is_available_in_lightning = models.BooleanField(db_column='IsAvailableInLightning', sf_read_only=models.READ_ONLY, default=False)
    is_available_in_mobile = models.BooleanField(db_column='IsAvailableInMobile', sf_read_only=models.READ_ONLY, default=False)
    is_available_in_desktop = models.BooleanField(db_column='IsAvailableInDesktop', sf_read_only=models.READ_ONLY, default=False)
    mobile_url = models.CharField(db_column='MobileUrl', max_length=255, verbose_name='Mobile URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TabDefinition'
        verbose_name = 'Tab Definition'
        verbose_name_plural = 'Tab Definitions'
        # keyPrefix = '0KD'



class Task(models.Model):
    who = models.ForeignKey(Contact, models.DO_NOTHING, db_column='WhoId', verbose_name='Name ID', blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, db_column='WhatId', related_name='task_what_set', verbose_name='Related To ID', blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, ChangeRequest, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Entitlement, Image, Incident, ListEmail, Opportunity, Order, Problem, ProcessException, Product2, Quote, ServiceContract, ServiceResource, Solution, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate] Master Detail Relationship *
    who_count = models.IntegerField(db_column='WhoCount', verbose_name='Relation Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    what_count = models.IntegerField(db_column='WhatCount', verbose_name='Related To Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter of Authorization'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    activity_date = models.DateField(db_column='ActivityDate', verbose_name='Due Date Only', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=255, default='Open', choices=[('Open', 'Open'), ('Completed', 'Completed'), ('Not Started', 'Not Started')])
    priority = models.CharField(db_column='Priority', max_length=20, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal')])
    is_high_priority = models.BooleanField(db_column='IsHighPriority', verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Assigned To ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    description = models.TextField(db_column='Description', blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, choices=[('Call', 'Call'), ('Meeting', 'Meeting'), ('Other', 'Other')], blank=True, null=True)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='task_account_set', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='task_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='task_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(db_column='IsArchived', verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    call_duration_in_seconds = models.IntegerField(db_column='CallDurationInSeconds', verbose_name='Call Duration', blank=True, null=True)
    call_type = models.CharField(db_column='CallType', max_length=40, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(db_column='CallDisposition', max_length=255, verbose_name='Call Result', blank=True, null=True)
    call_object = models.CharField(db_column='CallObject', max_length=255, verbose_name='Call Object Identifier', blank=True, null=True)
    reminder_date_time = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', blank=True, null=True)
    is_reminder_set = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set', default=False)
    recurrence_activity = models.ForeignKey('self', models.DO_NOTHING, db_column='RecurrenceActivityId', verbose_name='Recurrence Activity ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(db_column='IsRecurrence', verbose_name='Create Recurring Series of Tasks', sf_read_only=models.NOT_UPDATEABLE, default=False)
    recurrence_start_date_only = models.DateField(db_column='RecurrenceStartDateOnly', verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(db_column='RecurrenceEndDateOnly', verbose_name='Recurrence End', blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(db_column='RecurrenceTimeZoneSidKey', max_length=40, verbose_name='Recurrence Time Zone', blank=True, null=True)  # Too long choices skipped
    recurrence_type = models.CharField(db_column='RecurrenceType', max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthly Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(db_column='RecurrenceInterval', blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(db_column='RecurrenceDayOfWeekMask', verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(db_column='RecurrenceDayOfMonth', verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(db_column='RecurrenceInstance', max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(db_column='RecurrenceMonthOfYear', max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    recurrence_regenerated_type = models.CharField(db_column='RecurrenceRegeneratedType', max_length=40, verbose_name='Repeat This Task', choices=[('RecurrenceRegenerateAfterDueDate', 'After due date'), ('RecurrenceRegenerateAfterToday', 'After date completed'), ('RecurrenceRegenerated', '(Task Closed)')], blank=True, null=True)
    task_subtype = models.CharField(db_column='TaskSubtype', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Cadence', 'Cadence'), ('Call', 'Call')], blank=True, null=True)
    completed_date_time = models.DateTimeField(db_column='CompletedDateTime', verbose_name='Completed Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aircall_answered_by = models.CharField(db_column='aircall__Answered_by__c', max_length=255, verbose_name='Answered by', blank=True, null=True) 
    aircall_call_id = models.CharField(db_column='aircall__CallId__c', max_length=255, verbose_name='Call Id', blank=True, null=True) 
    aircall_call_recording = models.URLField(db_column='aircall__Call_Recording__c', verbose_name='Call Recording', blank=True, null=True) 
    aircall_country = models.CharField(db_column='aircall__Country__c', max_length=255, verbose_name='Country', blank=True, null=True) 
    aircall_detailed_call_type = models.CharField(db_column='aircall__Detailed_call_type__c', max_length=255, verbose_name='Detailed call type', choices=[('Inbound answered', 'Inbound answered'), ('Missed call', 'Missed call'), ('Outbound answered', 'Outbound answered'), ('Outbound unanswered', 'Outbound unanswered'), ('Voicemail', 'Voicemail')], blank=True, null=True) 
    aircall_external_contact_phone_number = models.CharField(db_column='aircall__External_contact_phone_number__c', max_length=40, verbose_name='External contact phone number', blank=True, null=True) 
    aircall_handle_time = models.DecimalField(db_column='aircall__Handle_Time__c', max_digits=18, decimal_places=0, verbose_name='Handle Time', blank=True, null=True) 
    aircall_hour_in_time_zone = models.CharField(db_column='aircall__Hour_in_time_zone__c', max_length=255, verbose_name='Hour in timezone', blank=True, null=True) 
    aircall_is_missed_call = models.BooleanField(db_column='aircall__Is_Missed_call__c', verbose_name='Is Missed call', sf_read_only=models.READ_ONLY) 
    aircall_is_voicemail = models.BooleanField(db_column='aircall__Is_Voicemail__c', verbose_name='Is Voicemail', sf_read_only=models.READ_ONLY) 
    aircall_made_by = models.CharField(db_column='aircall__Made_By__c', max_length=255, verbose_name='Made By', blank=True, null=True) 
    aircall_missed_call_reason = models.CharField(db_column='aircall__Missed_Call_Reason__c', max_length=255, verbose_name='Missed Call Reason', choices=[('abandoned_in_ivr', 'Abandoned in IVR'), ('agents_did_not_answer', 'Agents did not answer'), ('no_available_agent', 'No available agent'), ('out_of_opening_hours', 'Out of opening hours'), ('short_abandoned', 'Short abandoned'), ('abandoned_in_classic', 'Abandoned in Classic')], blank=True, null=True) 
    aircall_number_name = models.CharField(db_column='aircall__Number_Name__c', max_length=255, verbose_name='Number name', blank=True, null=True) 
    aircall_phone_number = models.CharField(db_column='aircall__Phone_number__c', max_length=40, verbose_name='Aircall number', blank=True, null=True) 
    aircall_time_zone = models.DecimalField(db_column='aircall__Time_zone__c', max_digits=18, decimal_places=0, verbose_name='Time zone', blank=True, null=True) 
    aircall_transferred_to = models.CharField(db_column='aircall__Transferred_to__c', max_length=255, verbose_name='Transferred to', blank=True, null=True) 
    aircall_waiting_time = models.DecimalField(db_column='aircall__Waiting_Time__c', max_digits=18, decimal_places=0, verbose_name='Waiting Time', blank=True, null=True) 
    aircall_connection_status = models.CharField(db_column='aircall__Connection_status__c', max_length=1300, verbose_name='Connection status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    aircall_has_connected = models.BooleanField(db_column='aircall__Has_connected__c', verbose_name='Has connected', sf_read_only=models.READ_ONLY) 
    class Meta(models.Model.Meta):
        db_table = 'Task'
        verbose_name = 'Task'
        verbose_name_plural = 'Tasks'
        # keyPrefix = '00T'



class TaskFeed(models.Model):
    parent = models.ForeignKey(Task, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='taskfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='taskfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TaskFeed'
        verbose_name = 'Task Feed'
        verbose_name_plural = 'Task Feed'
        # keyPrefix = None



class TaskPriority(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    is_high_priority = models.BooleanField(db_column='IsHighPriority', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='taskpriority_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='taskpriority_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TaskPriority'
        verbose_name = 'Task Priority Value'
        verbose_name_plural = 'Task Priority Value'
        # keyPrefix = None



class TaskRelation(models.Model):
    relation = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelationId', related_name='taskrelation_relation_set', verbose_name='Relation ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, AssetRelationship, Campaign, Case, ChangeRequest, Contact, ContactRequest, Contract, ContractLineItem, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, Entitlement, Image, In_App_Checklist_Settings__c, Incident, Lead, ListEmail, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Problem, ProcessException, Product2, Product_Category_Info__c, Product_Category__c, Quote, ServiceContract, ServiceResource, Solution, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    task = models.ForeignKey(Task, models.DO_NOTHING, db_column='TaskId', verbose_name='Task ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_what = models.BooleanField(db_column='IsWhat', sf_read_only=models.NOT_UPDATEABLE, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', related_name='taskrelation_account_set', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='taskrelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='taskrelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'TaskRelation'
        verbose_name = 'Task Relation'
        verbose_name_plural = 'Task Relations'
        # keyPrefix = '0RT'



class TaskStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(db_column='IsClosed', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='taskstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='taskstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TaskStatus'
        verbose_name = 'Task Status Value'
        verbose_name_plural = 'Task Status Value'
        # keyPrefix = None



class TaskWhoRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, db_column='RelationId', verbose_name='Relation ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    task = models.ForeignKey(Task, models.DO_NOTHING, db_column='TaskId', verbose_name='Task ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='taskwhorelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='taskwhorelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(db_column='Type', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TaskWhoRelation'
        verbose_name = 'Task Who Relation'
        verbose_name_plural = 'Task Who Relations'
        # keyPrefix = None



class TenantUsageEntitlement(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='tenantusageentitlement_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='tenantusageentitlement_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    resource_group_key = models.CharField(db_column='ResourceGroupKey', max_length=120, sf_read_only=models.READ_ONLY)
    setting = models.CharField(db_column='Setting', max_length=120, sf_read_only=models.READ_ONLY)
    start_date = models.DateField(db_column='StartDate', sf_read_only=models.READ_ONLY)
    end_date = models.DateField(db_column='EndDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    current_amount_allowed = models.DecimalField(db_column='CurrentAmountAllowed', max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY)
    frequency = models.CharField(db_column='Frequency', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Fortnightly', 'Fortnightly'), ('Monthly', 'Monthly'), ('Once', 'Once'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], blank=True, null=True)
    is_persistent_resource = models.BooleanField(db_column='IsPersistentResource', sf_read_only=models.READ_ONLY, default=False)
    has_rollover = models.BooleanField(db_column='HasRollover', sf_read_only=models.READ_ONLY, default=False)
    overage_grace = models.DecimalField(db_column='OverageGrace', max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_used = models.DecimalField(db_column='AmountUsed', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    usage_date = models.DateTimeField(db_column='UsageDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Setting Label', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TenantUsageEntitlement'
        verbose_name = 'Tenant Usage Entitlement'
        verbose_name_plural = 'Tenant Usage Entitlements'
        # keyPrefix = '0UT'



class ThirdPartyAccountLink(models.Model):
    third_party_account_link_key = models.CharField(db_column='ThirdPartyAccountLinkKey', max_length=255, verbose_name='Third Party Account Link Unique Key', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, db_column='SsoProviderId', verbose_name='Auth. Provider ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    handle = models.CharField(db_column='Handle', max_length=375, verbose_name='External User Handle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    remote_identifier = models.CharField(db_column='RemoteIdentifier', max_length=128, verbose_name='External User Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    provider = models.CharField(db_column='Provider', max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_provider_name = models.CharField(db_column='SsoProviderName', max_length=255, verbose_name='Single Sign-On Provider Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_not_sso_usable = models.BooleanField(db_column='IsNotSsoUsable', verbose_name='Is Not SSO Usable', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ThirdPartyAccountLink'
        verbose_name = 'Third Party Account Link'
        verbose_name_plural = 'Third Party Account Links'
        # keyPrefix = '0Jr'



class TodayGoal(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='todaygoal_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='todaygoal_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    value = models.DecimalField(db_column='Value', max_digits=18, decimal_places=0, blank=True, null=True)
    user = models.OneToOneField('User', models.DO_NOTHING, db_column='UserId', related_name='todaygoal_user_set', verbose_name='User ID')  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'TodayGoal'
        verbose_name = 'Goal'
        verbose_name_plural = 'Goals'
        # keyPrefix = '0Jz'



class TodayGoalShare(models.Model):
    parent = models.ForeignKey(TodayGoal, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'TodayGoalShare'
        verbose_name = 'Goal Share'
        verbose_name_plural = 'Goal Share'
        # keyPrefix = None



class Topic(models.Model):
    name = models.CharField(db_column='Name', max_length=99)
    description = models.CharField(db_column='Description', max_length=1000, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    talking_about = models.IntegerField(db_column='TalkingAbout', sf_read_only=models.READ_ONLY)
    managed_topic_type = models.CharField(db_column='ManagedTopicType', max_length=99, verbose_name='Enabled For', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Topic'
        verbose_name = 'Topic'
        verbose_name_plural = 'Topics'
        # keyPrefix = '0TO'



class TopicAssignment(models.Model):
    topic = models.ForeignKey(Topic, models.DO_NOTHING, db_column='TopicId', verbose_name='Topic ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    entity = models.ForeignKey(Account, models.DO_NOTHING, db_column='EntityId', verbose_name='Entity ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, ActiveCamp__CXA_Usage__c, ActiveCamp__Dashboard_Log__c, ActiveCamp__Error_Log__c, ActiveCamp__Setup_Data__c, Asset, Campaign, Case, ChangeRequest, Contact, ContentDocument, Contract, Dhruvsoft__O2O_Logs__c, Dhruvsoft__OpptyProductOrderProductMapping__c, Event, FeedItem, In_App_Checklist_Settings__c, Incident, Lead, Main_Product_Frequency__c, Main_Product_Info__c, Main_Product__c, Opportunity, Order, Problem, Product_Category_Info__c, Product_Category__c, ServiceResource, ServiceResourceSkill, Solution, Task, WorkOrder, WorkOrderLineItem, WorkPlan, WorkPlanTemplate, WorkPlanTemplateEntry, WorkStep, WorkStepTemplate, pandadoc__DocStatus__c, pandadoc__Object_Tokens__c, pandadoc__PandaDocDocument__c, pandadoc__PandaDocLog__c, pandadoc__PandaDoc_JsonBulder_Mapping__c, pandadoc__Pricing_Item_Mapping__c, pandadoc__Recipient_Map__c, pandadoc__Settings__c, pandadoc__TriggerSetting__c] Master Detail Relationship *
    entity_key_prefix = models.CharField(db_column='EntityKeyPrefix', max_length=3, verbose_name='Record Key Prefix', sf_read_only=models.READ_ONLY)
    entity_type = models.CharField(db_column='EntityType', max_length=80, verbose_name='Object Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TopicAssignment'
        verbose_name = 'Topic Assignment'
        verbose_name_plural = 'Topic Assignments'
        # keyPrefix = '0FT'



class TopicFeed(models.Model):
    parent = models.ForeignKey(Topic, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='topicfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, db_column='InsertedById', related_name='topicfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TopicFeed'
        verbose_name = 'Topic Feed'
        verbose_name_plural = 'Topic Feed'
        # keyPrefix = None



class TopicUserEvent(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    topic = models.ForeignKey(Topic, models.DO_NOTHING, db_column='TopicId', verbose_name='Topic ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    action_enum = models.CharField(db_column='ActionEnum', max_length=40, verbose_name='Action', sf_read_only=models.READ_ONLY, choices=[('like', None), ('comment', None), ('post', None), ('assign', None), ('shared', None), ('favorite', None), ('unfavorite', None), ('atmention', None), ('bangmention', None), ('commentlike', None), ('userEndorsement', None), ('skillPeerEndorsement', None), ('skillSelfEndorsement', None), ('bestAnswer', None)])
    created_date = models.DateTimeField(db_column='CreatedDate', verbose_name='Create Date', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TopicUserEvent'
        verbose_name = 'Topic User Event'
        verbose_name_plural = 'Topic User Events'
        # keyPrefix = '0te'



class Translation(models.Model):
    language = models.CharField(db_column='Language', max_length=40, sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    can_manage = models.BooleanField(db_column='CanManage', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='translation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='translation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Translation'
        verbose_name = 'Language Translation'
        verbose_name_plural = 'Language Translation'
        # keyPrefix = '01h'



class UiFormulaCriterion(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='uiformulacriterion_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='uiformulacriterion_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    rule = models.ForeignKey('UiFormulaRule', models.DO_NOTHING, db_column='RuleId', verbose_name='Ui Formula Rule ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    left_hand_side = models.CharField(db_column='LeftHandSide', max_length=255, verbose_name='Left Value', sf_read_only=models.READ_ONLY)
    operator_id = models.CharField(db_column='OperatorId', max_length=40, verbose_name='Formula Operator ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    right_hand_side = models.CharField(db_column='RightHandSide', max_length=255, verbose_name='Right Value', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_key_prefix = models.CharField(db_column='ParentKeyPrefix', max_length=3, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UiFormulaCriterion'
        verbose_name = 'Ui Formula Criterion'
        verbose_name_plural = 'Ui Formula Criteria'
        # keyPrefix = '0Gp'



class UiFormulaRule(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='uiformularule_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='uiformularule_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    associated_element = models.ForeignKey(PromptVersion, models.DO_NOTHING, db_column='AssociatedElementId', verbose_name='Associated Element ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    boolean_filter = models.CharField(db_column='BooleanFilter', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    formula = models.TextField(db_column='Formula', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_key_prefix = models.CharField(db_column='ParentKeyPrefix', max_length=3, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UiFormulaRule'
        verbose_name = 'Ui Formula Rule'
        verbose_name_plural = 'Ui Formula Rules'
        # keyPrefix = '09t'



class UndecidedEventRelation(models.Model):
    relation = models.ForeignKey(Calendar, models.DO_NOTHING, db_column='RelationId', verbose_name='Relation ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Contact, Lead, User]
    event = models.ForeignKey(Event, models.DO_NOTHING, db_column='EventId', verbose_name='Event ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(db_column='RespondedDate', verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='CreatedById', related_name='undecidedeventrelation_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, db_column='LastModifiedById', related_name='undecidedeventrelation_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(db_column='Type', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UndecidedEventRelation'
        verbose_name = 'Undecided Event Relation'
        verbose_name_plural = 'Undecided Event Relations'
        # keyPrefix = None



class User(models.Model):
    username = models.CharField(db_column='Username', max_length=80)
    last_name = models.CharField(db_column='LastName', max_length=80)
    first_name = models.CharField(db_column='FirstName', max_length=40, blank=True, null=True)
    middle_name = models.CharField(db_column='MiddleName', max_length=40, blank=True, null=True)
    suffix = models.CharField(db_column='Suffix', max_length=40, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    company_name = models.CharField(db_column='CompanyName', max_length=80, blank=True, null=True)
    division = models.CharField(db_column='Division', max_length=80, blank=True, null=True)
    department = models.CharField(db_column='Department', max_length=80, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=80, blank=True, null=True)
    street = models.TextField(db_column='Street', blank=True, null=True)
    city = models.CharField(db_column='City', max_length=40, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=80, blank=True, null=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(db_column='GeocodeAccuracy', max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(db_column='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    email = models.EmailField(db_column='Email')
    email_preferences_auto_bcc = models.BooleanField(db_column='EmailPreferencesAutoBcc', verbose_name='AutoBcc')
    email_preferences_auto_bcc_stay_in_touch = models.BooleanField(db_column='EmailPreferencesAutoBccStayInTouch', verbose_name='AutoBccStayInTouch')
    email_preferences_stay_in_touch_reminder = models.BooleanField(db_column='EmailPreferencesStayInTouchReminder', verbose_name='StayInTouchReminder')
    sender_email = models.EmailField(db_column='SenderEmail', verbose_name='Email Sender Address', blank=True, null=True)
    sender_name = models.CharField(db_column='SenderName', max_length=80, verbose_name='Email Sender Name', blank=True, null=True)
    signature = models.TextField(db_column='Signature', verbose_name='Email Signature', blank=True, null=True)
    stay_in_touch_subject = models.CharField(db_column='StayInTouchSubject', max_length=80, verbose_name='Stay-in-Touch Email Subject', blank=True, null=True)
    stay_in_touch_signature = models.TextField(db_column='StayInTouchSignature', verbose_name='Stay-in-Touch Email Signature', blank=True, null=True)
    stay_in_touch_note = models.CharField(db_column='StayInTouchNote', max_length=512, verbose_name='Stay-in-Touch Email Note', blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, blank=True, null=True)
    fax = models.CharField(db_column='Fax', max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(db_column='MobilePhone', max_length=40, verbose_name='Mobile', blank=True, null=True)
    alias = models.CharField(db_column='Alias', max_length=8)
    community_nickname = models.CharField(db_column='CommunityNickname', max_length=40, verbose_name='Nickname')
    badge_text = models.CharField(db_column='BadgeText', max_length=80, verbose_name='User Photo badge text overlay', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    time_zone_sid_key = models.CharField(db_column='TimeZoneSidKey', max_length=40, verbose_name='Time Zone')  # Too long choices skipped
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, db_column='UserRoleId', verbose_name='Role ID', blank=True, null=True)
    locale_sid_key = models.CharField(db_column='LocaleSidKey', max_length=40, verbose_name='Locale')  # Too long choices skipped
    receives_info_emails = models.BooleanField(db_column='ReceivesInfoEmails', verbose_name='Info Emails', default=False)
    receives_admin_info_emails = models.BooleanField(db_column='ReceivesAdminInfoEmails', verbose_name='Admin Info Emails', default=False)
    email_encoding_key = models.CharField(db_column='EmailEncodingKey', max_length=40, verbose_name='Email Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    profile = models.ForeignKey(Profile, models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID')
    user_type = models.CharField(db_column='UserType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    language_locale_key = models.CharField(db_column='LanguageLocaleKey', max_length=40, verbose_name='Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    employee_number = models.CharField(db_column='EmployeeNumber', max_length=20, blank=True, null=True)
    delegated_approver = models.ForeignKey(Group, models.DO_NOTHING, db_column='DelegatedApproverId', verbose_name='Delegated Approver ID', blank=True, null=True)  # Reference to tables [Group, User]
    manager = models.ForeignKey('self', models.DO_NOTHING, db_column='ManagerId', related_name='user_manager_set', verbose_name='Manager ID', blank=True, null=True)
    last_login_date = models.DateTimeField(db_column='LastLoginDate', verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_password_change_date = models.DateTimeField(db_column='LastPasswordChangeDate', verbose_name='Last Password Change or Reset', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('self', models.DO_NOTHING, db_column='CreatedById', related_name='user_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('self', models.DO_NOTHING, db_column='LastModifiedById', related_name='user_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    number_of_failed_logins = models.IntegerField(db_column='NumberOfFailedLogins', verbose_name='Failed Login Attempts', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offline_trial_expiration_date = models.DateTimeField(db_column='OfflineTrialExpirationDate', verbose_name='Offline Edition Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offline_pda_trial_expiration_date = models.DateTimeField(db_column='OfflinePdaTrialExpirationDate', verbose_name='Sales Anywhere Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_permissions_marketing_user = models.BooleanField(db_column='UserPermissionsMarketingUser', verbose_name='Marketing User')
    user_permissions_offline_user = models.BooleanField(db_column='UserPermissionsOfflineUser', verbose_name='Offline User')
    user_permissions_avantgo_user = models.BooleanField(db_column='UserPermissionsAvantgoUser', verbose_name='AvantGo User')
    user_permissions_call_center_auto_login = models.BooleanField(db_column='UserPermissionsCallCenterAutoLogin', verbose_name='Auto-login To Call Center')
    user_permissions_sfcontent_user = models.BooleanField(db_column='UserPermissionsSFContentUser', verbose_name='Salesforce CRM Content User')
    user_permissions_interaction_user = models.BooleanField(db_column='UserPermissionsInteractionUser', verbose_name='Flow User')
    user_permissions_support_user = models.BooleanField(db_column='UserPermissionsSupportUser', verbose_name='Service Cloud User')
    forecast_enabled = models.BooleanField(db_column='ForecastEnabled', verbose_name='Allow Forecasting', default=False)
    user_preferences_activity_reminders_popup = models.BooleanField(db_column='UserPreferencesActivityRemindersPopup', verbose_name='ActivityRemindersPopup')
    user_preferences_event_reminders_checkbox_default = models.BooleanField(db_column='UserPreferencesEventRemindersCheckboxDefault', verbose_name='EventRemindersCheckboxDefault')
    user_preferences_task_reminders_checkbox_default = models.BooleanField(db_column='UserPreferencesTaskRemindersCheckboxDefault', verbose_name='TaskRemindersCheckboxDefault')
    user_preferences_reminder_sound_off = models.BooleanField(db_column='UserPreferencesReminderSoundOff', verbose_name='ReminderSoundOff')
    user_preferences_disable_all_feeds_email = models.BooleanField(db_column='UserPreferencesDisableAllFeedsEmail', verbose_name='DisableAllFeedsEmail')
    user_preferences_disable_followers_email = models.BooleanField(db_column='UserPreferencesDisableFollowersEmail', verbose_name='DisableFollowersEmail')
    user_preferences_disable_profile_post_email = models.BooleanField(db_column='UserPreferencesDisableProfilePostEmail', verbose_name='DisableProfilePostEmail')
    user_preferences_disable_change_comment_email = models.BooleanField(db_column='UserPreferencesDisableChangeCommentEmail', verbose_name='DisableChangeCommentEmail')
    user_preferences_disable_later_comment_email = models.BooleanField(db_column='UserPreferencesDisableLaterCommentEmail', verbose_name='DisableLaterCommentEmail')
    user_preferences_dis_prof_post_comment_email = models.BooleanField(db_column='UserPreferencesDisProfPostCommentEmail', verbose_name='DisProfPostCommentEmail')
    user_preferences_apex_pages_developer_mode = models.BooleanField(db_column='UserPreferencesApexPagesDeveloperMode', verbose_name='ApexPagesDeveloperMode')
    user_preferences_hide_csnget_chatter_mobile_task = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask')
    user_preferences_disable_mentions_post_email = models.BooleanField(db_column='UserPreferencesDisableMentionsPostEmail', verbose_name='DisableMentionsPostEmail')
    user_preferences_dis_mentions_comment_email = models.BooleanField(db_column='UserPreferencesDisMentionsCommentEmail', verbose_name='DisMentionsCommentEmail')
    user_preferences_hide_csndesktop_task = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask')
    user_preferences_hide_chatter_onboarding_splash = models.BooleanField(db_column='UserPreferencesHideChatterOnboardingSplash', verbose_name='HideChatterOnboardingSplash')
    user_preferences_hide_second_chatter_onboarding_splash = models.BooleanField(db_column='UserPreferencesHideSecondChatterOnboardingSplash', verbose_name='HideSecondChatterOnboardingSplash')
    user_preferences_dis_comment_after_like_email = models.BooleanField(db_column='UserPreferencesDisCommentAfterLikeEmail', verbose_name='DisCommentAfterLikeEmail')
    user_preferences_disable_like_email = models.BooleanField(db_column='UserPreferencesDisableLikeEmail', verbose_name='DisableLikeEmail')
    user_preferences_sort_feed_by_comment = models.BooleanField(db_column='UserPreferencesSortFeedByComment', verbose_name='SortFeedByComment')
    user_preferences_disable_message_email = models.BooleanField(db_column='UserPreferencesDisableMessageEmail', verbose_name='DisableMessageEmail')
    user_preferences_disable_bookmark_email = models.BooleanField(db_column='UserPreferencesDisableBookmarkEmail', verbose_name='DisableBookmarkEmail')
    user_preferences_disable_share_post_email = models.BooleanField(db_column='UserPreferencesDisableSharePostEmail', verbose_name='DisableSharePostEmail')
    user_preferences_enable_auto_sub_for_feeds = models.BooleanField(db_column='UserPreferencesEnableAutoSubForFeeds', verbose_name='EnableAutoSubForFeeds')
    user_preferences_disable_file_share_notifications_for_api = models.BooleanField(db_column='UserPreferencesDisableFileShareNotificationsForApi', verbose_name='DisableFileShareNotificationsForApi')
    user_preferences_show_title_to_external_users = models.BooleanField(db_column='UserPreferencesShowTitleToExternalUsers', verbose_name='ShowTitleToExternalUsers')
    user_preferences_show_manager_to_external_users = models.BooleanField(db_column='UserPreferencesShowManagerToExternalUsers', verbose_name='ShowManagerToExternalUsers')
    user_preferences_show_email_to_external_users = models.BooleanField(db_column='UserPreferencesShowEmailToExternalUsers', verbose_name='ShowEmailToExternalUsers')
    user_preferences_show_work_phone_to_external_users = models.BooleanField(db_column='UserPreferencesShowWorkPhoneToExternalUsers', verbose_name='ShowWorkPhoneToExternalUsers')
    user_preferences_show_mobile_phone_to_external_users = models.BooleanField(db_column='UserPreferencesShowMobilePhoneToExternalUsers', verbose_name='ShowMobilePhoneToExternalUsers')
    user_preferences_show_fax_to_external_users = models.BooleanField(db_column='UserPreferencesShowFaxToExternalUsers', verbose_name='ShowFaxToExternalUsers')
    user_preferences_show_street_address_to_external_users = models.BooleanField(db_column='UserPreferencesShowStreetAddressToExternalUsers', verbose_name='ShowStreetAddressToExternalUsers')
    user_preferences_show_city_to_external_users = models.BooleanField(db_column='UserPreferencesShowCityToExternalUsers', verbose_name='ShowCityToExternalUsers')
    user_preferences_show_state_to_external_users = models.BooleanField(db_column='UserPreferencesShowStateToExternalUsers', verbose_name='ShowStateToExternalUsers')
    user_preferences_show_postal_code_to_external_users = models.BooleanField(db_column='UserPreferencesShowPostalCodeToExternalUsers', verbose_name='ShowPostalCodeToExternalUsers')
    user_preferences_show_country_to_external_users = models.BooleanField(db_column='UserPreferencesShowCountryToExternalUsers', verbose_name='ShowCountryToExternalUsers')
    user_preferences_show_profile_pic_to_guest_users = models.BooleanField(db_column='UserPreferencesShowProfilePicToGuestUsers', verbose_name='ShowProfilePicToGuestUsers')
    user_preferences_show_title_to_guest_users = models.BooleanField(db_column='UserPreferencesShowTitleToGuestUsers', verbose_name='ShowTitleToGuestUsers')
    user_preferences_show_city_to_guest_users = models.BooleanField(db_column='UserPreferencesShowCityToGuestUsers', verbose_name='ShowCityToGuestUsers')
    user_preferences_show_state_to_guest_users = models.BooleanField(db_column='UserPreferencesShowStateToGuestUsers', verbose_name='ShowStateToGuestUsers')
    user_preferences_show_postal_code_to_guest_users = models.BooleanField(db_column='UserPreferencesShowPostalCodeToGuestUsers', verbose_name='ShowPostalCodeToGuestUsers')
    user_preferences_show_country_to_guest_users = models.BooleanField(db_column='UserPreferencesShowCountryToGuestUsers', verbose_name='ShowCountryToGuestUsers')
    user_preferences_show_forecasting_change_signals = models.BooleanField(db_column='UserPreferencesShowForecastingChangeSignals', verbose_name='ShowForecastingChangeSignals')
    user_preferences_hide_s1_browser_ui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI')
    user_preferences_disable_endorsement_email = models.BooleanField(db_column='UserPreferencesDisableEndorsementEmail', verbose_name='DisableEndorsementEmail')
    user_preferences_path_assistant_collapsed = models.BooleanField(db_column='UserPreferencesPathAssistantCollapsed', verbose_name='PathAssistantCollapsed')
    user_preferences_show_email_to_guest_users = models.BooleanField(db_column='UserPreferencesShowEmailToGuestUsers', verbose_name='ShowEmailToGuestUsers')
    user_preferences_show_manager_to_guest_users = models.BooleanField(db_column='UserPreferencesShowManagerToGuestUsers', verbose_name='ShowManagerToGuestUsers')
    user_preferences_show_work_phone_to_guest_users = models.BooleanField(db_column='UserPreferencesShowWorkPhoneToGuestUsers', verbose_name='ShowWorkPhoneToGuestUsers')
    user_preferences_show_mobile_phone_to_guest_users = models.BooleanField(db_column='UserPreferencesShowMobilePhoneToGuestUsers', verbose_name='ShowMobilePhoneToGuestUsers')
    user_preferences_show_fax_to_guest_users = models.BooleanField(db_column='UserPreferencesShowFaxToGuestUsers', verbose_name='ShowFaxToGuestUsers')
    user_preferences_show_street_address_to_guest_users = models.BooleanField(db_column='UserPreferencesShowStreetAddressToGuestUsers', verbose_name='ShowStreetAddressToGuestUsers')
    user_preferences_lightning_experience_preferred = models.BooleanField(db_column='UserPreferencesLightningExperiencePreferred', verbose_name='LightningExperiencePreferred')
    user_preferences_preview_lightning = models.BooleanField(db_column='UserPreferencesPreviewLightning', verbose_name='PreviewLightning')
    user_preferences_hide_end_user_onboarding_assistant_modal = models.BooleanField(db_column='UserPreferencesHideEndUserOnboardingAssistantModal', verbose_name='HideEndUserOnboardingAssistantModal')
    user_preferences_hide_lightning_migration_modal = models.BooleanField(db_column='UserPreferencesHideLightningMigrationModal', verbose_name='HideLightningMigrationModal')
    user_preferences_hide_sfx_welcome_mat = models.BooleanField(db_column='UserPreferencesHideSfxWelcomeMat', verbose_name='HideSfxWelcomeMat')
    user_preferences_hide_bigger_photo_callout = models.BooleanField(db_column='UserPreferencesHideBiggerPhotoCallout', verbose_name='HideBiggerPhotoCallout')
    user_preferences_global_nav_bar_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavBarWTShown', verbose_name='GlobalNavBarWTShown')
    user_preferences_global_nav_grid_menu_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavGridMenuWTShown', verbose_name='GlobalNavGridMenuWTShown')
    user_preferences_create_lexapps_wtshown = models.BooleanField(db_column='UserPreferencesCreateLEXAppsWTShown', verbose_name='CreateLEXAppsWTShown')
    user_preferences_favorites_wtshown = models.BooleanField(db_column='UserPreferencesFavoritesWTShown', verbose_name='FavoritesWTShown')
    user_preferences_record_home_section_collapse_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeSectionCollapseWTShown', verbose_name='RecordHomeSectionCollapseWTShown')
    user_preferences_record_home_reserved_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeReservedWTShown', verbose_name='RecordHomeReservedWTShown')
    user_preferences_favorites_show_top_favorites = models.BooleanField(db_column='UserPreferencesFavoritesShowTopFavorites', verbose_name='FavoritesShowTopFavorites')
    user_preferences_enable_voice_call_recording = models.BooleanField(db_column='UserPreferencesEnableVoiceCallRecording', verbose_name='EnableVoiceCallRecording')
    user_preferences_exclude_mail_app_attachments = models.BooleanField(db_column='UserPreferencesExcludeMailAppAttachments', verbose_name='ExcludeMailAppAttachments')
    user_preferences_suppress_task_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressTaskSFXReminders', verbose_name='SuppressTaskSFXReminders')
    user_preferences_suppress_event_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressEventSFXReminders', verbose_name='SuppressEventSFXReminders')
    user_preferences_preview_custom_theme = models.BooleanField(db_column='UserPreferencesPreviewCustomTheme', verbose_name='PreviewCustomTheme')
    user_preferences_has_celebration_badge = models.BooleanField(db_column='UserPreferencesHasCelebrationBadge', verbose_name='HasCelebrationBadge')
    user_preferences_user_debug_mode_pref = models.BooleanField(db_column='UserPreferencesUserDebugModePref', verbose_name='UserDebugModePref')
    user_preferences_srhoverride_activities = models.BooleanField(db_column='UserPreferencesSRHOverrideActivities', verbose_name='SRHOverrideActivities')
    user_preferences_new_lightning_report_run_page_enabled = models.BooleanField(db_column='UserPreferencesNewLightningReportRunPageEnabled', verbose_name='NewLightningReportRunPageEnabled')
    user_preferences_reverse_open_activities_view = models.BooleanField(db_column='UserPreferencesReverseOpenActivitiesView', verbose_name='ReverseOpenActivitiesView')
    user_preferences_has_sent_warning_email = models.BooleanField(db_column='UserPreferencesHasSentWarningEmail', verbose_name='HasSentWarningEmail')
    user_preferences_has_sent_warning_email238 = models.BooleanField(db_column='UserPreferencesHasSentWarningEmail238', verbose_name='HasSentWarningEmail238')
    user_preferences_native_email_client = models.BooleanField(db_column='UserPreferencesNativeEmailClient', verbose_name='NativeEmailClient')
    user_preferences_send_list_email_through_external_service = models.BooleanField(db_column='UserPreferencesSendListEmailThroughExternalService', verbose_name='SendListEmailThroughExternalService')
    user_preferences_hide_browse_product_redirect_confirmation = models.BooleanField(db_column='UserPreferencesHideBrowseProductRedirectConfirmation', verbose_name='HideBrowseProductRedirectConfirmation')
    user_preferences_hide_online_sales_app_welcome_mat = models.BooleanField(db_column='UserPreferencesHideOnlineSalesAppWelcomeMat', verbose_name='HideOnlineSalesAppWelcomeMat')
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_center = models.ForeignKey(CallCenter, models.DO_NOTHING, db_column='CallCenterId', verbose_name='Call Center ID', blank=True, null=True)
    extension = models.CharField(db_column='Extension', max_length=40, blank=True, null=True)
    federation_identifier = models.CharField(db_column='FederationIdentifier', max_length=512, verbose_name='SAML Federation ID', blank=True, null=True)
    about_me = models.TextField(db_column='AboutMe', blank=True, null=True)
    full_photo_url = models.URLField(db_column='FullPhotoUrl', verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(db_column='SmallPhotoUrl', verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_ext_indicator_visible = models.BooleanField(db_column='IsExtIndicatorVisible', verbose_name='Show external indicator', sf_read_only=models.READ_ONLY, default=False)
    out_of_office_message = models.CharField(db_column='OutOfOfficeMessage', max_length=40, verbose_name='Out of office message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(db_column='MediumPhotoUrl', verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    digest_frequency = models.CharField(db_column='DigestFrequency', max_length=40, verbose_name='Chatter Email Highlights Frequency', default='N', choices=[('D', 'Daily'), ('W', 'Weekly'), ('N', 'Never')])
    default_group_notification_frequency = models.CharField(db_column='DefaultGroupNotificationFrequency', max_length=40, verbose_name='Default Notification Frequency when Joining Groups', default='N', choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')])
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(db_column='BannerPhotoUrl', verbose_name='Url for banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_banner_photo_url = models.URLField(db_column='SmallBannerPhotoUrl', verbose_name='Url for IOS banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_banner_photo_url = models.URLField(db_column='MediumBannerPhotoUrl', verbose_name='Url for Android banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_profile_photo_active = models.BooleanField(db_column='IsProfilePhotoActive', verbose_name='Has Profile Photo', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'User'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        # keyPrefix = '005'



class UserAppInfo(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userappinfo_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userappinfo_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='userappinfo_user_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    form_factor = models.CharField(db_column='FormFactor', max_length=255, choices=[('Small', 'Phone'), ('Medium', 'Tablet'), ('Large', 'Desktop')])
    app_definition = models.ForeignKey(AppDefinition, models.DO_NOTHING, db_column='AppDefinitionId', verbose_name='App Definition ID', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserAppInfo'
        verbose_name = 'Last Used App'
        verbose_name_plural = 'Last Used App'
        # keyPrefix = '0Ds'



class UserAppMenuCustomization(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userappmenucustomization_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userappmenucustomization_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    application = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='ApplicationId', verbose_name='Application ID', blank=True, null=True)  # Master Detail Relationship *
    sort_order = models.IntegerField(db_column='SortOrder', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuCustomization'
        verbose_name = 'UserAppMenuCustomization'
        verbose_name_plural = 'UserAppMenuCustomizations'
        # keyPrefix = '0Nw'



class UserAppMenuCustomizationShare(models.Model):
    parent = models.ForeignKey(UserAppMenuCustomization, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuCustomizationShare'
        verbose_name = 'UserAppMenuCustomization Share'
        verbose_name_plural = 'UserAppMenuCustomization Share'
        # keyPrefix = None



class UserAppMenuItem(models.Model):
    app_menu_item_id = models.CharField(db_column='AppMenuItemId', max_length=255, verbose_name='AppMenuItem ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    application_id = models.CharField(db_column='ApplicationId', max_length=18, verbose_name='Application ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference to a table
    label = models.CharField(db_column='Label', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=250, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_sort_order = models.IntegerField(db_column='UserSortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True, null=True)
    logo_url = models.URLField(db_column='LogoUrl', verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(db_column='IconUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    info_url = models.URLField(db_column='InfoUrl', verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_url = models.URLField(db_column='StartUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(db_column='MobileStartUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible = models.BooleanField(db_column='IsVisible', sf_read_only=models.READ_ONLY, default=False)
    is_using_admin_authorization = models.BooleanField(db_column='IsUsingAdminAuthorization', verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuItem'
        verbose_name = 'Application'
        verbose_name_plural = 'Applications'
        # keyPrefix = '07p'



class UserEmailCalendarSync(models.Model):
    external_id = models.CharField(db_column='ExternalId', max_length=255, blank=True, null=True)
    assigned_id = models.CharField(db_column='AssignedId', max_length=18, blank=True, null=True)
    configuration_id = models.CharField(db_column='ConfigurationId', max_length=18, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserEmailCalendarSync'
        verbose_name = 'User Email Calendar Sync'
        verbose_name_plural = 'User Email Calendar Sync'
        # keyPrefix = '0fm'



class UserEmailPreferredPerson(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='User Email Preferred Person Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='useremailpreferredperson_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='useremailpreferredperson_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    email = models.EmailField(db_column='Email')
    person_record = models.ForeignKey(Contact, models.DO_NOTHING, db_column='PersonRecordId', verbose_name='Person Record ID')  # Reference to tables [Contact, Lead, User] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'UserEmailPreferredPerson'
        verbose_name = 'User Email Preferred Person'
        verbose_name_plural = 'User Email Preferred People'
        # keyPrefix = '0UV'



class UserEmailPreferredPersonShare(models.Model):
    parent = models.ForeignKey(UserEmailPreferredPerson, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserEmailPreferredPersonShare'
        verbose_name = 'User Email Preferred Person Share'
        verbose_name_plural = 'User Email Preferred Person Share'
        # keyPrefix = None



class UserEntityAccess(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_mergeable = models.BooleanField(db_column='IsMergeable', sf_read_only=models.READ_ONLY, default=False)
    is_updatable = models.BooleanField(db_column='IsUpdatable', sf_read_only=models.READ_ONLY, default=False)
    is_activateable = models.BooleanField(db_column='IsActivateable', sf_read_only=models.READ_ONLY, default=False)
    is_readable = models.BooleanField(db_column='IsReadable', sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(db_column='IsCreatable', sf_read_only=models.READ_ONLY, default=False)
    is_editable = models.BooleanField(db_column='IsEditable', sf_read_only=models.READ_ONLY, default=False)
    is_deletable = models.BooleanField(db_column='IsDeletable', sf_read_only=models.READ_ONLY, default=False)
    is_undeletable = models.BooleanField(db_column='IsUndeletable', sf_read_only=models.READ_ONLY, default=False)
    is_fls_updatable = models.BooleanField(db_column='IsFlsUpdatable', verbose_name='Is Field-level Security Updatable?', sf_read_only=models.READ_ONLY, default=False)
    entity_definition_id = models.CharField(db_column='EntityDefinitionId', max_length=150, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserEntityAccess'
        verbose_name = 'User Entity Access'
        verbose_name_plural = 'User Entity Access'
        # keyPrefix = '07u'



class UserFeed(models.Model):
    parent = models.ForeignKey(User, models.DO_NOTHING, db_column='ParentId', related_name='userfeed_parent_set', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='userfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserFeed'
        verbose_name = 'User Feed'
        verbose_name_plural = 'User Feed'
        # keyPrefix = None



class UserFieldAccess(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_updatable = models.BooleanField(db_column='IsUpdatable', sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(db_column='IsCreatable', sf_read_only=models.READ_ONLY, default=False)
    is_accessible = models.BooleanField(db_column='IsAccessible', sf_read_only=models.READ_ONLY, default=False)
    entity_definition_id = models.CharField(db_column='EntityDefinitionId', max_length=150, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(db_column='FieldDefinitionId', max_length=150, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserFieldAccess'
        verbose_name = 'User Field Access'
        verbose_name_plural = 'User Field Access'
        # keyPrefix = '4fp'



class UserLicense(models.Model):
    license_definition_key = models.CharField(db_column='LicenseDefinitionKey', max_length=40, verbose_name='License Def. ID', sf_read_only=models.READ_ONLY)
    total_licenses = models.IntegerField(db_column='TotalLicenses', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    used_licenses = models.IntegerField(db_column='UsedLicenses', sf_read_only=models.READ_ONLY)
    used_licenses_last_updated = models.DateTimeField(db_column='UsedLicensesLastUpdated', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=40, sf_read_only=models.READ_ONLY)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserLicense'
        verbose_name = 'User License'
        verbose_name_plural = 'User Licenses'
        # keyPrefix = '100'



class UserListView(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userlistview_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userlistview_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='userlistview_user_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    list_view = models.ForeignKey(ListView, models.DO_NOTHING, db_column='ListViewId', verbose_name='List View ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(db_column='SobjectType', max_length=255, verbose_name='Custom Object Definition ID', blank=True, null=True)  # Too long choices skipped
    last_viewed_chart = models.CharField(db_column='LastViewedChart', max_length=255, verbose_name='List View Chart ID', choices=[('AccountsByIndustry', None), ('CampaignsByNumberOfResponses', None), ('CampaignsByStatus', None), ('CampaignsByType', None), ('ContactsByAccount', None), ('ContactsByLeadSource', None), ('LeadsBySource', None), ('PipelineByAccount', None), ('PipelineByFiscalPeriod', None), ('PipelineByStage', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserListView'
        verbose_name = 'User List View'
        verbose_name_plural = 'User List View'
        # keyPrefix = '0Na'



class UserListViewCriterion(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userlistviewcriterion_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userlistviewcriterion_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user_list_view = models.ForeignKey(UserListView, models.DO_NOTHING, db_column='UserListViewId', verbose_name='User List View ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sort_order = models.IntegerField(db_column='SortOrder')
    column_name = models.CharField(db_column='ColumnName', max_length=40)
    operation = models.CharField(db_column='Operation', max_length=255, choices=[('equals', 'equals'), ('startsWith', 'starts with'), ('contains', 'contains'), ('rangeInclusive', 'range inclusive'), ('includes', 'includes')])
    value = models.CharField(db_column='Value', max_length=85, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserListViewCriterion'
        verbose_name = 'User List View Criteria'
        verbose_name_plural = 'User List View Criteria'
        # keyPrefix = '0JU'



class UserLogin(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='userlogin_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_frozen = models.BooleanField(db_column='IsFrozen', sf_read_only=models.NOT_CREATEABLE, default=False)
    is_password_locked = models.BooleanField(db_column='IsPasswordLocked', sf_read_only=models.NOT_CREATEABLE, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userlogin_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserLogin'
        verbose_name = 'User Login'
        verbose_name_plural = 'User Login'
        # keyPrefix = '0Yw'



class UserPackageLicense(models.Model):
    package_license = models.ForeignKey(PackageLicense, models.DO_NOTHING, db_column='PackageLicenseId', verbose_name='Package License ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='userpackagelicense_user_set', verbose_name='Assigned User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userpackagelicense_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userpackagelicense_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPackageLicense'
        verbose_name = 'User Package License'
        verbose_name_plural = 'User Package License'
        # keyPrefix = '051'



class UserPermissionAccess(models.Model):
    last_cache_update = models.DateTimeField(db_column='LastCacheUpdate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    permissions_email_single = models.BooleanField(db_column='PermissionsEmailSingle', verbose_name='Send Email', sf_read_only=models.READ_ONLY)
    permissions_email_mass = models.BooleanField(db_column='PermissionsEmailMass', verbose_name='Mass Email', sf_read_only=models.READ_ONLY)
    permissions_edit_task = models.BooleanField(db_column='PermissionsEditTask', verbose_name='Edit Tasks', sf_read_only=models.READ_ONLY)
    permissions_edit_event = models.BooleanField(db_column='PermissionsEditEvent', verbose_name='Edit Events', sf_read_only=models.READ_ONLY)
    permissions_export_report = models.BooleanField(db_column='PermissionsExportReport', verbose_name='Export Reports', sf_read_only=models.READ_ONLY)
    permissions_import_personal = models.BooleanField(db_column='PermissionsImportPersonal', verbose_name='Import Personal Contacts', sf_read_only=models.READ_ONLY)
    permissions_data_export = models.BooleanField(db_column='PermissionsDataExport', verbose_name='Weekly Data Export', sf_read_only=models.READ_ONLY)
    permissions_manage_users = models.BooleanField(db_column='PermissionsManageUsers', verbose_name='Manage Users', sf_read_only=models.READ_ONLY)
    permissions_edit_public_filters = models.BooleanField(db_column='PermissionsEditPublicFilters', verbose_name='Manage Public List Views', sf_read_only=models.READ_ONLY)
    permissions_edit_public_templates = models.BooleanField(db_column='PermissionsEditPublicTemplates', verbose_name='Manage Public Classic Email Templates', sf_read_only=models.READ_ONLY)
    permissions_modify_all_data = models.BooleanField(db_column='PermissionsModifyAllData', verbose_name='Modify All Data', sf_read_only=models.READ_ONLY)
    permissions_manage_cases = models.BooleanField(db_column='PermissionsManageCases', verbose_name='Manage Cases', sf_read_only=models.READ_ONLY)
    permissions_mass_inline_edit = models.BooleanField(db_column='PermissionsMassInlineEdit', verbose_name='Mass Edits from Lists', sf_read_only=models.READ_ONLY)
    permissions_manage_solutions = models.BooleanField(db_column='PermissionsManageSolutions', verbose_name='Manage Published Solutions', sf_read_only=models.READ_ONLY)
    permissions_customize_application = models.BooleanField(db_column='PermissionsCustomizeApplication', verbose_name='Customize Application', sf_read_only=models.READ_ONLY)
    permissions_edit_readonly_fields = models.BooleanField(db_column='PermissionsEditReadonlyFields', verbose_name='Edit Read Only Fields', sf_read_only=models.READ_ONLY)
    permissions_run_reports = models.BooleanField(db_column='PermissionsRunReports', verbose_name='Run Reports', sf_read_only=models.READ_ONLY)
    permissions_view_setup = models.BooleanField(db_column='PermissionsViewSetup', verbose_name='View Setup and Configuration', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_entity = models.BooleanField(db_column='PermissionsTransferAnyEntity', verbose_name='Transfer Record', sf_read_only=models.READ_ONLY)
    permissions_new_report_builder = models.BooleanField(db_column='PermissionsNewReportBuilder', verbose_name='Report Builder', sf_read_only=models.READ_ONLY)
    permissions_activate_contract = models.BooleanField(db_column='PermissionsActivateContract', verbose_name='Activate Contracts', sf_read_only=models.READ_ONLY)
    permissions_activate_order = models.BooleanField(db_column='PermissionsActivateOrder', verbose_name='Activate Orders', sf_read_only=models.READ_ONLY)
    permissions_import_leads = models.BooleanField(db_column='PermissionsImportLeads', verbose_name='Import Leads', sf_read_only=models.READ_ONLY)
    permissions_manage_leads = models.BooleanField(db_column='PermissionsManageLeads', verbose_name='Manage Leads', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_lead = models.BooleanField(db_column='PermissionsTransferAnyLead', verbose_name='Transfer Leads', sf_read_only=models.READ_ONLY)
    permissions_view_all_data = models.BooleanField(db_column='PermissionsViewAllData', verbose_name='View All Data', sf_read_only=models.READ_ONLY)
    permissions_edit_public_documents = models.BooleanField(db_column='PermissionsEditPublicDocuments', verbose_name='Manage Public Documents', sf_read_only=models.READ_ONLY)
    permissions_view_encrypted_data = models.BooleanField(db_column='PermissionsViewEncryptedData', verbose_name='View Encrypted Data', sf_read_only=models.READ_ONLY)
    permissions_edit_brand_templates = models.BooleanField(db_column='PermissionsEditBrandTemplates', verbose_name='Manage Letterheads', sf_read_only=models.READ_ONLY)
    permissions_edit_html_templates = models.BooleanField(db_column='PermissionsEditHtmlTemplates', verbose_name='Edit HTML Templates', sf_read_only=models.READ_ONLY)
    permissions_chatter_internal_user = models.BooleanField(db_column='PermissionsChatterInternalUser', verbose_name='Chatter Internal User', sf_read_only=models.READ_ONLY)
    permissions_delete_activated_contract = models.BooleanField(db_column='PermissionsDeleteActivatedContract', verbose_name='Delete Activated Contracts', sf_read_only=models.READ_ONLY)
    permissions_chatter_invite_external_users = models.BooleanField(db_column='PermissionsChatterInviteExternalUsers', verbose_name='Invite Customers To Chatter', sf_read_only=models.READ_ONLY)
    permissions_send_sit_requests = models.BooleanField(db_column='PermissionsSendSitRequests', verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.READ_ONLY)
    permissions_override_forecasts = models.BooleanField(db_column='PermissionsOverrideForecasts', verbose_name='Override Forecasts', sf_read_only=models.READ_ONLY)
    permissions_view_all_forecasts = models.BooleanField(db_column='PermissionsViewAllForecasts', verbose_name='View All Forecasts', sf_read_only=models.READ_ONLY)
    permissions_manage_remote_access = models.BooleanField(db_column='PermissionsManageRemoteAccess', verbose_name='Manage Connected Apps', sf_read_only=models.READ_ONLY)
    permissions_can_use_new_dashboard_builder = models.BooleanField(db_column='PermissionsCanUseNewDashboardBuilder', verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.READ_ONLY)
    permissions_manage_categories = models.BooleanField(db_column='PermissionsManageCategories', verbose_name='Manage Categories', sf_read_only=models.READ_ONLY)
    permissions_convert_leads = models.BooleanField(db_column='PermissionsConvertLeads', verbose_name='Convert Leads', sf_read_only=models.READ_ONLY)
    permissions_password_never_expires = models.BooleanField(db_column='PermissionsPasswordNeverExpires', verbose_name='Password Never Expires', sf_read_only=models.READ_ONLY)
    permissions_edit_activated_orders = models.BooleanField(db_column='PermissionsEditActivatedOrders', verbose_name='Edit Activated Orders', sf_read_only=models.READ_ONLY)
    permissions_install_packaging = models.BooleanField(db_column='PermissionsInstallPackaging', verbose_name='Download AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_publish_packaging = models.BooleanField(db_column='PermissionsPublishPackaging', verbose_name='Upload AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_chatter_own_groups = models.BooleanField(db_column='PermissionsChatterOwnGroups', verbose_name='Create and Own New Chatter Groups', sf_read_only=models.READ_ONLY)
    permissions_edit_opp_line_item_unit_price = models.BooleanField(db_column='PermissionsEditOppLineItemUnitPrice', verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.READ_ONLY)
    permissions_create_packaging = models.BooleanField(db_column='PermissionsCreatePackaging', verbose_name='Create AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_bulk_api_hard_delete = models.BooleanField(db_column='PermissionsBulkApiHardDelete', verbose_name='Bulk API Hard Delete', sf_read_only=models.READ_ONLY)
    permissions_inbound_migration_tools_user = models.BooleanField(db_column='PermissionsInboundMigrationToolsUser', verbose_name='Deploy Change Sets', sf_read_only=models.READ_ONLY)
    permissions_solution_import = models.BooleanField(db_column='PermissionsSolutionImport', verbose_name='Import Solutions', sf_read_only=models.READ_ONLY)
    permissions_manage_call_centers = models.BooleanField(db_column='PermissionsManageCallCenters', verbose_name='Manage Call Centers', sf_read_only=models.READ_ONLY)
    permissions_manage_synonyms = models.BooleanField(db_column='PermissionsManageSynonyms', verbose_name='Manage Synonyms', sf_read_only=models.READ_ONLY)
    permissions_outbound_migration_tools_user = models.BooleanField(db_column='PermissionsOutboundMigrationToolsUser', verbose_name='Create and Upload Change Sets', sf_read_only=models.READ_ONLY)
    permissions_view_content = models.BooleanField(db_column='PermissionsViewContent', verbose_name='View Content in Portals', sf_read_only=models.READ_ONLY)
    permissions_manage_email_client_config = models.BooleanField(db_column='PermissionsManageEmailClientConfig', verbose_name='Manage Email Client Configurations', sf_read_only=models.READ_ONLY)
    permissions_enable_notifications = models.BooleanField(db_column='PermissionsEnableNotifications', verbose_name='Send Outbound Messages', sf_read_only=models.READ_ONLY)
    permissions_manage_data_integrations = models.BooleanField(db_column='PermissionsManageDataIntegrations', verbose_name='Manage Data Integrations', sf_read_only=models.READ_ONLY)
    permissions_distribute_from_pers_wksp = models.BooleanField(db_column='PermissionsDistributeFromPersWksp', verbose_name='Create Content Deliveries', sf_read_only=models.READ_ONLY)
    permissions_manage_mobile = models.BooleanField(db_column='PermissionsManageMobile', verbose_name='Manage Mobile Configurations', sf_read_only=models.READ_ONLY)
    permissions_api_enabled = models.BooleanField(db_column='PermissionsApiEnabled', verbose_name='API Enabled', sf_read_only=models.READ_ONLY)
    permissions_manage_custom_report_types = models.BooleanField(db_column='PermissionsManageCustomReportTypes', verbose_name='Manage Custom Report Types', sf_read_only=models.READ_ONLY)
    permissions_edit_case_comments = models.BooleanField(db_column='PermissionsEditCaseComments', verbose_name='Edit Case Comments', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_case = models.BooleanField(db_column='PermissionsTransferAnyCase', verbose_name='Transfer Cases', sf_read_only=models.READ_ONLY)
    permissions_content_administrator = models.BooleanField(db_column='PermissionsContentAdministrator', verbose_name='Manage Salesforce CRM Content', sf_read_only=models.READ_ONLY)
    permissions_create_workspaces = models.BooleanField(db_column='PermissionsCreateWorkspaces', verbose_name='Create Libraries', sf_read_only=models.READ_ONLY)
    permissions_manage_content_permissions = models.BooleanField(db_column='PermissionsManageContentPermissions', verbose_name='Manage Content Permissions', sf_read_only=models.READ_ONLY)
    permissions_manage_content_properties = models.BooleanField(db_column='PermissionsManageContentProperties', verbose_name='Manage Content Properties', sf_read_only=models.READ_ONLY)
    permissions_manage_content_types = models.BooleanField(db_column='PermissionsManageContentTypes', verbose_name='Manage record types and layouts for Files', sf_read_only=models.READ_ONLY)
    permissions_manage_exchange_config = models.BooleanField(db_column='PermissionsManageExchangeConfig', verbose_name='Manage Lightning Sync', sf_read_only=models.READ_ONLY)
    permissions_manage_analytic_snapshots = models.BooleanField(db_column='PermissionsManageAnalyticSnapshots', verbose_name='Manage Reporting Snapshots', sf_read_only=models.READ_ONLY)
    permissions_schedule_reports = models.BooleanField(db_column='PermissionsScheduleReports', verbose_name='Schedule Reports', sf_read_only=models.READ_ONLY)
    permissions_manage_business_hour_holidays = models.BooleanField(db_column='PermissionsManageBusinessHourHolidays', verbose_name='Manage Business Hours Holidays', sf_read_only=models.READ_ONLY)
    permissions_manage_entitlements = models.BooleanField(db_column='PermissionsManageEntitlements', verbose_name='Manage Entitlements', sf_read_only=models.READ_ONLY)
    permissions_custom_sidebar_on_all_pages = models.BooleanField(db_column='PermissionsCustomSidebarOnAllPages', verbose_name='Show Custom Sidebar On All Pages', sf_read_only=models.READ_ONLY)
    permissions_manage_interaction = models.BooleanField(db_column='PermissionsManageInteraction', verbose_name='Manage Flow', sf_read_only=models.READ_ONLY)
    permissions_view_my_teams_dashboards = models.BooleanField(db_column='PermissionsViewMyTeamsDashboards', verbose_name="View My Team's Dashboards", sf_read_only=models.READ_ONLY)
    permissions_moderate_chatter = models.BooleanField(db_column='PermissionsModerateChatter', verbose_name='Moderate Chatter', sf_read_only=models.READ_ONLY)
    permissions_reset_passwords = models.BooleanField(db_column='PermissionsResetPasswords', verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.READ_ONLY)
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License', sf_read_only=models.READ_ONLY)
    permissions_can_insert_feed_system_fields = models.BooleanField(db_column='PermissionsCanInsertFeedSystemFields', verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.READ_ONLY)
    permissions_activities_access = models.BooleanField(db_column='PermissionsActivitiesAccess', verbose_name='Access Activities', sf_read_only=models.READ_ONLY)
    permissions_email_template_management = models.BooleanField(db_column='PermissionsEmailTemplateManagement', verbose_name='Manage Email Templates', sf_read_only=models.READ_ONLY)
    permissions_email_administration = models.BooleanField(db_column='PermissionsEmailAdministration', verbose_name='Email Administration', sf_read_only=models.READ_ONLY)
    permissions_manage_chatter_messages = models.BooleanField(db_column='PermissionsManageChatterMessages', verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option', sf_read_only=models.READ_ONLY)
    permissions_chatter_file_link = models.BooleanField(db_column='PermissionsChatterFileLink', verbose_name='Create Public Links', sf_read_only=models.READ_ONLY)
    permissions_force_two_factor = models.BooleanField(db_column='PermissionsForceTwoFactor', verbose_name='Multi-Factor Authentication for User Interface Logins', sf_read_only=models.READ_ONLY)
    permissions_view_case_interaction = models.BooleanField(db_column='PermissionsViewCaseInteraction', verbose_name='Use Case Feed', sf_read_only=models.READ_ONLY)
    permissions_manage_auth_providers = models.BooleanField(db_column='PermissionsManageAuthProviders', verbose_name='Manage Auth. Providers', sf_read_only=models.READ_ONLY)
    permissions_run_flow = models.BooleanField(db_column='PermissionsRunFlow', verbose_name='Run Flows', sf_read_only=models.READ_ONLY)
    permissions_manage_quotas = models.BooleanField(db_column='PermissionsManageQuotas', verbose_name='Manage Quotas', sf_read_only=models.READ_ONLY)
    permissions_create_customize_dashboards = models.BooleanField(db_column='PermissionsCreateCustomizeDashboards', verbose_name='Create and Customize Dashboards', sf_read_only=models.READ_ONLY)
    permissions_create_dashboard_folders = models.BooleanField(db_column='PermissionsCreateDashboardFolders', verbose_name='Create Dashboard Folders', sf_read_only=models.READ_ONLY)
    permissions_view_public_dashboards = models.BooleanField(db_column='PermissionsViewPublicDashboards', verbose_name='View Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(db_column='PermissionsManageDashbdsInPubFolders', verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_create_customize_reports = models.BooleanField(db_column='PermissionsCreateCustomizeReports', verbose_name='Create and Customize Reports', sf_read_only=models.READ_ONLY)
    permissions_create_report_folders = models.BooleanField(db_column='PermissionsCreateReportFolders', verbose_name='Create Report Folders', sf_read_only=models.READ_ONLY)
    permissions_view_public_reports = models.BooleanField(db_column='PermissionsViewPublicReports', verbose_name='View Reports in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_manage_reports_in_pub_folders = models.BooleanField(db_column='PermissionsManageReportsInPubFolders', verbose_name='Manage Reports in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_edit_my_dashboards = models.BooleanField(db_column='PermissionsEditMyDashboards', verbose_name='Edit My Dashboards', sf_read_only=models.READ_ONLY)
    permissions_edit_my_reports = models.BooleanField(db_column='PermissionsEditMyReports', verbose_name='Edit My Reports', sf_read_only=models.READ_ONLY)
    permissions_view_all_users = models.BooleanField(db_column='PermissionsViewAllUsers', verbose_name='View All Users', sf_read_only=models.READ_ONLY)
    permissions_bypass_email_approval = models.BooleanField(db_column='PermissionsBypassEmailApproval', verbose_name='Bypass Email Approval', sf_read_only=models.READ_ONLY)
    permissions_connect_org_to_environment_hub = models.BooleanField(db_column='PermissionsConnectOrgToEnvironmentHub', verbose_name='Connect Organization to Environment Hub', sf_read_only=models.READ_ONLY)
    permissions_create_customize_filters = models.BooleanField(db_column='PermissionsCreateCustomizeFilters', verbose_name='Create and Customize List Views', sf_read_only=models.READ_ONLY)
    permissions_content_hub_user = models.BooleanField(db_column='PermissionsContentHubUser', verbose_name='Files Connect Cloud', sf_read_only=models.READ_ONLY)
    permissions_sales_console = models.BooleanField(db_column='PermissionsSalesConsole', verbose_name='Sales Console', sf_read_only=models.READ_ONLY)
    permissions_two_factor_api = models.BooleanField(db_column='PermissionsTwoFactorApi', verbose_name='Multi-Factor Authentication for API Logins', sf_read_only=models.READ_ONLY)
    permissions_delete_topics = models.BooleanField(db_column='PermissionsDeleteTopics', verbose_name='Delete Topics', sf_read_only=models.READ_ONLY)
    permissions_edit_topics = models.BooleanField(db_column='PermissionsEditTopics', verbose_name='Edit Topics', sf_read_only=models.READ_ONLY)
    permissions_create_topics = models.BooleanField(db_column='PermissionsCreateTopics', verbose_name='Create Topics', sf_read_only=models.READ_ONLY)
    permissions_assign_topics = models.BooleanField(db_column='PermissionsAssignTopics', verbose_name='Assign Topics', sf_read_only=models.READ_ONLY)
    permissions_identity_enabled = models.BooleanField(db_column='PermissionsIdentityEnabled', verbose_name='Use Identity Features', sf_read_only=models.READ_ONLY)
    permissions_identity_connect = models.BooleanField(db_column='PermissionsIdentityConnect', verbose_name='Use Identity Connect', sf_read_only=models.READ_ONLY)
    permissions_content_workspaces = models.BooleanField(db_column='PermissionsContentWorkspaces', verbose_name='Access Libraries', sf_read_only=models.READ_ONLY)
    permissions_create_work_badge_definition = models.BooleanField(db_column='PermissionsCreateWorkBadgeDefinition', verbose_name='Create custom Badge Definitions', sf_read_only=models.READ_ONLY)
    permissions_custom_mobile_apps_access = models.BooleanField(db_column='PermissionsCustomMobileAppsAccess', verbose_name='Access Custom Mobile Apps', sf_read_only=models.READ_ONLY)
    permissions_view_help_link = models.BooleanField(db_column='PermissionsViewHelpLink', verbose_name='View Help Link', sf_read_only=models.READ_ONLY)
    permissions_manage_profiles_permissionsets = models.BooleanField(db_column='PermissionsManageProfilesPermissionsets', verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.READ_ONLY)
    permissions_assign_permission_sets = models.BooleanField(db_column='PermissionsAssignPermissionSets', verbose_name='Assign Permission Sets', sf_read_only=models.READ_ONLY)
    permissions_manage_roles = models.BooleanField(db_column='PermissionsManageRoles', verbose_name='Manage Roles', sf_read_only=models.READ_ONLY)
    permissions_manage_ip_addresses = models.BooleanField(db_column='PermissionsManageIpAddresses', verbose_name='Manage IP Addresses', sf_read_only=models.READ_ONLY)
    permissions_manage_sharing = models.BooleanField(db_column='PermissionsManageSharing', verbose_name='Manage Sharing', sf_read_only=models.READ_ONLY)
    permissions_manage_internal_users = models.BooleanField(db_column='PermissionsManageInternalUsers', verbose_name='Manage Internal Users', sf_read_only=models.READ_ONLY)
    permissions_manage_password_policies = models.BooleanField(db_column='PermissionsManagePasswordPolicies', verbose_name='Manage Password Policies', sf_read_only=models.READ_ONLY)
    permissions_manage_login_access_policies = models.BooleanField(db_column='PermissionsManageLoginAccessPolicies', verbose_name='Manage Login Access Policies', sf_read_only=models.READ_ONLY)
    permissions_can_verify_comment = models.BooleanField(db_column='PermissionsCanVerifyComment', verbose_name='Verify Answers to Chatter Questions', sf_read_only=models.READ_ONLY)
    permissions_manage_unlisted_groups = models.BooleanField(db_column='PermissionsManageUnlistedGroups', verbose_name='Manage Unlisted Groups', sf_read_only=models.READ_ONLY)
    permissions_std_automatic_activity_capture = models.BooleanField(db_column='PermissionsStdAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture Standard', sf_read_only=models.READ_ONLY)
    permissions_insights_app_dashboard_editor = models.BooleanField(db_column='PermissionsInsightsAppDashboardEditor', verbose_name='Create and Edit CRM Analytics Dashboards', sf_read_only=models.READ_ONLY)
    permissions_manage_two_factor = models.BooleanField(db_column='PermissionsManageTwoFactor', verbose_name='Manage Multi-Factor Authentication in API', sf_read_only=models.READ_ONLY)
    permissions_insights_app_user = models.BooleanField(db_column='PermissionsInsightsAppUser', verbose_name='Use CRM Analytics', sf_read_only=models.READ_ONLY)
    permissions_insights_app_admin = models.BooleanField(db_column='PermissionsInsightsAppAdmin', verbose_name='Manage CRM Analytics', sf_read_only=models.READ_ONLY)
    permissions_insights_app_elt_editor = models.BooleanField(db_column='PermissionsInsightsAppEltEditor', verbose_name='Edit CRM Analytics Dataflows', sf_read_only=models.READ_ONLY)
    permissions_insights_app_upload_user = models.BooleanField(db_column='PermissionsInsightsAppUploadUser', verbose_name='Upload External Data to CRM Analytics', sf_read_only=models.READ_ONLY)
    permissions_insights_create_application = models.BooleanField(db_column='PermissionsInsightsCreateApplication', verbose_name='Create CRM Analytics Apps', sf_read_only=models.READ_ONLY)
    permissions_lightning_experience_user = models.BooleanField(db_column='PermissionsLightningExperienceUser', verbose_name='Lightning Experience User', sf_read_only=models.READ_ONLY)
    permissions_config_custom_recs = models.BooleanField(db_column='PermissionsConfigCustomRecs', verbose_name='Configure Custom Recommendations', sf_read_only=models.READ_ONLY)
    permissions_submit_macros_allowed = models.BooleanField(db_column='PermissionsSubmitMacrosAllowed', verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.READ_ONLY)
    permissions_bulk_macros_allowed = models.BooleanField(db_column='PermissionsBulkMacrosAllowed', verbose_name='Run Macros on Multiple Records', sf_read_only=models.READ_ONLY)
    permissions_public_twitter_response = models.BooleanField(db_column='PermissionsPublicTwitterResponse', verbose_name='Public Twitter Response', sf_read_only=models.READ_ONLY)
    permissions_manage_session_permission_sets = models.BooleanField(db_column='PermissionsManageSessionPermissionSets', verbose_name='Manage Session Permission Set Activations', sf_read_only=models.READ_ONLY)
    permissions_manage_templated_app = models.BooleanField(db_column='PermissionsManageTemplatedApp', verbose_name='Manage CRM Analytics Templated Apps', sf_read_only=models.READ_ONLY)
    permissions_use_templated_app = models.BooleanField(db_column='PermissionsUseTemplatedApp', verbose_name='Use CRM Analytics Templated Apps', sf_read_only=models.READ_ONLY)
    permissions_send_announcement_emails = models.BooleanField(db_column='PermissionsSendAnnouncementEmails', verbose_name='Send announcement emails', sf_read_only=models.READ_ONLY)
    permissions_chatter_edit_own_post = models.BooleanField(db_column='PermissionsChatterEditOwnPost', verbose_name='Edit My Own Posts', sf_read_only=models.READ_ONLY)
    permissions_chatter_edit_own_record_post = models.BooleanField(db_column='PermissionsChatterEditOwnRecordPost', verbose_name='Edit Posts on Records I Own', sf_read_only=models.READ_ONLY)
    permissions_wave_tabular_download = models.BooleanField(db_column='PermissionsWaveTabularDownload', verbose_name='Download CRM Analytics Data', sf_read_only=models.READ_ONLY)
    permissions_manage_sandboxes = models.BooleanField(db_column='PermissionsManageSandboxes', verbose_name='Manage Sandboxes', sf_read_only=models.READ_ONLY)
    permissions_automatic_activity_capture = models.BooleanField(db_column='PermissionsAutomaticActivityCapture', verbose_name='Use Einstein Activity Capture', sf_read_only=models.READ_ONLY)
    permissions_import_custom_objects = models.BooleanField(db_column='PermissionsImportCustomObjects', verbose_name='Import Custom Objects', sf_read_only=models.READ_ONLY)
    permissions_delegated_two_factor = models.BooleanField(db_column='PermissionsDelegatedTwoFactor', verbose_name='Manage Multi-Factor Authentication in User Interface', sf_read_only=models.READ_ONLY)
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(db_column='PermissionsChatterComposeUiCodesnippet', verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.READ_ONLY)
    permissions_select_files_from_salesforce = models.BooleanField(db_column='PermissionsSelectFilesFromSalesforce', verbose_name='Select Files from Salesforce', sf_read_only=models.READ_ONLY)
    permissions_voice_outbound = models.BooleanField(db_column='PermissionsVoiceOutbound', verbose_name='Access Dialer Outbound Calls', sf_read_only=models.READ_ONLY)
    permissions_voice_inbound = models.BooleanField(db_column='PermissionsVoiceInbound', verbose_name='Access Dialer Inbound Calls', sf_read_only=models.READ_ONLY)
    permissions_voice_minutes = models.BooleanField(db_column='PermissionsVoiceMinutes', verbose_name='Access Dialer Minutes', sf_read_only=models.READ_ONLY)
    permissions_voice_coach = models.BooleanField(db_column='PermissionsVoiceCoach', verbose_name='Access Dialer Monitoring', sf_read_only=models.READ_ONLY)
    permissions_merge_topics = models.BooleanField(db_column='PermissionsMergeTopics', verbose_name='Merge Topics', sf_read_only=models.READ_ONLY)
    permissions_edit_iqfields = models.BooleanField(db_column='PermissionsEditIQFields', verbose_name='Update Activity Metrics Data', sf_read_only=models.READ_ONLY)
    permissions_subscribe_to_lightning_reports = models.BooleanField(db_column='PermissionsSubscribeToLightningReports', verbose_name='Subscribe to Reports', sf_read_only=models.READ_ONLY)
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(db_column='PermissionsManagePvtRptsAndDashbds', verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.READ_ONLY)
    permissions_allow_lightning_login = models.BooleanField(db_column='PermissionsAllowLightningLogin', verbose_name='Lightning Login User', sf_read_only=models.READ_ONLY)
    permissions_campaign_influence2 = models.BooleanField(db_column='PermissionsCampaignInfluence2', verbose_name='Campaign Influence', sf_read_only=models.READ_ONLY)
    permissions_view_data_assessment = models.BooleanField(db_column='PermissionsViewDataAssessment', verbose_name='Access to view Data Assessment', sf_read_only=models.READ_ONLY)
    permissions_remove_direct_message_members = models.BooleanField(db_column='PermissionsRemoveDirectMessageMembers', verbose_name='Remove People from Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_can_approve_feed_post = models.BooleanField(db_column='PermissionsCanApproveFeedPost', verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.READ_ONLY)
    permissions_add_direct_message_members = models.BooleanField(db_column='PermissionsAddDirectMessageMembers', verbose_name='Add People to Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_allow_view_edit_converted_leads = models.BooleanField(db_column='PermissionsAllowViewEditConvertedLeads', verbose_name='View and Edit Converted Leads', sf_read_only=models.READ_ONLY)
    permissions_social_insights_logo_admin = models.BooleanField(db_column='PermissionsSocialInsightsLogoAdmin', verbose_name='Remove Logos from Accounts', sf_read_only=models.READ_ONLY)
    permissions_show_company_name_as_user_badge = models.BooleanField(db_column='PermissionsShowCompanyNameAsUserBadge', verbose_name='Show Company Name as Site Role', sf_read_only=models.READ_ONLY)
    permissions_view_health_check = models.BooleanField(db_column='PermissionsViewHealthCheck', verbose_name='View Health Check', sf_read_only=models.READ_ONLY)
    permissions_manage_health_check = models.BooleanField(db_column='PermissionsManageHealthCheck', verbose_name='Manage Health Check', sf_read_only=models.READ_ONLY)
    permissions_packaging2 = models.BooleanField(db_column='PermissionsPackaging2', verbose_name='Create and Update Second-Generation Packages', sf_read_only=models.READ_ONLY)
    permissions_manage_certificates = models.BooleanField(db_column='PermissionsManageCertificates', verbose_name='Manage Certificates', sf_read_only=models.READ_ONLY)
    permissions_create_report_in_lightning = models.BooleanField(db_column='PermissionsCreateReportInLightning', verbose_name='Report Builder (Lightning Experience)', sf_read_only=models.READ_ONLY)
    permissions_prevent_classic_experience = models.BooleanField(db_column='PermissionsPreventClassicExperience', verbose_name='Hide Option to Switch to Salesforce Classic', sf_read_only=models.READ_ONLY)
    permissions_hide_read_by_list = models.BooleanField(db_column='PermissionsHideReadByList', verbose_name='Hide the Seen By List', sf_read_only=models.READ_ONLY)
    permissions_list_email_send = models.BooleanField(db_column='PermissionsListEmailSend', verbose_name='Allow sending of List Emails', sf_read_only=models.READ_ONLY)
    permissions_feed_pinning = models.BooleanField(db_column='PermissionsFeedPinning', verbose_name='Pin Posts in Feeds', sf_read_only=models.READ_ONLY)
    permissions_change_dashboard_colors = models.BooleanField(db_column='PermissionsChangeDashboardColors', verbose_name='Change Dashboard Colors', sf_read_only=models.READ_ONLY)
    permissions_manage_recommendation_strategies = models.BooleanField(db_column='PermissionsManageRecommendationStrategies', verbose_name='Manage Next Best Action Strategies', sf_read_only=models.READ_ONLY)
    permissions_manage_propositions = models.BooleanField(db_column='PermissionsManagePropositions', verbose_name='Manage Next Best Action Recommendations', sf_read_only=models.READ_ONLY)
    permissions_close_conversations = models.BooleanField(db_column='PermissionsCloseConversations', verbose_name='Close Conversation Threads', sf_read_only=models.READ_ONLY)
    permissions_subscribe_report_roles_grps = models.BooleanField(db_column='PermissionsSubscribeReportRolesGrps', verbose_name='Subscribe to Reports: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    permissions_subscribe_dashboard_roles_grps = models.BooleanField(db_column='PermissionsSubscribeDashboardRolesGrps', verbose_name='Subscribe to Dashboards: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    permissions_use_web_link = models.BooleanField(db_column='PermissionsUseWebLink', verbose_name='Allow Access to Customized Actions', sf_read_only=models.READ_ONLY)
    permissions_edit_asefields = models.BooleanField(db_column='PermissionsEditASEFields', verbose_name='Update One Sync Engine Data', sf_read_only=models.READ_ONLY)
    permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='PermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions', sf_read_only=models.READ_ONLY)
    permissions_view_only_embedded_app_user = models.BooleanField(db_column='PermissionsViewOnlyEmbeddedAppUser', verbose_name='Access to View-Only Licensed Templates and Apps', sf_read_only=models.READ_ONLY)
    permissions_send_external_email_available = models.BooleanField(db_column='PermissionsSendExternalEmailAvailable', verbose_name='Send Email through External Email Service', sf_read_only=models.READ_ONLY)
    permissions_view_all_activities = models.BooleanField(db_column='PermissionsViewAllActivities', verbose_name='View All Activities', sf_read_only=models.READ_ONLY)
    permissions_subscribe_report_to_other_users = models.BooleanField(db_column='PermissionsSubscribeReportToOtherUsers', verbose_name='Subscribe to Reports: Add Recipients', sf_read_only=models.READ_ONLY)
    permissions_lightning_console_allowed_for_user = models.BooleanField(db_column='PermissionsLightningConsoleAllowedForUser', verbose_name='Lightning Console User', sf_read_only=models.READ_ONLY)
    permissions_subscribe_reports_run_as_user = models.BooleanField(db_column='PermissionsSubscribeReportsRunAsUser', verbose_name='Subscribe to Reports: Set Running User', sf_read_only=models.READ_ONLY)
    permissions_subscribe_to_lightning_dashboards = models.BooleanField(db_column='PermissionsSubscribeToLightningDashboards', verbose_name='Subscribe to Dashboards', sf_read_only=models.READ_ONLY)
    permissions_subscribe_dashboard_to_other_users = models.BooleanField(db_column='PermissionsSubscribeDashboardToOtherUsers', verbose_name='Subscribe to Dashboards: Add Recipients', sf_read_only=models.READ_ONLY)
    permissions_create_ltng_temp_in_pub = models.BooleanField(db_column='PermissionsCreateLtngTempInPub', verbose_name='Manage Public Lightning Email Templates', sf_read_only=models.READ_ONLY)
    permissions_transactional_email_send = models.BooleanField(db_column='PermissionsTransactionalEmailSend', verbose_name='Send Non-Commercial Email', sf_read_only=models.READ_ONLY)
    permissions_view_private_static_resources = models.BooleanField(db_column='PermissionsViewPrivateStaticResources', verbose_name='View Private Static Resources', sf_read_only=models.READ_ONLY)
    permissions_create_ltng_temp_folder = models.BooleanField(db_column='PermissionsCreateLtngTempFolder', verbose_name='Create Folders for Lightning Email Templates', sf_read_only=models.READ_ONLY)
    permissions_apex_rest_services = models.BooleanField(db_column='PermissionsApexRestServices', verbose_name='Apex REST Services', sf_read_only=models.READ_ONLY)
    permissions_give_recognition_badge = models.BooleanField(db_column='PermissionsGiveRecognitionBadge', verbose_name='Give Recognition Badges in Experience Builder Sites', sf_read_only=models.READ_ONLY)
    permissions_use_my_search = models.BooleanField(db_column='PermissionsUseMySearch', verbose_name='Einstein Search', sf_read_only=models.READ_ONLY)
    permissions_ltng_promo_reserved01_user_perm = models.BooleanField(db_column='PermissionsLtngPromoReserved01UserPerm', verbose_name='Remain in Salesforce Classic', sf_read_only=models.READ_ONLY)
    permissions_manage_subscriptions = models.BooleanField(db_column='PermissionsManageSubscriptions', verbose_name='Manage CRM Analytics Subscriptions', sf_read_only=models.READ_ONLY)
    permissions_wave_manage_private_assets_user = models.BooleanField(db_column='PermissionsWaveManagePrivateAssetsUser', verbose_name='Manage CRM Analytics Private Assets', sf_read_only=models.READ_ONLY)
    permissions_can_edit_data_prep_recipe = models.BooleanField(db_column='PermissionsCanEditDataPrepRecipe', verbose_name='Edit Dataset Recipes', sf_read_only=models.READ_ONLY)
    permissions_add_analytics_remote_connections = models.BooleanField(db_column='PermissionsAddAnalyticsRemoteConnections', verbose_name='Add CRM Analytics Remote Connections', sf_read_only=models.READ_ONLY)
    permissions_use_assistant_dialog = models.BooleanField(db_column='PermissionsUseAssistantDialog', verbose_name='Instant Actionable Results', sf_read_only=models.READ_ONLY)
    permissions_use_query_suggestions = models.BooleanField(db_column='PermissionsUseQuerySuggestions', verbose_name='Natural Language Search', sf_read_only=models.READ_ONLY)
    permissions_view_roles = models.BooleanField(db_column='PermissionsViewRoles', verbose_name='View Roles and Role Hierarchy', sf_read_only=models.READ_ONLY)
    permissions_can_manage_maps = models.BooleanField(db_column='PermissionsCanManageMaps', verbose_name='Manage CRM Analytics Custom Maps', sf_read_only=models.READ_ONLY)
    permissions_lmoutbound_messaging_user_perm = models.BooleanField(db_column='PermissionsLMOutboundMessagingUserPerm', verbose_name='Agent Initiated Outbound Messaging', sf_read_only=models.READ_ONLY)
    permissions_modify_data_classification = models.BooleanField(db_column='PermissionsModifyDataClassification', verbose_name='Modify Data Classification', sf_read_only=models.READ_ONLY)
    permissions_privacy_data_access = models.BooleanField(db_column='PermissionsPrivacyDataAccess', verbose_name='Allow user to access privacy data', sf_read_only=models.READ_ONLY)
    permissions_query_all_files = models.BooleanField(db_column='PermissionsQueryAllFiles', verbose_name='Query All Files', sf_read_only=models.READ_ONLY)
    permissions_modify_metadata = models.BooleanField(db_column='PermissionsModifyMetadata', verbose_name='Modify Metadata Through Metadata API Functions', sf_read_only=models.READ_ONLY)
    permissions_manage_cms = models.BooleanField(db_column='PermissionsManageCMS', verbose_name='Create CMS Workspaces and Channels', sf_read_only=models.READ_ONLY)
    permissions_sandbox_testing_in_community_app = models.BooleanField(db_column='PermissionsSandboxTestingInCommunityApp', verbose_name='Test Sandboxes in Mobile Publisher for Experience Cloud', sf_read_only=models.READ_ONLY)
    permissions_can_edit_prompts = models.BooleanField(db_column='PermissionsCanEditPrompts', verbose_name='Manage Prompts', sf_read_only=models.READ_ONLY)
    permissions_view_user_pii = models.BooleanField(db_column='PermissionsViewUserPII', verbose_name='View Concealed Field Data', sf_read_only=models.READ_ONLY)
    permissions_manage_hub_connections = models.BooleanField(db_column='PermissionsManageHubConnections', verbose_name='Connect Org to Customer 360 Data Manager', sf_read_only=models.READ_ONLY)
    permissions_b2_bmarketing_analytics_user = models.BooleanField(db_column='PermissionsB2BMarketingAnalyticsUser', verbose_name='Create B2B Marketing Analytics Apps', sf_read_only=models.READ_ONLY)
    permissions_trace_xds_queries = models.BooleanField(db_column='PermissionsTraceXdsQueries', verbose_name='Access Tracer for External Data Sources', sf_read_only=models.READ_ONLY)
    permissions_view_all_custom_settings = models.BooleanField(db_column='PermissionsViewAllCustomSettings', verbose_name='View All Custom Settings', sf_read_only=models.READ_ONLY)
    permissions_view_all_foreign_key_names = models.BooleanField(db_column='PermissionsViewAllForeignKeyNames', verbose_name='View All Lookup Record Names', sf_read_only=models.READ_ONLY)
    permissions_add_wave_notification_recipients = models.BooleanField(db_column='PermissionsAddWaveNotificationRecipients', verbose_name='Add Recipients to CRM Analytics Notifications', sf_read_only=models.READ_ONLY)
    permissions_headless_cmsaccess = models.BooleanField(db_column='PermissionsHeadlessCMSAccess', verbose_name='Enable Salesforce CMS Integration', sf_read_only=models.READ_ONLY)
    permissions_lmend_messaging_session_user_perm = models.BooleanField(db_column='PermissionsLMEndMessagingSessionUserPerm', verbose_name='End Messaging Session', sf_read_only=models.READ_ONLY)
    permissions_consent_api_update = models.BooleanField(db_column='PermissionsConsentApiUpdate', verbose_name='Update Consent Preferences Using REST API', sf_read_only=models.READ_ONLY)
    permissions_access_content_builder = models.BooleanField(db_column='PermissionsAccessContentBuilder', verbose_name='Access drag-and-drop content builder', sf_read_only=models.READ_ONLY)
    permissions_manage_c360_aconnections = models.BooleanField(db_column='PermissionsManageC360AConnections', verbose_name='Connect Org to Salesforce CDP', sf_read_only=models.READ_ONLY)
    permissions_manage_release_updates = models.BooleanField(db_column='PermissionsManageReleaseUpdates', verbose_name='Manage Release Updates', sf_read_only=models.READ_ONLY)
    permissions_view_all_profiles = models.BooleanField(db_column='PermissionsViewAllProfiles', verbose_name='View All Profiles', sf_read_only=models.READ_ONLY)
    permissions_skip_identity_confirmation = models.BooleanField(db_column='PermissionsSkipIdentityConfirmation', verbose_name='Skip Device Activation at Login', sf_read_only=models.READ_ONLY)
    permissions_learning_manager = models.BooleanField(db_column='PermissionsLearningManager', verbose_name='Manage Learning', sf_read_only=models.READ_ONLY)
    permissions_send_custom_notifications = models.BooleanField(db_column='PermissionsSendCustomNotifications', verbose_name='Send Custom Notifications', sf_read_only=models.READ_ONLY)
    permissions_packaging2_delete = models.BooleanField(db_column='PermissionsPackaging2Delete', verbose_name='Delete Second-Generation Packages', sf_read_only=models.READ_ONLY)
    permissions_manage_learning_reporting = models.BooleanField(db_column='PermissionsManageLearningReporting', verbose_name='Manage Learning Reporting', sf_read_only=models.READ_ONLY)
    permissions_isotope_cto_cuser = models.BooleanField(db_column='PermissionsIsotopeCToCUser', verbose_name='Salesforce Anywhere Integration Access', sf_read_only=models.READ_ONLY)
    permissions_isotope_access = models.BooleanField(db_column='PermissionsIsotopeAccess', verbose_name='Salesforce Anywhere on Mobile', sf_read_only=models.READ_ONLY)
    permissions_isotope_lex = models.BooleanField(db_column='PermissionsIsotopeLEX', verbose_name='Salesforce Anywhere in Lightning Experience', sf_read_only=models.READ_ONLY)
    permissions_quip_metrics_access = models.BooleanField(db_column='PermissionsQuipMetricsAccess', verbose_name='Quip Metrics', sf_read_only=models.READ_ONLY)
    permissions_quip_user_engagement_metrics = models.BooleanField(db_column='PermissionsQuipUserEngagementMetrics', verbose_name='Quip User Engagement Metrics', sf_read_only=models.READ_ONLY)
    permissions_manage_external_connections = models.BooleanField(db_column='PermissionsManageExternalConnections', verbose_name='Allow user to modify Private Connections', sf_read_only=models.READ_ONLY)
    permissions_use_subscription_emails = models.BooleanField(db_column='PermissionsUseSubscriptionEmails', verbose_name='Subscribe to CRM Analytics Assets', sf_read_only=models.READ_ONLY)
    permissions_native_webview_scrolling = models.BooleanField(db_column='PermissionsNativeWebviewScrolling', verbose_name='Salesforce Mobile App: Native scrolling on webviews', sf_read_only=models.READ_ONLY)
    permissions_view_developer_name = models.BooleanField(db_column='PermissionsViewDeveloperName', verbose_name='View DeveloperName', sf_read_only=models.READ_ONLY)
    permissions_bypass_mfafor_ui_logins = models.BooleanField(db_column='PermissionsBypassMFAForUiLogins', verbose_name='Waive Multi-Factor Authentication for Exempt Users', sf_read_only=models.READ_ONLY)
    permissions_client_secret_rotation = models.BooleanField(db_column='PermissionsClientSecretRotation', verbose_name='Allow consumer key and secret rotation', sf_read_only=models.READ_ONLY)
    permissions_enable_ipfsupload = models.BooleanField(db_column='PermissionsEnableIPFSUpload', verbose_name='Allow blockchain data upload', sf_read_only=models.READ_ONLY)
    permissions_enable_bctransaction_polling = models.BooleanField(db_column='PermissionsEnableBCTransactionPolling', verbose_name='Enable blockchain transaction polling API', sf_read_only=models.READ_ONLY)
    permissions_fscarc_graph_community_user = models.BooleanField(db_column='PermissionsFSCArcGraphCommunityUser', verbose_name='Access Actionable Relationship Center for partner users', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPermissionAccess'
        verbose_name = 'User Permission Access'
        verbose_name_plural = 'User Permission Access'
        # keyPrefix = '0up'



class UserPreference(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', verbose_name='User ID')  # Master Detail Relationship *
    preference = models.CharField(db_column='Preference', max_length=40, default='93', choices=[('57', 'Event Reminder Default Lead Time'), ('58', 'Task Reminder Default Time'), ('91', 'Prevent Logs on Load'), ('92', 'Autocomplete Apex After Key Press'), ('93', 'Visualforce Viewstate Inspector'), ('94', 'Forecasting Displayed Type'), ('96', 'Editor Theme'), ('97', 'Editor Font Size'), ('98', 'Pinned Folders'), ('99', 'Enable Query Plan'), ('100', 'Enable New Open Dialog'), ('101', 'Email Transport Type'), ('102', 'Pinned Wave Folders'), ('108', 'Density'), ('109', 'Lightning Flow Builder preferences'), ('111', 'Format With Tabs'), ('112', 'Format Tab Width'), ('113', 'Format Print Width'), ('114', 'Record Page Activities Display'), ('118', 'Lightning Flow Explorer preferences'), ('119', 'Migrate to Flow preferences'), ('120', 'Simple Auth Option preferences')])
    value = models.TextField(db_column='Value', blank=True, null=True)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPreference'
        verbose_name = 'User Preference'
        verbose_name_plural = 'User Preferences'
        # keyPrefix = '03u'



class UserProvAccount(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userprovaccount_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userprovaccount_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, db_column='SalesforceUserId', related_name='userprovaccount_salesforceuser_set', verbose_name='User ID', blank=True, null=True)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='ConnectedAppId', verbose_name='Connected App ID', blank=True, null=True)
    external_user_id = models.CharField(db_column='ExternalUserId', max_length=150, blank=True, null=True)
    external_username = models.CharField(db_column='ExternalUsername', max_length=150, blank=True, null=True)
    external_email = models.CharField(db_column='ExternalEmail', max_length=150, blank=True, null=True)
    external_first_name = models.CharField(db_column='ExternalFirstName', max_length=150, blank=True, null=True)
    external_last_name = models.CharField(db_column='ExternalLastName', max_length=150, blank=True, null=True)
    link_state = models.CharField(db_column='LinkState', max_length=255, choices=[('Linked', 'Linked'), ('Duplicate', 'Duplicate'), ('Orphaned', 'Orphaned'), ('Ignored', 'Ignored')])
    status = models.CharField(db_column='Status', max_length=255, choices=[('Active', 'Active'), ('Deactivated', 'Deactivated'), ('Deleted', 'Deleted')])
    deleted_date = models.DateTimeField(db_column='DeletedDate', blank=True, null=True)
    is_known_link = models.BooleanField(db_column='IsKnownLink', verbose_name='Manual Override', default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserProvAccount'
        verbose_name = 'User Provisioning Account'
        verbose_name_plural = 'User Provisioning Accounts'
        # keyPrefix = '0Ni'



class UserProvAccountStaging(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userprovaccountstaging_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userprovaccountstaging_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='ConnectedAppId', verbose_name='Connected App ID', blank=True, null=True)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, db_column='SalesforceUserId', related_name='userprovaccountstaging_salesforceuser_set', verbose_name='User ID', blank=True, null=True)
    external_user_id = models.CharField(db_column='ExternalUserId', max_length=150, blank=True, null=True)
    external_username = models.CharField(db_column='ExternalUsername', max_length=150, blank=True, null=True)
    external_email = models.CharField(db_column='ExternalEmail', max_length=150, blank=True, null=True)
    external_first_name = models.CharField(db_column='ExternalFirstName', max_length=150, blank=True, null=True)
    external_last_name = models.CharField(db_column='ExternalLastName', max_length=150, blank=True, null=True)
    link_state = models.CharField(db_column='LinkState', max_length=255, choices=[('Linked', 'Linked'), ('Duplicate', 'Duplicate'), ('Orphaned', 'Orphaned'), ('Ignored', 'Ignored')])
    status = models.CharField(db_column='Status', max_length=255, choices=[('Active', 'Active'), ('Deactivated', 'Deactivated'), ('Deleted', 'Deleted')])
    class Meta(models.Model.Meta):
        db_table = 'UserProvAccountStaging'
        verbose_name = 'User Provisioning Account Staging'
        verbose_name_plural = 'User Provisioning Account Stagings'
        # keyPrefix = '0HY'



class UserProvMockTarget(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userprovmocktarget_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userprovmocktarget_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    external_user_id = models.CharField(db_column='ExternalUserId', max_length=150, blank=True, null=True)
    external_username = models.CharField(db_column='ExternalUsername', max_length=150, blank=True, null=True)
    external_email = models.CharField(db_column='ExternalEmail', max_length=150, blank=True, null=True)
    external_first_name = models.CharField(db_column='ExternalFirstName', max_length=150, blank=True, null=True)
    external_last_name = models.CharField(db_column='ExternalLastName', max_length=150, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvMockTarget'
        verbose_name = 'User Provisioning Mock Target'
        verbose_name_plural = 'User Provisioning Mock Targets'
        # keyPrefix = '0HX'



class UserProvisioningConfig(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', default=models.DEFAULTED_ON_CREATE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userprovisioningconfig_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userprovisioningconfig_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='ConnectedAppId', verbose_name='Connected App ID', blank=True, null=True)
    notes = models.TextField(db_column='Notes', blank=True, null=True)
    enabled = models.BooleanField(db_column='Enabled', default=False)
    approval_required = models.TextField(db_column='ApprovalRequired', blank=True, null=True)
    user_account_mapping = models.TextField(db_column='UserAccountMapping', blank=True, null=True)
    enabled_operations = models.TextField(db_column='EnabledOperations', blank=True, null=True)
    on_update_attributes = models.TextField(db_column='OnUpdateAttributes', blank=True, null=True)
    last_recon_date_time = models.DateTimeField(db_column='LastReconDateTime', verbose_name='Last Recon Date', blank=True, null=True)
    named_credential = models.ForeignKey(NamedCredential, models.DO_NOTHING, db_column='NamedCredentialId', verbose_name='Named Credential ID', blank=True, null=True)
    recon_filter = models.CharField(db_column='ReconFilter', max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningConfig'
        verbose_name = 'User Provisioning Config'
        verbose_name_plural = 'User Provisioning Configs'
        # keyPrefix = '0Je'



class UserProvisioningLog(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userprovisioninglog_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userprovisioninglog_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user_provisioning_request = models.ForeignKey('UserProvisioningRequest', models.DO_NOTHING, db_column='UserProvisioningRequestId', verbose_name='UserProvisioningRequest ID', blank=True, null=True)
    external_user_id = models.CharField(db_column='ExternalUserId', max_length=150, blank=True, null=True)
    external_username = models.CharField(db_column='ExternalUsername', max_length=150, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='userprovisioninglog_user_set', verbose_name='User ID', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=150, blank=True, null=True)
    details = models.TextField(db_column='Details', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningLog'
        verbose_name = 'User Provisioning Log'
        verbose_name_plural = 'User Provisioning Logs'
        # keyPrefix = '0Hs'



class UserProvisioningRequest(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userprovisioningrequest_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userprovisioningrequest_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, db_column='SalesforceUserId', related_name='userprovisioningrequest_salesforceuser_set', verbose_name='User ID', blank=True, null=True)
    external_user_id = models.CharField(db_column='ExternalUserId', max_length=150, blank=True, null=True)
    app_name = models.CharField(db_column='AppName', max_length=150, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=255, choices=[('New', 'New'), ('Requested', 'Requested'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Collecting', 'Collecting'), ('Collected', 'Collected'), ('Analyzing', 'Analyzing'), ('Analyzed', 'Analyzed'), ('Committing', 'Committing'), ('Retried', 'Retried'), ('Manually Completed', 'Manually Completed')])
    operation = models.CharField(db_column='Operation', max_length=255, choices=[('Create', 'Create'), ('Read', 'Read'), ('Update', 'Update'), ('Deactivate', 'Deactivate'), ('Activate', 'Activate'), ('Freeze', 'Freeze'), ('Unfreeze', 'Unfreeze'), ('Reconcile', 'Reconcile'), ('Linking', 'Linking')])
    schedule_date = models.DateTimeField(db_column='ScheduleDate', verbose_name='Scheduled Provisioning Time', blank=True, null=True)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='ConnectedAppId', verbose_name='Connected App ID', blank=True, null=True)
    user_prov_config = models.ForeignKey(UserProvisioningConfig, models.DO_NOTHING, db_column='UserProvConfigId', verbose_name='UserProvisioningConfig ID', blank=True, null=True)
    user_prov_account = models.ForeignKey(UserProvAccount, models.DO_NOTHING, db_column='UserProvAccountId', verbose_name='User Provisioning Account ID', blank=True, null=True)
    approval_status = models.CharField(db_column='ApprovalStatus', max_length=255, choices=[('Required', 'Required'), ('NotRequired', 'Not Required'), ('Approved', 'Approved'), ('Denied', 'Denied')])
    manager = models.ForeignKey(User, models.DO_NOTHING, db_column='ManagerId', related_name='userprovisioningrequest_manager_set', verbose_name='User ID', blank=True, null=True)
    retry_count = models.IntegerField(db_column='RetryCount', blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentId', verbose_name='UserProvisioningRequest ID', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningRequest'
        verbose_name = 'User Provisioning Request'
        verbose_name_plural = 'User Provisioning Requests'
        # keyPrefix = '0HP'



class UserProvisioningRequestShare(models.Model):
    parent = models.ForeignKey(UserProvisioningRequest, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningRequestShare'
        verbose_name = 'User Provisioning Request Share'
        verbose_name_plural = 'User Provisioning Request Share'
        # keyPrefix = None



class UserRecordAccess(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    record_id = models.CharField(db_column='RecordId', max_length=40, verbose_name='Record ID', sf_read_only=models.READ_ONLY)
    has_read_access = models.BooleanField(db_column='HasReadAccess', sf_read_only=models.READ_ONLY, default=False)
    has_edit_access = models.BooleanField(db_column='HasEditAccess', sf_read_only=models.READ_ONLY, default=False)
    has_delete_access = models.BooleanField(db_column='HasDeleteAccess', sf_read_only=models.READ_ONLY, default=False)
    has_transfer_access = models.BooleanField(db_column='HasTransferAccess', sf_read_only=models.READ_ONLY, default=False)
    has_all_access = models.BooleanField(db_column='HasAllAccess', sf_read_only=models.READ_ONLY, default=False)
    max_access_level = models.CharField(db_column='MaxAccessLevel', max_length=40, verbose_name='Maximum Access Level', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('Delete', 'Delete'), ('Transfer', 'Read/Write/Transfer'), ('All', 'Owner')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRecordAccess'
        verbose_name = 'User Record Access'
        verbose_name_plural = 'User Record Access'
        # keyPrefix = None



class UserRole(models.Model):
    name = models.CharField(db_column='Name', max_length=80)
    parent_role = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentRoleId', verbose_name='Parent Role ID', blank=True, null=True)
    rollup_description = models.CharField(db_column='RollupDescription', max_length=80, verbose_name='Description', blank=True, null=True)
    opportunity_access_for_account_owner = models.CharField(db_column='OpportunityAccessForAccountOwner', max_length=40, verbose_name='Opportunity Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    case_access_for_account_owner = models.CharField(db_column='CaseAccessForAccountOwner', max_length=40, verbose_name='Case Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    contact_access_for_account_owner = models.CharField(db_column='ContactAccessForAccountOwner', max_length=40, verbose_name='Contact Access Level for Account Owner', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    forecast_user = models.ForeignKey(User, models.DO_NOTHING, db_column='ForecastUserId', related_name='userrole_forecastuser_set', verbose_name='User ID', blank=True, null=True)
    may_forecast_manager_share = models.BooleanField(db_column='MayForecastManagerShare', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userrole_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, blank=True, null=True)
    portal_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='PortalAccountId', verbose_name='Account ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    portal_type = models.CharField(db_column='PortalType', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('None', 'None'), ('CustomerPortal', 'Customer Portal'), ('Partner', 'Partner Portal')], blank=True, null=True)
    portal_account_owner = models.ForeignKey(User, models.DO_NOTHING, db_column='PortalAccountOwnerId', related_name='userrole_portalaccountowner_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRole'
        verbose_name = 'Role'
        verbose_name_plural = 'Role'
        # keyPrefix = '00E'



class UserServicePresence(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.NOT_CREATEABLE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='userservicepresence_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='userservicepresence_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='userservicepresence_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    service_presence_status = models.ForeignKey(ServicePresenceStatus, models.DO_NOTHING, db_column='ServicePresenceStatusId', verbose_name='Service Presence Status ID', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_start_date = models.DateTimeField(db_column='StatusStartDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    configured_capacity = models.IntegerField(db_column='ConfiguredCapacity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status_end_date = models.DateTimeField(db_column='StatusEndDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_away = models.BooleanField(db_column='IsAway', sf_read_only=models.READ_ONLY, default=False)
    idle_duration = models.IntegerField(db_column='IdleDuration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    at_capacity_duration = models.IntegerField(db_column='AtCapacityDuration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    average_capacity = models.DecimalField(db_column='AverageCapacity', max_digits=10, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_current_state = models.BooleanField(db_column='IsCurrentState', sf_read_only=models.READ_ONLY, default=False)
    status_duration = models.IntegerField(db_column='StatusDuration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserServicePresence'
        verbose_name = 'User Presence'
        verbose_name_plural = 'User Presences'
        # keyPrefix = '0R1'



class UserServicePresenceShare(models.Model):
    parent = models.ForeignKey(UserServicePresence, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserServicePresenceShare'
        verbose_name = 'User Presence Share'
        verbose_name_plural = 'User Presence Share'
        # keyPrefix = None



class UserSetupEntityAccess(models.Model):
    durable_id = models.CharField(db_column='DurableId', max_length=255, verbose_name='User Setup Entity Access Key', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_entity_id = models.CharField(db_column='SetupEntityId', max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    key_prefix = models.CharField(db_column='KeyPrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_cache_update = models.DateTimeField(db_column='LastCacheUpdate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserSetupEntityAccess'
        verbose_name = 'User Setup Entity Access'
        verbose_name_plural = 'User Permission Access'
        # keyPrefix = '0g2'



class UserShare(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='usershare_user_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    user_access_level = models.CharField(db_column='UserAccessLevel', max_length=40, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='usershare_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserShare'
        verbose_name = 'User Share'
        verbose_name_plural = 'User Share'
        # keyPrefix = '0N2'



class VerificationHistory(models.Model):
    event_group = models.IntegerField(db_column='EventGroup', verbose_name='Verification Attempt', sf_read_only=models.READ_ONLY)
    verification_time = models.DateTimeField(db_column='VerificationTime', verbose_name='Time', sf_read_only=models.READ_ONLY)
    verification_method = models.CharField(db_column='VerificationMethod', max_length=255, verbose_name='Method', sf_read_only=models.READ_ONLY, choices=[('Totp', 'One-time password'), ('Sms', 'Text message'), ('Email', 'Email message'), ('SalesforceAuthenticator', 'Salesforce Authenticator'), ('TempCode', 'Temporary code'), ('U2F', 'U2F security key'), ('LL', 'Lightning Login'), ('EnableLL', 'Lightning Login'), ('Password', 'Password'), ('BuiltInAuthenticator', 'Built-In Authenticator'), ('WebAuthnRoamingAuthenticator', 'Security Key')], blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='verificationhistory_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)
    activity = models.CharField(db_column='Activity', max_length=255, verbose_name='User Activity', sf_read_only=models.READ_ONLY, choices=[('Registration', 'Register for verification'), ('ExtraVerification', 'Perform an operation that requires extra verification'), ('Login', 'Log in to Salesforce'), ('AccessReports', 'Access reports'), ('ExportPrintReports', 'Export and print reports'), ('ConnectedApp', 'Access a connected app'), ('Apex', 'Apex-defined activity'), ('TempCode', 'Generate a temporary verification code'), ('EnableLL', 'Enroll in Lightning Login'), ('ConnectTotp', 'Connect a One-Time Password Generator'), ('ConnectToopher', 'Connect Salesforce Authenticator'), ('ConnectU2F', 'Connect a U2F Security Key'), ('ChangeEmail', 'Change your email address'), ('ListView', 'Access the list view'), ('ConnectSms', 'Connect a mobile phone number'), ('ConnectWebAuth', 'Connect a built-in authenticator'), ('ConnectWebAuthRoaming', 'Connect a Security Key (U2F or WebAuthn)')])
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Initiated', 'Initiated'), ('InProgress', 'User challenged; waiting for response'), ('Succeeded', 'Succeeded'), ('Denied', 'Access denied'), ('RecoverableError', 'Failed: Recoverable error'), ('FailedGeneralError', 'Failed: General error'), ('FailedInvalidCode', 'Failed: Invalid verification code'), ('FailedTooManyAttempts', 'Failed: Too many attempts'), ('AutomatedSuccess', 'Succeeded: Automated response'), ('ReportedDenied', 'Access denied: Flagged by user'), ('FailedPasswordLockout', 'Failed: Password Lockout'), ('FailedInvalidPassword', 'Failed: Invalid Password')])
    login_history = models.ForeignKey(LoginHistory, models.DO_NOTHING, db_column='LoginHistoryId', verbose_name='Login History ID', sf_read_only=models.READ_ONLY)
    source_ip = models.CharField(db_column='SourceIp', max_length=200, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    login_geo = models.ForeignKey(LoginGeo, models.DO_NOTHING, db_column='LoginGeoId', verbose_name='Login Geo Data ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    remarks = models.CharField(db_column='Remarks', max_length=255, verbose_name='Activity Message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    resource = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, db_column='ResourceId', verbose_name='Connected App ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    policy = models.CharField(db_column='Policy', max_length=255, verbose_name='Triggered By', sf_read_only=models.READ_ONLY, choices=[('HighAssurance', 'High assurance session required'), ('PageAccess', 'Access a protected page'), ('ProfilePolicy', 'Profile session level policy'), ('TwoFactorAuthentication', 'Multi-factor authentication required'), ('DeviceActivation', 'Activation'), ('ExtraVerification', 'Extra Verification'), ('LightningLogin', 'Lightning Login'), ('EnableLightningLogin', 'Enroll in Lightning Login'), ('CustomApex', 'Apex method'), ('PasswordlessLogin', 'Passwordless Login')])
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='verificationhistory_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='verificationhistory_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'VerificationHistory'
        verbose_name = 'Identity Verification History'
        verbose_name_plural = 'Identity Verification History'
        # keyPrefix = '0Qt'



class VisualforceAccessMetrics(models.Model):
    metrics_date = models.DateField(db_column='MetricsDate', sf_read_only=models.READ_ONLY)
    apex_page = models.ForeignKey(ApexPage, models.DO_NOTHING, db_column='ApexPageId', verbose_name='Page ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    profile = models.ForeignKey(Profile, models.DO_NOTHING, db_column='ProfileId', verbose_name='Profile ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    daily_page_view_count = models.IntegerField(db_column='DailyPageViewCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_date = models.DateField(db_column='LogDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VisualforceAccessMetrics'
        verbose_name = 'Visualforce Access Metric'
        verbose_name_plural = 'Visualforce Access Metrics'
        # keyPrefix = '0OP'



class VoiceCall(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicecall_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicecall_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    voice_vendor_line = models.ForeignKey('VoiceVendorLine', models.DO_NOTHING, db_column='VoiceVendorLineId', verbose_name='Voice Vendor Line ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_start_date_time = models.DateTimeField(db_column='CallStartDateTime', verbose_name='Call Started', sf_read_only=models.READ_ONLY)
    call_end_date_time = models.DateTimeField(db_column='CallEndDateTime', verbose_name='Call Ended', sf_read_only=models.READ_ONLY)
    from_phone_number = models.CharField(db_column='FromPhoneNumber', max_length=40, verbose_name='Caller Number', sf_read_only=models.READ_ONLY)
    to_phone_number = models.CharField(db_column='ToPhoneNumber', max_length=40, verbose_name='Recipient Number', sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(db_column='CallDurationInSeconds', verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    vendor_call_key = models.CharField(db_column='VendorCallKey', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    price = models.DecimalField(db_column='Price', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    currency_code = models.CharField(db_column='CurrencyCode', max_length=3, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Too long choices skipped
    call_disposition = models.CharField(db_column='CallDisposition', max_length=255, verbose_name='Call Status', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(db_column='CallType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound'), ('Coach', 'Coach'), ('Bridge', 'Bridge'), ('Transfer', 'Transfer'), ('Callback', 'Callback')])
    vendor_parent_call_key = models.CharField(db_column='VendorParentCallKey', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='voicecall_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_record = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='RelatedRecord ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Case, Contact, Lead, Opportunity]
    vendor_type = models.CharField(db_column='VendorType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Twilio', 'Twilio'), ('Custom', 'Custom'), ('TwilioTrial', 'TwilioTrial'), ('ContactCenter', 'ContactCenter')], blank=True, null=True)
    conference_key = models.CharField(db_column='ConferenceKey', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_recording = models.ForeignKey('VoiceCallRecording', models.DO_NOTHING, db_column='CallRecordingId', related_name='voicecall_callrecording_set', verbose_name='VoiceCallRecording ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    caller_id_type = models.CharField(db_column='CallerIdType', max_length=40, verbose_name='Caller Id', sf_read_only=models.READ_ONLY, choices=[('VendorLine', 'User'), ('CompanyNumber', 'Company'), ('LocalPresence', 'Local Presence'), ('CustomCallerId', 'Custom Caller Id')], blank=True, null=True)
    is_recorded = models.BooleanField(db_column='IsRecorded', verbose_name='Is Call Recorded', sf_read_only=models.READ_ONLY, default=False)
    activity = models.ForeignKey(Task, models.DO_NOTHING, db_column='ActivityId', verbose_name='Activity ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_connect_date_time = models.DateTimeField(db_column='CallConnectDateTime', verbose_name='Call Connected', sf_read_only=models.READ_ONLY, blank=True, null=True)
    media_provider = models.ForeignKey(CallCoachingMediaProvider, models.DO_NOTHING, db_column='MediaProviderId', verbose_name='CallCoachingMediaProvider ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    source_type = models.CharField(db_column='SourceType', max_length=40, sf_read_only=models.READ_ONLY, choices=[('Sales', None), ('Service', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCall'
        verbose_name = 'Voice Call'
        verbose_name_plural = 'Voice Calls'
        # keyPrefix = '0LQ'



class VoiceCallFeed(models.Model):
    parent = models.ForeignKey(VoiceCall, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicecallfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='voicecallfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCallFeed'
        verbose_name = 'VoiceCall Feed'
        verbose_name_plural = 'VoiceCall Feed'
        # keyPrefix = None



class VoiceCallList(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='VoiceCallList Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicecalllist_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicecalllist_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCallList'
        verbose_name = 'VoiceCallList'
        verbose_name_plural = 'VoiceCallLists'
        # keyPrefix = '0Kk'



class VoiceCallListItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicecalllistitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicecalllistitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    call_list = models.ForeignKey(VoiceCallList, models.DO_NOTHING, db_column='CallListId', verbose_name='VoiceCallList ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    related_record = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='RelatedRecord ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Contact, Lead] Master Detail Relationship *
    state = models.CharField(db_column='State', max_length=255, sf_read_only=models.READ_ONLY, choices=[('NotCalled', None), ('Called', None), ('Skipped', None)])
    ordinal = models.IntegerField(db_column='Ordinal', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCallListItem'
        verbose_name = 'VoiceCallListItem'
        verbose_name_plural = 'VoiceCallListItems'
        # keyPrefix = '0Kl'



class VoiceCallListShare(models.Model):
    parent = models.ForeignKey(VoiceCallList, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCallListShare'
        verbose_name = 'VoiceCallList Share'
        verbose_name_plural = 'VoiceCallList Share'
        # keyPrefix = None



class VoiceCallQualityFeedback(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicecallqualityfeedback_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicecallqualityfeedback_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    voice_call = models.OneToOneField(VoiceCall, models.DO_NOTHING, db_column='VoiceCallId', verbose_name='Voice Call ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    feedback_type = models.CharField(db_column='FeedbackType', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    feedback_text = models.TextField(db_column='FeedbackText', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCallQualityFeedback'
        verbose_name = 'VoiceCallQualityFeedback'
        verbose_name_plural = 'VoiceCallQualityFeedbacks'
        # keyPrefix = '0aZ'



class VoiceCallQualityFeedbackShare(models.Model):
    parent = models.ForeignKey(VoiceCallQualityFeedback, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCallQualityFeedbackShare'
        verbose_name = 'VoiceCallQualityFeedback Share'
        verbose_name_plural = 'VoiceCallQualityFeedback Share'
        # keyPrefix = None



class VoiceCallRecording(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='VoiceCallRecording Name', sf_read_only=models.NOT_UPDATEABLE)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicecallrecording_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicecallrecording_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    voice_call = models.ForeignKey(VoiceCall, models.DO_NOTHING, db_column='VoiceCallId', verbose_name='Voice Call ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    media_content = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='MediaContentId', verbose_name='ContentDocument ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    duration_in_seconds = models.IntegerField(db_column='DurationInSeconds', verbose_name='Duration in Seconds', sf_read_only=models.NOT_UPDATEABLE)
    is_consented = models.BooleanField(db_column='IsConsented', sf_read_only=models.NOT_UPDATEABLE, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCallRecording'
        verbose_name = 'VoiceCallRecording'
        verbose_name_plural = 'VoiceCallRecordings'
        # keyPrefix = '0Ox'



class VoiceCallShare(models.Model):
    parent = models.ForeignKey(VoiceCall, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCallShare'
        verbose_name = 'Voice Call Share'
        verbose_name_plural = 'Voice Call Share'
        # keyPrefix = '02c'



class VoiceCoaching(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicecoaching_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicecoaching_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    trainee = models.OneToOneField(User, models.DO_NOTHING, db_column='TraineeId', related_name='voicecoaching_trainee_set', verbose_name='User ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    related_record = models.ForeignKey(Account, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='RelatedRecord ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Contact, Lead]
    class Meta(models.Model.Meta):
        db_table = 'VoiceCoaching'
        verbose_name = 'VoiceCoaching'
        verbose_name_plural = 'VoiceCoaching'
        # keyPrefix = '00W'



class VoiceCoachingShare(models.Model):
    parent = models.ForeignKey(VoiceCoaching, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceCoachingShare'
        verbose_name = 'VoiceCoaching Share'
        verbose_name_plural = 'VoiceCoaching Share'
        # keyPrefix = None



class VoiceLocalPresenceNumber(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicelocalpresencenumber_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicelocalpresencenumber_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    country_code = models.CharField(db_column='CountryCode', max_length=10, sf_read_only=models.READ_ONLY)
    prefix = models.CharField(db_column='Prefix', max_length=10, sf_read_only=models.READ_ONLY)
    phone_number = models.CharField(db_column='PhoneNumber', max_length=40, sf_read_only=models.READ_ONLY)
    last_used_date = models.DateTimeField(db_column='LastUsedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VoiceLocalPresenceNumber'
        verbose_name = 'VoiceLocalPresenceNumber'
        verbose_name_plural = 'VoiceLocalPresenceNumbers'
        # keyPrefix = '0Mv'



class VoiceMailContent(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='VoiceMailContent Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicemailcontent_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicemailcontent_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    voice_call = models.ForeignKey(VoiceCall, models.DO_NOTHING, db_column='VoiceCallId', verbose_name='Voice Call ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    duration_in_seconds = models.IntegerField(db_column='DurationInSeconds', verbose_name='Duration in Seconds', sf_read_only=models.READ_ONLY)
    first_heard_date_time = models.DateTimeField(db_column='FirstHeardDateTime', verbose_name='DateTime First Heard', sf_read_only=models.READ_ONLY, blank=True, null=True)
    media_content = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='MediaContentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'VoiceMailContent'
        verbose_name = 'VoiceMailContent'
        verbose_name_plural = 'VoiceMailContents'
        # keyPrefix = '0Kj'



class VoiceMailContentShare(models.Model):
    parent = models.ForeignKey(VoiceMailContent, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceMailContentShare'
        verbose_name = 'VoiceMailContent Share'
        verbose_name_plural = 'VoiceMailContent Share'
        # keyPrefix = None



class VoiceMailGreeting(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='VoiceMailGreeting Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicemailgreeting_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicemailgreeting_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    duration_in_seconds = models.IntegerField(db_column='DurationInSeconds', verbose_name='Duration in Seconds', sf_read_only=models.READ_ONLY)
    media_content = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='MediaContentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceMailGreeting'
        verbose_name = 'VoiceMailGreeting'
        verbose_name_plural = 'VoiceMailGreetings'
        # keyPrefix = '0Mx'



class VoiceMailGreetingShare(models.Model):
    parent = models.ForeignKey(VoiceMailGreeting, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceMailGreetingShare'
        verbose_name = 'VoiceMailGreeting Share'
        verbose_name_plural = 'VoiceMailGreeting Share'
        # keyPrefix = None



class VoiceMailMessage(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='VoiceMailMessage Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicemailmessage_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicemailmessage_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    duration_in_seconds = models.IntegerField(db_column='DurationInSeconds', verbose_name='Duration in Seconds', sf_read_only=models.READ_ONLY)
    media_content = models.ForeignKey(ContentDocument, models.DO_NOTHING, db_column='MediaContentId', verbose_name='ContentDocument ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceMailMessage'
        verbose_name = 'voicemail'
        verbose_name_plural = 'voicemails'
        # keyPrefix = '0Lp'



class VoiceMailMessageShare(models.Model):
    parent = models.ForeignKey(VoiceMailMessage, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceMailMessageShare'
        verbose_name = 'voicemail Share'
        verbose_name_plural = 'voicemail Share'
        # keyPrefix = None



class VoiceOrgSetting(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voiceorgsetting_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voiceorgsetting_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    default_disposition = models.CharField(db_column='DefaultDisposition', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Too long choices skipped
    custom_disposition = models.CharField(db_column='CustomDisposition', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Too long choices skipped
    consent_message = models.CharField(db_column='ConsentMessage', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VoiceOrgSetting'
        verbose_name = 'Voice Org Setting'
        verbose_name_plural = 'Voice Org Settings'
        # keyPrefix = '0ac'



class VoiceVendorInfo(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicevendorinfo_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicevendorinfo_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    vendor_account_key = models.CharField(db_column='VendorAccountKey', max_length=255, sf_read_only=models.READ_ONLY)
    vendor_provider_name = models.CharField(db_column='VendorProviderName', max_length=255, sf_read_only=models.READ_ONLY)
    vendor_type = models.CharField(db_column='VendorType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Twilio', 'Twilio'), ('Custom', 'Custom'), ('TwilioTrial', 'TwilioTrial'), ('ContactCenter', 'ContactCenter')])
    is_active = models.BooleanField(db_column='IsActive', sf_read_only=models.READ_ONLY, default=False)
    corporate_number = models.CharField(db_column='CorporateNumber', max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    local_presence_default_number = models.CharField(db_column='LocalPresenceDefaultNumber', max_length=40, verbose_name='LocalPresence Default Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tenant_config_version = models.CharField(db_column='TenantConfigVersion', max_length=10, verbose_name='Tenant Configuration Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VoiceVendorInfo'
        verbose_name = 'Voice Vendor Info'
        verbose_name_plural = 'Voice Vendor Infos'
        # keyPrefix = '0L1'



class VoiceVendorLine(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='voicevendorline_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='voicevendorline_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    phone_number = models.CharField(db_column='PhoneNumber', unique=True, max_length=40, verbose_name='PhoneNumber', sf_read_only=models.READ_ONLY)
    voice_vendor_info = models.ForeignKey(VoiceVendorInfo, models.DO_NOTHING, db_column='VoiceVendorInfoId', verbose_name='Voice Vendor Info ID', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, db_column='UserId', related_name='voicevendorline_user_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    should_record = models.BooleanField(db_column='ShouldRecord', verbose_name='ShouldRecord', sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(db_column='Status', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Released', 'Released')], blank=True, null=True)
    call_usage_in_seconds_last_month = models.IntegerField(db_column='CallUsageInSecondsLastMonth', verbose_name='Call Usage in Seconds Last Month', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VoiceVendorLine'
        verbose_name = 'Voice Vendor Line'
        verbose_name_plural = 'Voice Vendor Lines'
        # keyPrefix = '0LF'



class VoiceVendorLineShare(models.Model):
    parent = models.ForeignKey(VoiceVendorLine, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'VoiceVendorLineShare'
        verbose_name = 'Voice Vendor Line Share'
        verbose_name_plural = 'Voice Vendor Line Share'
        # keyPrefix = None



class Vote(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Idea, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Idea, IdeaComment, Solution] Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Vote Type', choices=[('Up', None), ('Down', None), ('1', None), ('2', None), ('3', None), ('4', None), ('5', None)])
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='vote_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='vote_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Vote'
        verbose_name = 'Vote'
        verbose_name_plural = 'Votes'
        # keyPrefix = '083'



class WaveAutoInstallRequest(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Request Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='waveautoinstallrequest_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='waveautoinstallrequest_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    template_api_name = models.CharField(db_column='TemplateApiName', max_length=255, verbose_name='Wave Template Api Name', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    template_version = models.CharField(db_column='TemplateVersion', max_length=50, verbose_name='Wave Template Version', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    folder = models.ForeignKey(Folder, models.DO_NOTHING, db_column='FolderId', verbose_name='Folder ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    request_type = models.CharField(db_column='RequestType', max_length=255, sf_read_only=models.NOT_UPDATEABLE)
    request_status = models.CharField(db_column='RequestStatus', max_length=255)
    failed_reason = models.CharField(db_column='FailedReason', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    configuration = models.TextField(db_column='Configuration', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    request_log = models.TextField(db_column='RequestLog', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WaveAutoInstallRequest'
        verbose_name = 'Wave Auto Install Request'
        verbose_name_plural = 'Wave Auto Install Requests'
        # keyPrefix = '0UZ'



class WaveCompatibilityCheckItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Checklist Item Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='wavecompatibilitycheckitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='wavecompatibilitycheckitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    task_name = models.CharField(db_column='TaskName', max_length=255, verbose_name='Checklist Item Task Name', sf_read_only=models.READ_ONLY)
    task_result = models.CharField(db_column='TaskResult', max_length=255, verbose_name='Checklist Item Result', sf_read_only=models.READ_ONLY)
    template_api_name = models.CharField(db_column='TemplateApiName', max_length=255, verbose_name='Wave Template Api Name', sf_read_only=models.READ_ONLY)
    template_version = models.CharField(db_column='TemplateVersion', max_length=50, verbose_name='Wave Template Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    payload = models.TextField(db_column='Payload', verbose_name='Checklist Task Payload', sf_read_only=models.READ_ONLY, blank=True, null=True)
    wave_auto_install_request = models.ForeignKey(WaveAutoInstallRequest, models.DO_NOTHING, db_column='WaveAutoInstallRequestId', verbose_name='Auto Install Request ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'WaveCompatibilityCheckItem'
        verbose_name = 'Wave Compatibility Check Item'
        verbose_name_plural = 'Wave Compatibility Check Items'
        # keyPrefix = '0OZ'



class WebLink(models.Model):
    page_or_sobject_type = models.CharField(db_column='PageOrSobjectType', max_length=40, verbose_name='Page or sObject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('AccountContactRelation', None), ('ActiveCamp__CXA_Usage__c', None), ('ActiveCamp__Dashboard_Log__c', None), ('ActiveCamp__Error_Log__c', None), ('ActiveCamp__Setup_Configuration__mdt', None), ('ActiveCamp__Setup_Data__c', None), ('Activity', None), ('AgentWork', None), ('Asset', None), ('AssetRelationship', None), ('Campaign', None), ('CampaignInfluence', None), ('CampaignMember', None), ('Case', None), ('CaseRelatedIssue', None), ('ChangeRequest', None), ('ChangeRequestRelatedIssue', None), ('ChangeRequestRelatedItem', None), ('Contact', None), ('ContactRequest', None), ('ContentVersion', None), ('Contract', None), ('ContractLineItem', None), ('CustomPageItem', None), ('DashboardComponent', None), ('Dhruvsoft__O2O_Logs__c', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Entitlement', None), ('EntityMilestone', None), ('Event', None), ('Idea', None), ('Image', None), ('Incident', None), ('IncidentRelatedItem', None), ('Lead', None), ('Macro', None), ('Main_Product__c', None), ('Main_Product_Frequency__c', None), ('Main_Product_Info__c', None), ('Opportunity', None), ('OpportunityContactRole', None), ('OpportunityLineItem', None), ('OpportunityLineItemSchedule', None), ('Order', None), ('OrderItem', None), ('pandadoc__DocStatus__c', None), ('pandadoc__Object_Tokens__c', None), ('pandadoc__PandaDocDocument__c', None), ('pandadoc__PandaDocLog__c', None), ('pandadoc__Pricing_Item_Mapping__c', None), ('pandadoc__Recipient_Map__c', None), ('pandadoc__TriggerSetting__c', None), ('Problem', None), ('ProblemIncident', None), ('ProblemRelatedItem', None), ('ProcessException', None), ('Product_Category__c', None), ('Product_Category_Info__c', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('QuickText', None), ('Quote', None), ('QuoteLineItem', None), ('Recommendation', None), ('RecordAction', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('ServiceContract', None), ('ServiceResource', None), ('ServiceResourceSkill', None), ('SkillRequirement', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('Task', None), ('User', None), ('UserProvisioningRequest', None), ('UserServicePresence', None), ('VoiceCall', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPlan', None), ('WorkPlanTemplate', None), ('WorkPlanTemplateEntry', None), ('WorkStep', None), ('WorkStepTemplate', None), ('WorkThanks', None)])
    name = models.CharField(db_column='Name', max_length=240)
    is_protected = models.BooleanField(db_column='IsProtected', verbose_name='Protected Component', default=False)
    url = models.TextField(db_column='Url', verbose_name='URL', blank=True, null=True)
    encoding_key = models.CharField(db_column='EncodingKey', max_length=40, verbose_name='Link Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    link_type = models.CharField(db_column='LinkType', max_length=40, verbose_name='Content Source', choices=[('url', 'URL'), ('sControl', 'Custom S-Control'), ('javascript', 'OnClick JavaScript'), ('page', 'Visualforce Page'), ('flow', 'Flow Definition')])
    open_type = models.CharField(db_column='OpenType', max_length=40, verbose_name='Behavior', choices=[('newWindow', 'Display in new window'), ('sidebar', 'Display in existing window with sidebar'), ('noSidebar', 'Display in existing window without sidebar'), ('replace', 'Display in existing window without sidebar or header'), ('onClickJavaScript', 'Execute JavaScript')])
    height = models.IntegerField(db_column='Height', verbose_name='Height (in pixels)', blank=True, null=True)
    width = models.IntegerField(db_column='Width', verbose_name='Width (in pixels)', blank=True, null=True)
    shows_location = models.BooleanField(db_column='ShowsLocation', verbose_name='Show Address Bar', default=False)
    has_scrollbars = models.BooleanField(db_column='HasScrollbars', verbose_name='Show Scrollbars', default=False)
    has_toolbar = models.BooleanField(db_column='HasToolbar', verbose_name='Show Toolbars', default=False)
    has_menubar = models.BooleanField(db_column='HasMenubar', verbose_name='Show Menu Bar', default=False)
    shows_status = models.BooleanField(db_column='ShowsStatus', verbose_name='Show Status Bar', default=False)
    is_resizable = models.BooleanField(db_column='IsResizable', verbose_name='Resizeable', default=False)
    position = models.CharField(db_column='Position', max_length=40, verbose_name='Window Position', choices=[('fullScreen', None), ('none', None), ('topLeft', None)], blank=True, null=True)
    scontrol = models.ForeignKey(ApexPage, models.DO_NOTHING, db_column='ScontrolId', verbose_name='Custom S-Control ID', blank=True, null=True)  # Reference to tables [ApexPage, Scontrol]
    master_label = models.CharField(db_column='MasterLabel', max_length=240, verbose_name='Label', blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    display_type = models.CharField(db_column='DisplayType', max_length=40, default='L', choices=[('L', 'Detail Page Link'), ('B', 'Detail Page Button'), ('M', 'List Button')])
    require_row_selection = models.BooleanField(db_column='RequireRowSelection', default=False)
    namespace_prefix = models.CharField(db_column='NamespacePrefix', max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='weblink_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='weblink_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'WebLink'
        verbose_name = 'Custom Button or Link'
        verbose_name_plural = 'Custom Buttons or Links'
        # keyPrefix = '00b'



class WorkAccess(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workaccess_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workaccess_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('WorkBadgeDefinition', models.DO_NOTHING, db_column='ParentId', verbose_name='Badge ID')  # Master Detail Relationship *
    access_type = models.CharField(db_column='AccessType', max_length=255, verbose_name='Work Access type', choices=[('Give', 'Give')])
    class Meta(models.Model.Meta):
        db_table = 'WorkAccess'
        verbose_name = 'Access'
        verbose_name_plural = 'Access'
        # keyPrefix = '0W5'



class WorkAccessShare(models.Model):
    parent = models.ForeignKey(WorkAccess, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkAccessShare'
        verbose_name = 'Access Share'
        verbose_name_plural = 'Access Share'
        # keyPrefix = None



class WorkBadge(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workbadge_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workbadge_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    source = models.ForeignKey('WorkThanks', models.DO_NOTHING, db_column='SourceId', verbose_name='Thanks ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    definition = models.ForeignKey('WorkBadgeDefinition', models.DO_NOTHING, db_column='DefinitionId', verbose_name='Badge ID', sf_read_only=models.NOT_UPDATEABLE)
    recipient = models.ForeignKey(User, models.DO_NOTHING, db_column='RecipientId', related_name='workbadge_recipient_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)
    giver = models.ForeignKey(User, models.DO_NOTHING, db_column='GiverId', related_name='workbadge_giver_set', verbose_name='User ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    image_url = models.URLField(db_column='ImageUrl', verbose_name='Image', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    message = models.TextField(db_column='Message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadge'
        verbose_name = 'Badge Received'
        verbose_name_plural = 'Badges Received'
        # keyPrefix = '0W2'



class WorkBadgeDefinition(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Badge Name')
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workbadgedefinition_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workbadgedefinition_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_company_wide = models.BooleanField(db_column='IsCompanyWide', verbose_name='Company Badge', default=False)
    description = models.TextField(db_column='Description')
    image_url = models.URLField(db_column='ImageUrl', verbose_name='Image URL')
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=False)
    limit_number = models.IntegerField(db_column='LimitNumber', blank=True, null=True)
    is_limit_per_user = models.BooleanField(db_column='IsLimitPerUser', verbose_name='Limit Per User', default=False)
    limit_start_date = models.DateField(db_column='LimitStartDate', blank=True, null=True)
    given_badge_count = models.IntegerField(db_column='GivenBadgeCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reward_badge = models.BooleanField(db_column='IsRewardBadge', verbose_name='Reward Badge', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinition'
        verbose_name = 'Badge'
        verbose_name_plural = 'Badges'
        # keyPrefix = '0W1'



class WorkBadgeDefinitionFeed(models.Model):
    parent = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workbadgedefinitionfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='workbadgedefinitionfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionFeed'
        verbose_name = 'Badge Feed'
        verbose_name_plural = 'Badge Feed'
        # keyPrefix = None



class WorkBadgeDefinitionHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_badge_definition = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, db_column='WorkBadgeDefinitionId', verbose_name='Badge ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('Name', 'Badge Name'), ('IsCompanyWide', 'Company Badge'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('ImageUrl', 'Image URL'), ('individualMerged', 'Individual Merged'), ('LimitNumber', 'Limit Number'), ('IsLimitPerUser', 'Limit Per User'), ('LimitStartDate', 'Limit Start Date'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Owner', 'Owner Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionHistory'
        verbose_name = 'Badge History'
        verbose_name_plural = 'Badge History'
        # keyPrefix = None



class WorkBadgeDefinitionShare(models.Model):
    parent = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionShare'
        verbose_name = 'Badge Share'
        verbose_name_plural = 'Badge Share'
        # keyPrefix = None



class WorkOrder(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_order_number = models.CharField(db_column='WorkOrderNumber', max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workorder_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workorder_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, db_column='AccountId', verbose_name='Account ID', blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='ContactId', verbose_name='Contact ID', blank=True, null=True)
    case = models.ForeignKey(Case, models.DO_NOTHING, db_column='CaseId', verbose_name='Case ID', blank=True, null=True)
    entitlement = models.ForeignKey(Entitlement, models.DO_NOTHING, db_column='EntitlementId', verbose_name='Entitlement ID', blank=True, null=True)
    service_contract = models.ForeignKey(ServiceContract, models.DO_NOTHING, db_column='ServiceContractId', verbose_name='Service Contract ID', blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', blank=True, null=True)
    street = models.TextField(db_column='Street', blank=True, null=True)
    city = models.CharField(db_column='City', max_length=40, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=80, blank=True, null=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(db_column='GeocodeAccuracy', max_length=255, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(db_column='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    description = models.TextField(db_column='Description', blank=True, null=True)
    start_date = models.DateTimeField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateTimeField(db_column='EndDate', blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255, blank=True, null=True)
    root_work_order = models.ForeignKey('self', models.DO_NOTHING, db_column='RootWorkOrderId', related_name='workorder_rootworkorder_set', verbose_name='Root Work Order ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, default='New', choices=[('New', 'New'), ('In Progress', 'In Progress'), ('On Hold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('Cannot Complete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    priority = models.CharField(db_column='Priority', max_length=40, default='Low', choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], blank=True, null=True)
    tax = models.DecimalField(db_column='Tax', max_digits=18, decimal_places=2, blank=True, null=True)
    subtotal = models.DecimalField(db_column='Subtotal', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    line_item_count = models.IntegerField(db_column='LineItemCount', verbose_name='Line Items', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, db_column='Pricebook2Id', verbose_name='Price Book ID', blank=True, null=True)
    discount = models.DecimalField(db_column='Discount', max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    grand_total = models.DecimalField(db_column='GrandTotal', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_work_order = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentWorkOrderId', related_name='workorder_parentworkorder_set', verbose_name='Parent Work Order ID', blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', sf_read_only=models.READ_ONLY, default=False)
    is_stopped = models.BooleanField(db_column='IsStopped', verbose_name='Stopped', default=False)
    stop_start_date = models.DateTimeField(db_column='StopStartDate', verbose_name='Stopped Since', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sla_start_date = models.DateTimeField(db_column='SlaStartDate', verbose_name='Entitlement Process Start Time', blank=True, null=True)
    sla_exit_date = models.DateTimeField(db_column='SlaExitDate', verbose_name='Entitlement Process End Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    business_hours = models.ForeignKey(BusinessHours, models.DO_NOTHING, db_column='BusinessHoursId', verbose_name='Business Hours ID', blank=True, null=True)
    milestone_status = models.CharField(db_column='MilestoneStatus', max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    duration = models.DecimalField(db_column='Duration', max_digits=18, decimal_places=2, blank=True, null=True)
    duration_type = models.CharField(db_column='DurationType', max_length=255, default='Hours', choices=[('Hours', 'Hours'), ('Minutes', 'Minutes')], blank=True, null=True)
    duration_in_minutes = models.DecimalField(db_column='DurationInMinutes', max_digits=18, decimal_places=2, verbose_name='Duration in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_appointment_count = models.IntegerField(db_column='ServiceAppointmentCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status_category = models.CharField(db_column='StatusCategory', max_length=255, sf_read_only=models.READ_ONLY, default='None', choices=[('New', 'New'), ('InProgress', 'In Progress'), ('OnHold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('None', 'None'), ('CannotComplete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrder'
        verbose_name = 'Work Order'
        verbose_name_plural = 'Work Orders'
        # keyPrefix = '0WO'



class WorkOrderFeed(models.Model):
    parent = models.ForeignKey(WorkOrder, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workorderfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='workorderfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderFeed'
        verbose_name = 'Work Order Feed'
        verbose_name_plural = 'Work Order Feed'
        # keyPrefix = None



class WorkOrderHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_order = models.ForeignKey(WorkOrder, models.DO_NOTHING, db_column='WorkOrderId', verbose_name='Work Order ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account'), ('Address', 'Address'), ('Asset', 'Asset'), ('BusinessHours', 'Business Hours'), ('Case', 'Case'), ('City', 'City'), ('Contact', 'Contact'), ('Country', 'Country'), ('created', 'Created.'), ('Description', 'Description'), ('Duration', 'Duration'), ('DurationInMinutes', 'Duration in Minutes'), ('DurationType', 'Duration Type'), ('EndDate', 'End Date'), ('Entitlement', 'Entitlement'), ('SlaExitDate', 'Entitlement Process End Time'), ('SlaStartDate', 'Entitlement Process Start Time'), ('feedEvent', 'Feed event'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('individualMerged', 'Individual Merged'), ('IsClosed', 'Is Closed'), ('Latitude', 'Latitude'), ('LineItemAutonumberMaster', 'LineItemAutonumberMaster'), ('LineItemCount', 'Line Items'), ('Longitude', 'Longitude'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentWorkOrder', 'Parent Work Order'), ('Pricebook2', 'Price Book'), ('Priority', 'Priority'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootWorkOrder', 'Root Work Order'), ('ServiceContract', 'Service Contract'), ('StartDate', 'Start Date'), ('State', 'State/Province'), ('Status', 'Status'), ('StatusCategory', 'Status Category'), ('IsStopped', 'Stopped'), ('StopStartDate', 'Stopped Since'), ('Street', 'Street'), ('Subject', 'Subject'), ('Subtotal', 'Subtotal'), ('Tax', 'Tax'), ('TotalPrice', 'Total Price'), ('PostalCode', 'Zip/Postal Code')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderHistory'
        verbose_name = 'Work Order History'
        verbose_name_plural = 'Work Order History'
        # keyPrefix = None



class WorkOrderLineItem(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    line_item_number = models.CharField(db_column='LineItemNumber', max_length=255, verbose_name='Work Order Line Item Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workorderlineitem_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workorderlineitem_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    work_order = models.ForeignKey(WorkOrder, models.DO_NOTHING, db_column='WorkOrderId', verbose_name='Work Order ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    parent_work_order_line_item = models.ForeignKey('self', models.DO_NOTHING, db_column='ParentWorkOrderLineItemId', related_name='workorderlineitem_parentworkorderlineitem_set', verbose_name='Parent Work Order Line Item ID', blank=True, null=True)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, db_column='Product2Id', verbose_name='Product ID', blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, db_column='AssetId', verbose_name='Asset ID', blank=True, null=True)
    order = models.ForeignKey(Order, models.DO_NOTHING, db_column='OrderId', verbose_name='Order ID', blank=True, null=True)
    root_work_order_line_item = models.ForeignKey('self', models.DO_NOTHING, db_column='RootWorkOrderLineItemId', related_name='workorderlineitem_rootworkorderlineitem_set', verbose_name='Root Work Order Line Item ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    start_date = models.DateTimeField(db_column='StartDate', blank=True, null=True)
    end_date = models.DateTimeField(db_column='EndDate', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, default='New', choices=[('New', 'New'), ('In Progress', 'In Progress'), ('On Hold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('Cannot Complete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    pricebook_entry = models.ForeignKey(PricebookEntry, models.DO_NOTHING, db_column='PricebookEntryId', verbose_name='Product ID', blank=True, null=True)
    quantity = models.DecimalField(db_column='Quantity', max_digits=12, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(db_column='UnitPrice', max_digits=18, decimal_places=2, blank=True, null=True)
    discount = models.DecimalField(db_column='Discount', max_digits=5, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(db_column='ListPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    subtotal = models.DecimalField(db_column='Subtotal', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    duration = models.DecimalField(db_column='Duration', max_digits=18, decimal_places=2, blank=True, null=True)
    duration_type = models.CharField(db_column='DurationType', max_length=255, default='Hours', choices=[('Hours', 'Hours'), ('Minutes', 'Minutes')], blank=True, null=True)
    duration_in_minutes = models.DecimalField(db_column='DurationInMinutes', max_digits=18, decimal_places=2, verbose_name='Duration in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(db_column='Street', blank=True, null=True)
    city = models.CharField(db_column='City', max_length=40, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(db_column='Country', max_length=80, blank=True, null=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(db_column='GeocodeAccuracy', max_length=255, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(db_column='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    subject = models.CharField(db_column='Subject', max_length=255, blank=True, null=True)
    status_category = models.CharField(db_column='StatusCategory', max_length=255, sf_read_only=models.READ_ONLY, default='None', choices=[('New', 'New'), ('InProgress', 'In Progress'), ('OnHold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('None', 'None'), ('CannotComplete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    is_closed = models.BooleanField(db_column='IsClosed', sf_read_only=models.READ_ONLY, default=False)
    priority = models.CharField(db_column='Priority', max_length=40, default='Low', choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], blank=True, null=True)
    service_appointment_count = models.IntegerField(db_column='ServiceAppointmentCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderLineItem'
        verbose_name = 'Work Order Line Item'
        verbose_name_plural = 'Work Order Line Items'
        # keyPrefix = '1WL'



class WorkOrderLineItemFeed(models.Model):
    parent = models.ForeignKey(WorkOrderLineItem, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workorderlineitemfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='workorderlineitemfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderLineItemFeed'
        verbose_name = 'Work Order Line Item Feed'
        verbose_name_plural = 'Work Order Line Item Feed'
        # keyPrefix = None



class WorkOrderLineItemHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_order_line_item = models.ForeignKey(WorkOrderLineItem, models.DO_NOTHING, db_column='WorkOrderLineItemId', verbose_name='Work Order Line Item ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('Asset', 'Asset'), ('City', 'City'), ('Country', 'Country'), ('created', 'Created.'), ('Description', 'Description'), ('Discount', 'Discount'), ('Duration', 'Duration'), ('DurationInMinutes', 'Duration in Minutes'), ('DurationType', 'Duration Type'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('individualMerged', 'Individual Merged'), ('IsClosed', 'Is Closed'), ('Latitude', 'Latitude'), ('Longitude', 'Longitude'), ('Order', 'Order'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentWorkOrderLineItem', 'Parent Work Order Line Item'), ('Priority', 'Priority'), ('PricebookEntry', 'Product'), ('Product2', 'Product'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootWorkOrderLineItem', 'Root Work Order Line Item'), ('StartDate', 'Start Date'), ('State', 'State/Province'), ('Status', 'Status'), ('StatusCategory', 'Status Category'), ('Street', 'Street'), ('Subject', 'Subject'), ('UnitPrice', 'Unit Price'), ('WorkOrder', 'Work Order'), ('PostalCode', 'Zip/Postal Code')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderLineItemHistory'
        verbose_name = 'Work Order Line Item History'
        verbose_name_plural = 'Work Order Line Item History'
        # keyPrefix = None



class WorkOrderLineItemStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(db_column='StatusCode', max_length=40, sf_read_only=models.READ_ONLY, default='None', choices=[('New', 'New'), ('InProgress', 'In Progress'), ('OnHold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('None', 'None'), ('CannotComplete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workorderlineitemstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workorderlineitemstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderLineItemStatus'
        verbose_name = 'Work Order Line Item Status Value'
        verbose_name_plural = 'Work Order Line Item Status Value'
        # keyPrefix = None



class WorkOrderShare(models.Model):
    parent = models.ForeignKey(WorkOrder, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderShare'
        verbose_name = 'Work Order Share'
        verbose_name_plural = 'Work Order Share'
        # keyPrefix = None



class WorkOrderStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(db_column='StatusCode', max_length=40, sf_read_only=models.READ_ONLY, default='None', choices=[('New', 'New'), ('InProgress', 'In Progress'), ('OnHold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('None', 'None'), ('CannotComplete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workorderstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workorderstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderStatus'
        verbose_name = 'Work Order Status Value'
        verbose_name_plural = 'Work Order Status Value'
        # keyPrefix = None



class WorkPlan(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workplan_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workplan_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    work_order = models.ForeignKey(WorkOrder, models.DO_NOTHING, db_column='WorkOrderId', verbose_name='Work Order ID', blank=True, null=True)  # Master Detail Relationship *
    execution_order = models.IntegerField(db_column='ExecutionOrder', blank=True, null=True)
    description = models.TextField(db_column='Description', blank=True, null=True)
    work_order_line_item = models.ForeignKey(WorkOrderLineItem, models.DO_NOTHING, db_column='WorkOrderLineItemId', verbose_name='Work Order Line Item ID', blank=True, null=True)  # Master Detail Relationship *
    work_plan_template = models.ForeignKey('WorkPlanTemplate', models.DO_NOTHING, db_column='WorkPlanTemplateId', verbose_name='Work Plan Template ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_record = models.ForeignKey(ChangeRequest, models.DO_NOTHING, db_column='ParentRecordId', verbose_name='Parent Record ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ChangeRequest, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    parent_record_type = models.CharField(db_column='ParentRecordType', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlan'
        verbose_name = 'Work Plan'
        verbose_name_plural = 'Work Plans'
        # keyPrefix = '0gq'



class WorkPlanFeed(models.Model):
    parent = models.ForeignKey(WorkPlan, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workplanfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='workplanfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanFeed'
        verbose_name = 'Work Plan Feed'
        verbose_name_plural = 'Work Plan Feed'
        # keyPrefix = None



class WorkPlanHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_plan = models.ForeignKey(WorkPlan, models.DO_NOTHING, db_column='WorkPlanId', verbose_name='Work Plan ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Description', 'Description'), ('ExecutionOrder', 'Execution Order'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentRecord', 'Parent Record'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('WorkOrder', 'Work Order'), ('WorkOrderLineItem', 'Work Order Line Item'), ('WorkPlanTemplate', 'Work Plan Template')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanHistory'
        verbose_name = 'Work Plan History'
        verbose_name_plural = 'Work Plan History'
        # keyPrefix = None



class WorkPlanShare(models.Model):
    parent = models.ForeignKey(WorkPlan, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanShare'
        verbose_name = 'Work Plan Share'
        verbose_name_plural = 'Work Plan Share'
        # keyPrefix = None



class WorkPlanTemplate(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workplantemplate_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workplantemplate_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    description = models.TextField(db_column='Description', blank=True, null=True)
    relative_execution_order = models.IntegerField(db_column='RelativeExecutionOrder', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanTemplate'
        verbose_name = 'Work Plan Template'
        verbose_name_plural = 'Work Plan Templates'
        # keyPrefix = '7Iy'



class WorkPlanTemplateEntry(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_plan_template_entry_number = models.CharField(db_column='WorkPlanTemplateEntryNumber', max_length=255, verbose_name='Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workplantemplateentry_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workplantemplateentry_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    work_plan_template = models.ForeignKey(WorkPlanTemplate, models.DO_NOTHING, db_column='WorkPlanTemplateId', verbose_name='Work Plan Template ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    work_step_template = models.ForeignKey('WorkStepTemplate', models.DO_NOTHING, db_column='WorkStepTemplateId', verbose_name='Work Step Template ID')  # Master Detail Relationship *
    execution_order = models.IntegerField(db_column='ExecutionOrder', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanTemplateEntry'
        verbose_name = 'Work Plan Template Entry'
        verbose_name_plural = 'Work Plan Template Entries'
        # keyPrefix = '8xu'



class WorkPlanTemplateEntryFeed(models.Model):
    parent = models.ForeignKey(WorkPlanTemplateEntry, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workplantemplateentryfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='workplantemplateentryfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanTemplateEntryFeed'
        verbose_name = 'Work Plan Template Entry Feed'
        verbose_name_plural = 'Work Plan Template Entry Feed'
        # keyPrefix = None



class WorkPlanTemplateEntryHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_plan_template_entry = models.ForeignKey(WorkPlanTemplateEntry, models.DO_NOTHING, db_column='WorkPlanTemplateEntryId', verbose_name='Work Plan Template Entry ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('ExecutionOrder', 'Execution Order'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('WorkPlanTemplate', 'Work Plan Template'), ('WorkStepTemplate', 'Work Step Template')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanTemplateEntryHistory'
        verbose_name = 'Work Plan Template Entry History'
        verbose_name_plural = 'Work Plan Template Entry History'
        # keyPrefix = None



class WorkPlanTemplateFeed(models.Model):
    parent = models.ForeignKey(WorkPlanTemplate, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workplantemplatefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='workplantemplatefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanTemplateFeed'
        verbose_name = 'Work Plan Template Feed'
        verbose_name_plural = 'Work Plan Template Feed'
        # keyPrefix = None



class WorkPlanTemplateHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_plan_template = models.ForeignKey(WorkPlanTemplate, models.DO_NOTHING, db_column='WorkPlanTemplateId', verbose_name='Work Plan Template ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelativeExecutionOrder', 'Relative Execution Order')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanTemplateHistory'
        verbose_name = 'Work Plan Template History'
        verbose_name_plural = 'Work Plan Template History'
        # keyPrefix = None



class WorkPlanTemplateShare(models.Model):
    parent = models.ForeignKey(WorkPlanTemplate, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkPlanTemplateShare'
        verbose_name = 'Work Plan Template Share'
        verbose_name_plural = 'Work Plan Template Share'
        # keyPrefix = None



class WorkStep(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workstep_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workstep_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    work_plan = models.ForeignKey(WorkPlan, models.DO_NOTHING, db_column='WorkPlanId', verbose_name='Work Plan ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    work_order = models.ForeignKey(WorkOrder, models.DO_NOTHING, db_column='WorkOrderId', verbose_name='Work Order ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    work_order_line_item = models.ForeignKey(WorkOrderLineItem, models.DO_NOTHING, db_column='WorkOrderLineItemId', verbose_name='Work Order Line Item ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    description = models.TextField(db_column='Description', blank=True, null=True)
    execution_order = models.IntegerField(db_column='ExecutionOrder', blank=True, null=True)
    work_plan_execution_order = models.IntegerField(db_column='WorkPlanExecutionOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_time = models.DateTimeField(db_column='StartTime', blank=True, null=True)
    end_time = models.DateTimeField(db_column='EndTime', blank=True, null=True)
    paused_flow_interview = models.ForeignKey(FlowInterview, models.DO_NOTHING, db_column='PausedFlowInterviewId', verbose_name='Paused Flow Interview ID', blank=True, null=True)
    action_definition = models.CharField(db_column='ActionDefinition', max_length=255, help_text='Find and select the associated global action, quick action, screen flow, or mobile flow.', choices=[('hvs_linkedin__ConnectionRequest', 'Send LinkedIn Connection Request'), ('hvs_linkedin__InMail', 'Send Linkedin InMail'), ('setup_service_experience__Create_Case', 'Create a Case'), ('setup_service_experience__Reset_Pwd', 'Reset Password'), ('setup_service_experience__Verify_Cust', 'Verify Identity'), ('Dhruvsoft__Convert_To_Order', 'Convert To Order'), ('SendEmail', 'Email'), ('Follow_Up', 'Follow Up'), ('LogACall', 'Log a Call'), ('NewAccount', 'New Account'), ('NewCase', 'New Case'), ('NewContact', 'New Contact'), ('_NewQuipDocument', 'New Document'), ('NewEvent', 'New Event'), ('NewGroup', 'New Group'), ('NewLead', 'New Lead'), ('FeedItem.ContentNote', 'New Note'), ('FeedItem.ContentNote', 'New Note'), ('NewOpportunity', 'New Opportunity'), ('NewTask', 'New Task')], blank=True, null=True)
    action_type = models.CharField(db_column='ActionType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Flow', 'Flow'), ('QuickAction', 'Quick Action')], blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, default='New', choices=[('New', 'New'), ('In Progress', 'In Progress'), ('Paused', 'Paused'), ('Completed', 'Completed'), ('Not Applicable', 'Not Applicable')], blank=True, null=True)
    status_category = models.CharField(db_column='StatusCategory', max_length=255, sf_read_only=models.READ_ONLY, default='New', choices=[('New', 'New'), ('InProgress', 'In Progress'), ('Paused', 'Paused'), ('Completed', 'Completed'), ('NotApplicable', 'Not Applicable')], blank=True, null=True)
    parent_record = models.ForeignKey(ChangeRequest, models.DO_NOTHING, db_column='ParentRecordId', verbose_name='Parent Record ID', sf_read_only=models.READ_ONLY)  # Reference to tables [ChangeRequest, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    parent_record_type = models.CharField(db_column='ParentRecordType', max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkStep'
        verbose_name = 'Work Step'
        verbose_name_plural = 'Work Steps'
        # keyPrefix = '0hF'



class WorkStepFeed(models.Model):
    parent = models.ForeignKey(WorkStep, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workstepfeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='workstepfeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkStepFeed'
        verbose_name = 'Work Step Feed'
        verbose_name_plural = 'Work Step Feed'
        # keyPrefix = None



class WorkStepHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_step = models.ForeignKey(WorkStep, models.DO_NOTHING, db_column='WorkStepId', verbose_name='Work Step ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ActionDefinition', 'Action Definition'), ('ActionType', 'Action Type'), ('created', 'Created.'), ('Description', 'Description'), ('EndTime', 'End Time'), ('ExecutionOrder', 'Execution Order'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'Name'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentRecord', 'Parent Record'), ('PausedFlowInterview', 'Paused Flow Interview'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('StartTime', 'Start Time'), ('Status', 'Status'), ('StatusCategory', 'Status Category'), ('WorkOrder', 'Work Order'), ('WorkOrderLineItem', 'Work Order Line Item'), ('WorkPlan', 'Work Plan')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkStepHistory'
        verbose_name = 'Work Step History'
        verbose_name_plural = 'Work Step History'
        # keyPrefix = None



class WorkStepStatus(models.Model):
    master_label = models.CharField(db_column='MasterLabel', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(db_column='ApiName', max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(db_column='SortOrder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(db_column='IsDefault', sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(db_column='StatusCode', max_length=40, sf_read_only=models.READ_ONLY, default='New', choices=[('New', 'New'), ('InProgress', 'In Progress'), ('Paused', 'Paused'), ('Completed', 'Completed'), ('NotApplicable', 'Not Applicable')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workstepstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workstepstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'WorkStepStatus'
        verbose_name = 'Work Step Status Value'
        verbose_name_plural = 'Work Step Status Value'
        # keyPrefix = None



class WorkStepTemplate(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=255)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='worksteptemplate_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='worksteptemplate_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(db_column='LastViewedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(db_column='LastReferencedDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(db_column='IsActive', verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    description = models.TextField(db_column='Description', blank=True, null=True)
    action_definition = models.CharField(db_column='ActionDefinition', max_length=255, help_text='Find and select the associated global action, quick action, screen flow, or mobile flow.', choices=[('hvs_linkedin__ConnectionRequest', 'Send LinkedIn Connection Request'), ('hvs_linkedin__InMail', 'Send Linkedin InMail'), ('setup_service_experience__Create_Case', 'Create a Case'), ('setup_service_experience__Reset_Pwd', 'Reset Password'), ('setup_service_experience__Verify_Cust', 'Verify Identity'), ('Dhruvsoft__Convert_To_Order', 'Convert To Order'), ('SendEmail', 'Email'), ('Follow_Up', 'Follow Up'), ('LogACall', 'Log a Call'), ('NewAccount', 'New Account'), ('NewCase', 'New Case'), ('NewContact', 'New Contact'), ('_NewQuipDocument', 'New Document'), ('NewEvent', 'New Event'), ('NewGroup', 'New Group'), ('NewLead', 'New Lead'), ('FeedItem.ContentNote', 'New Note'), ('FeedItem.ContentNote', 'New Note'), ('NewOpportunity', 'New Opportunity'), ('NewTask', 'New Task')], blank=True, null=True)
    action_type = models.CharField(db_column='ActionType', max_length=255, sf_read_only=models.READ_ONLY, choices=[('Flow', 'Flow'), ('QuickAction', 'Quick Action')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkStepTemplate'
        verbose_name = 'Work Step Template'
        verbose_name_plural = 'Work Step Templates'
        # keyPrefix = '4L0'



class WorkStepTemplateFeed(models.Model):
    parent = models.ForeignKey(WorkStepTemplate, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'WDC Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='worksteptemplatefeed_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(db_column='CommentCount', sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(db_column='LikeCount', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(db_column='LinkUrl', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(db_column='IsRichText', sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, db_column='RelatedRecordId', verbose_name='Related Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, db_column='InsertedById', related_name='worksteptemplatefeed_insertedby_set', verbose_name='InsertedBy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, db_column='BestCommentId', verbose_name='Best Comment ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkStepTemplateFeed'
        verbose_name = 'Work Step Template Feed'
        verbose_name_plural = 'Work Step Template Feed'
        # keyPrefix = None



class WorkStepTemplateHistory(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_step_template = models.ForeignKey(WorkStepTemplate, models.DO_NOTHING, db_column='WorkStepTemplateId', verbose_name='Work Step Template ID', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ActionDefinition', 'Action Definition'), ('ActionType', 'Action Type'), ('IsActive', 'Active'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    data_type = models.CharField(db_column='DataType', max_length=40, verbose_name='Datatype', sf_read_only=models.READ_ONLY, choices=[('Address', None), ('AnyType', None), ('AutoNumber', None), ('Base64', None), ('BitVector', None), ('Boolean', None), ('Content', None), ('Currency', None), ('DataCategoryGroupReference', None), ('DateOnly', None), ('DateTime', None), ('Division', None), ('Double', None), ('DynamicEnum', None), ('Email', None), ('EncryptedBase64', None), ('EncryptedText', None), ('EntityId', None), ('EnumOrId', None), ('ExternalId', None), ('Fax', None), ('File', None), ('HtmlMultiLineText', None), ('HtmlStringPlusClob', None), ('InetAddress', None), ('Json', None), ('JsonStringPlusClob', None), ('Location', None), ('MultiEnum', None), ('MultiLineText', None), ('Namespace', None), ('Percent', None), ('PersonName', None), ('Phone', None), ('Raw', None), ('RecordType', None), ('SfdcEncryptedText', None), ('SimpleNamespace', None), ('StringPlusClob', None), ('Switchable_PersonName', None), ('Text', None), ('TimeOnly', None), ('Url', None), ('YearQuarter', None)], blank=True, null=True)
    old_value = models.CharField(db_column='OldValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(db_column='NewValue', max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkStepTemplateHistory'
        verbose_name = 'Work Step Template History'
        verbose_name_plural = 'Work Step Template History'
        # keyPrefix = None



class WorkStepTemplateShare(models.Model):
    parent = models.ForeignKey(WorkStepTemplate, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkStepTemplateShare'
        verbose_name = 'Work Step Template Share'
        verbose_name_plural = 'Work Step Template Share'
        # keyPrefix = None



class WorkThanks(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='workthanks_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='workthanks_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    giver = models.ForeignKey(User, models.DO_NOTHING, db_column='GiverId', related_name='workthanks_giver_set', verbose_name='User ID', sf_read_only=models.NOT_UPDATEABLE)
    message = models.TextField(db_column='Message', sf_read_only=models.NOT_UPDATEABLE)
    feed_item = models.ForeignKey(FeedItem, models.DO_NOTHING, db_column='FeedItemId', verbose_name='Feed Item ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkThanks'
        verbose_name = 'Thanks'
        verbose_name_plural = 'Thanks'
        # keyPrefix = '0W0'



class WorkThanksShare(models.Model):
    parent = models.ForeignKey(WorkThanks, models.DO_NOTHING, db_column='ParentId', verbose_name='Parent ID', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, db_column='UserOrGroupId', verbose_name='User/Group ID', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(db_column='RowCause', max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting'), ('GuestRule', 'Guest User Sharing Rule'), ('GuestParentImplicit', 'Associated guest user sharing'), ('GuestPersonImplicit', 'Associated Guest User Sharing'), ('SurveyShare', 'Survey Sharing Rule'), ('CompliantDataSharing', 'Compliant Data Sharing'), ('MfgTargetShare', 'Manufacturing Target Sharing Rule'), ('SharingRecordCollection', 'Record Collection'), ('LearningAssignment', 'Learning Assignment Share'), ('LearningAssignmentImplicit', 'Learning Assignment Implicit Share'), ('LearningItemAssignment', 'Learning Item Assignment Share')], blank=True, null=True)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkThanksShare'
        verbose_name = 'Thanks Share'
        verbose_name_plural = 'Thanks Share'
        # keyPrefix = None



class PandadocDocStatus(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Doc Status Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadocdocstatus_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadocdocstatus_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_panda_doc_document = models.ForeignKey('PandadocPandaDocDocument', models.DO_NOTHING, db_column='pandadoc__PandaDocDocument__c', verbose_name='Panda Doc Document', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    pandadoc_input_json_ev2 = models.TextField(db_column='pandadoc__InputJSON_EV2__c', verbose_name='InputJSON EV2', blank=True, null=True) 
    pandadoc_input_json = models.TextField(db_column='pandadoc__InputJSON__c', verbose_name='Input JSON', blank=True, null=True) 
    pandadoc_status = models.CharField(db_column='pandadoc__Status__c', max_length=255, verbose_name='Status', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__DocStatus__c'
        verbose_name = 'Doc Status'
        verbose_name_plural = 'Doc Status'
        # keyPrefix = 'a01'



class PandadocObjectTokens(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='SObject Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadocobjecttokens_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadocobjecttokens_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_data = models.TextField(db_column='pandadoc__Data__c', verbose_name='Data', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__Object_Tokens__c'
        verbose_name = 'Object Tokens'
        verbose_name_plural = 'Object Tokens'
        # keyPrefix = 'a02'



class PandadocPandaDocDocument(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='PandaDoc Document Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadocpandadocdocument_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadocpandadocdocument_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='pandadoc__Account__c', verbose_name='Account', blank=True, null=True) 
    pandadoc_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='pandadoc__Contact__c', verbose_name='Contact', blank=True, null=True) 
    pandadoc_custom_object_id = models.CharField(db_column='pandadoc__Custom_Object_Id__c', max_length=18, verbose_name='Custom Object Id', blank=True, null=True) 
    pandadoc_editor_version = models.CharField(db_column='pandadoc__Editor_Version__c', max_length=255, verbose_name='Editor Version', default='EV1', choices=[('EV1', 'EV1'), ('EV2', 'EV2')], blank=True, null=True) 
    pandadoc_file_with_content = models.CharField(db_column='pandadoc__File_With_Content__c', max_length=18, verbose_name='File With Content', blank=True, null=True) 
    pandadoc_input_json_ev2 = models.TextField(db_column='pandadoc__InputJSON_EV2__c', verbose_name='InputJSON EV2', blank=True, null=True) 
    pandadoc_input_json = models.TextField(db_column='pandadoc__InputJSON__c', verbose_name='Input JSON', blank=True, null=True) 
    pandadoc_is_deleted = models.BooleanField(db_column='pandadoc__Is_Deleted__c', verbose_name='Is Deleted', default=False, help_text='True if this document was deleted in PandaDoc') 
    pandadoc_lead = models.ForeignKey(Lead, models.DO_NOTHING, db_column='pandadoc__Lead__c', verbose_name='Lead', blank=True, null=True) 
    pandadoc_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='pandadoc__Opportunity__c', verbose_name='Opportunity', blank=True, null=True) 
    pandadoc_status = models.CharField(db_column='pandadoc__Status__c', max_length=255, verbose_name='Status', blank=True, null=True) 
    pandadoc_template_id = models.CharField(db_column='pandadoc__Template_Id__c', max_length=255, verbose_name='Template Id', blank=True, null=True) 
    pandadoc_template_name = models.CharField(db_column='pandadoc__Template_Name__c', max_length=255, verbose_name='Template Name', blank=True, null=True) 
    pandadoc_uuid = models.CharField(db_column='pandadoc__UUID__c', max_length=30, verbose_name='UUID', blank=True, null=True) 
    pandadoc_parent_id = models.CharField(db_column='pandadoc__ParentId__c', max_length=1300, verbose_name='ParentId', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__PandaDocDocument__c'
        verbose_name = 'PandaDoc Document'
        verbose_name_plural = 'PandaDoc Documents'
        # keyPrefix = 'a03'



class PandadocPandaDocLog(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='PandaDoc Log Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadocpandadoclog_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadocpandadoclog_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_description = models.TextField(db_column='pandadoc__Description__c', verbose_name='Description', blank=True, null=True) 
    pandadoc_level = models.CharField(db_column='pandadoc__Level__c', max_length=255, verbose_name='Level', default='Error', choices=[('Error', 'Error')], blank=True, null=True) 
    pandadoc_location = models.CharField(db_column='pandadoc__Location__c', max_length=255, verbose_name='Location', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__PandaDocLog__c'
        verbose_name = 'PandaDoc Log'
        verbose_name_plural = 'PandaDoc Logs'
        # keyPrefix = 'a0D'



class PandadocPandaDocJsonBulderMapping(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, db_column='SetupOwnerId', verbose_name='Location', blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadocpandadocjsonbuldermapping_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadocpandadocjsonbuldermapping_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_document_name = models.CharField(db_column='pandadoc__Document_Name__c', max_length=255, verbose_name='Document Name', help_text='By default name for document will be taken from field marked here', blank=True, null=True) 
    pandadoc_json_builder_class_name = models.CharField(db_column='pandadoc__JsonBuilder_Class_Name__c', max_length=40, verbose_name='JsonBuilder Class Name') 
    pandadoc_referenced_recipients = models.CharField(db_column='pandadoc__ReferencedRecipients__c', max_length=255, verbose_name='ReferencedRecipients', blank=True, null=True) 
    pandadoc_related_pricing_items = models.CharField(db_column='pandadoc__Related_Pricing_Items__c', max_length=255, verbose_name='Related Pricing Items', help_text='The Standard Json Builder use this field for forming Pricing Items', blank=True, null=True) 
    pandadoc_related_recipients = models.CharField(db_column='pandadoc__Related_Recipients__c', max_length=255, verbose_name='Related Recipients', help_text='The Standard Json Builder use this field for forming Recipients.', blank=True, null=True) 
    pandadoc_send_itself_as_recipient = models.BooleanField(db_column='pandadoc__Send_Itself_As_Recipient__c', verbose_name='Send Itself As Recipient', default=False) 
    pandadoc_use_standard_builder = models.BooleanField(db_column='pandadoc__Use_Standard_Builder__c', verbose_name='Use Standard Builder', default=False, help_text='If checked then Standard JSON Builder used') 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__PandaDoc_JsonBulder_Mapping__c'
        verbose_name = 'PandaDoc JsonBuilder Mapping'
        verbose_name_plural = 'PandaDoc JsonBuilder Mapping'
        # keyPrefix = 'a0E'



class PandadocPricingItemMapping(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Object name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadocpricingitemmapping_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadocpricingitemmapping_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_config_json = models.TextField(db_column='pandadoc__Config_JSON__c', verbose_name='Config JSON', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__Pricing_Item_Mapping__c'
        verbose_name = 'Pricing Item Map'
        verbose_name_plural = 'Pricing Item Maps'
        # keyPrefix = 'a0F'



class PandadocRecipientMap(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Object name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadocrecipientmap_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadocrecipientmap_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_config_json = models.TextField(db_column='pandadoc__Config_JSON__c', verbose_name='Config JSON', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__Recipient_Map__c'
        verbose_name = 'Recipient Map'
        verbose_name_plural = 'Recipient Maps'
        # keyPrefix = 'a0G'



class PandadocSettings(models.Model):
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, db_column='SetupOwnerId', verbose_name='Location', blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadocsettings_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadocsettings_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_value = models.CharField(db_column='pandadoc__Value__c', max_length=255, verbose_name='Value', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__Settings__c'
        verbose_name = 'PandaDoc Settings'
        verbose_name_plural = 'PandaDoc Settings'
        # keyPrefix = 'a0H'



class PandadocTriggerSetting(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING, db_column='OwnerId', verbose_name='Owner ID', default=models.DEFAULTED_ON_CREATE)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Trigger Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(db_column='CreatedDate', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, db_column='CreatedById', related_name='pandadoctriggersetting_createdby_set', verbose_name='Created By ID', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(db_column='LastModifiedDate', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, db_column='LastModifiedById', related_name='pandadoctriggersetting_lastmodifiedby_set', verbose_name='Last Modified By ID', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(db_column='SystemModstamp', sf_read_only=models.READ_ONLY)
    pandadoc_custom_settings = models.TextField(db_column='pandadoc__Custom_Settings__c', verbose_name='Custom Settings', blank=True, null=True) 
    pandadoc_ev1_ready = models.BooleanField(db_column='pandadoc__EV1_Ready__c', verbose_name='EV1 Ready', default=False) 
    pandadoc_ev2_ready = models.BooleanField(db_column='pandadoc__EV2_Ready__c', verbose_name='EV2 Ready', default=False) 
    pandadoc_enabled = models.BooleanField(db_column='pandadoc__Enabled__c', verbose_name='Enabled', default=False) 
    pandadoc_title = models.CharField(db_column='pandadoc__Title__c', max_length=80, verbose_name='Title', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'pandadoc__TriggerSetting__c'
        verbose_name = 'Trigger Setting'
        verbose_name_plural = 'Trigger Settings'
        # keyPrefix = 'a0I'
