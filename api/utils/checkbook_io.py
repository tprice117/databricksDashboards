import json
from typing import List
import requests
from django.conf import settings
import datetime

from api.models import Order, Payout, SellerLocation

class CheckbookIO:
  # def __init__(self):
  #   self.source_token = source_token
  #   self.run_id = run_id

  def sendPhysicalCheck(self, seller_location:SellerLocation, amount, orders:List[Order]):
    # Build remittance advice object.
    remittance_advice = []
    for order in orders:
      # Get total already paid to seller for this order.
      payouts = Payout.objects.filter(order=order)
      total_paid_to_seller = sum([payout.amount for payout in payouts])
    
      remittance_advice.append({
        "id": str(order.id).replace('-', ''),
        "amount": round(float(order.seller_price() - total_paid_to_seller), 2),
        "description": order.order_group.seller_product_seller_location.seller_product.product.main_product.name + " | " + order.order_group.user_address.street,
        "date": order.end_date.strftime("%Y-%m-%d")
      })

    response = requests.post(settings.CHECKBOOK_ENDPOINT + "check/physical", 
      json.dumps(
        {
          # "account": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "amount": round(float(amount), 2),
          # "attachment": {
          #     "content": "",
          #     "filename": "attachment.pdf"
          # },
          # "description": "Example memo",
          "mail_type": "USPS_FIRST_CLASS",
          "name": seller_location.payee_name,
          # "number": "5001",
          "recipient": {
            "line_1": seller_location.mailing_address.street,
            "line_2": "",
            "city": seller_location.mailing_address.city, 
            "state": seller_location.mailing_address.state,
            "zip": seller_location.mailing_address.postal_code,
            "country": seller_location.mailing_address.country, 
          },
          "remittance_advice": remittance_advice,
        }
      ), 
      headers={
        "Authorization": settings.CHECKBOOK_API_KEY + ":" + settings.CHECKBOOK_API_SECRET,
        "accept": "application/json",
        "content-type": "application/json"
      }
    )

    return response.json()['number']